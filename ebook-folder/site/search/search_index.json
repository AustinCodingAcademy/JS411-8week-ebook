{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS411-Front-End Apps with React Objective Statement By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class. To Graduate the Full-Stack Program A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website. To Present at Graduation To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code ) How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js411-front-end-apps-with-react","text":"","title":"Welcome to JS411-Front-End Apps with React"},{"location":"#objective-statement","text":"By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class.","title":"To Pass This Class (and all others)"},{"location":"#to-graduate-the-full-stack-program","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"To Graduate the Full-Stack Program"},{"location":"#to-present-at-graduation","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"To Present at Graduation"},{"location":"#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"HowTo-selfHelp/","text":"Helping Yourself (the only way there is) Inevitably, you will get stuck on something. And yes, in your future jobs you will have someone on your team (ideally) to ask but that will still only be reserved for when you really can't figure it out. Try to imagine why someone would hire you for a developer position. They are paying you to figure out problems. That is your number one job: find solutions to problems. With this in mind, we are not only training you in software development but also problem-solving and building your own trust and confidence in yourself to find your own solution. To that end we've put together a guide for your to solve your own problems before reaching out to a tutor. The quick list goes like this: Check the curriculum. Simply type F to bring up the search bar and type in what you're looking for. Ask the virtual mentor that works in the context of your curriculum. Google the issue. Find a solution on StackOverflow, GitHub, Geeks4Geeks, MDN, W3Schools, Reddit, etc. Ask your fellow students and alumni in the Discord general channel. They'd love to help you out! Lastly, book mentor . This should be your very very LAST stop for solving your problem. You won't have this in the \"real world\" so use this with caution and be forewarned. For a more extensive discussion about these steps check out the videos below where Mayra and Shelby walk you through what it looks like to solve your own problems. Check the Curriculum Search the Textbook w/Mayra Search the Textbook w/Shelby AI Virtual Tutor AI Tutor w/Shelby AI Tutor w/Mayra External Resources (Google) Googling w/Shelby Googling w/Mayra Discord Ask the Class w/Mayra Ask the Class w/Shelby Booking a Tutor Book a Tutor w/Shelby Book a Tutor w/Mayra Book a Tutor Restrictions The goal is not to deter you from asking for help but to help you to build the habits that will lead you to have a long career. Ideally, you would walk into a tutoring session with only after you'd tried everything else before and were able to say something like: \"Hi, I am having trouble having my code to do Z, I have looked in the curriculum but it only got me to X and further research got me to Y. What do you recommend I do to get me to Z?\" From experience, 70% of problems will fix be resolved through troubleshooting on your own. For the last 30% the help the tutors give you plus your improved troubleshooting practices will lead to a better experience in school and the job search. Finally, to help track these interactions, please fill out the Technical Mentoring Form for every official tutoring session, this does not include sessions during class. If you cannot follow these guidelines we will restrict your access to tutors until you can prove you've learned to find help on your own.","title":"Self-Help"},{"location":"HowTo-selfHelp/#helping-yourself-the-only-way-there-is","text":"Inevitably, you will get stuck on something. And yes, in your future jobs you will have someone on your team (ideally) to ask but that will still only be reserved for when you really can't figure it out. Try to imagine why someone would hire you for a developer position. They are paying you to figure out problems. That is your number one job: find solutions to problems. With this in mind, we are not only training you in software development but also problem-solving and building your own trust and confidence in yourself to find your own solution. To that end we've put together a guide for your to solve your own problems before reaching out to a tutor. The quick list goes like this: Check the curriculum. Simply type F to bring up the search bar and type in what you're looking for. Ask the virtual mentor that works in the context of your curriculum. Google the issue. Find a solution on StackOverflow, GitHub, Geeks4Geeks, MDN, W3Schools, Reddit, etc. Ask your fellow students and alumni in the Discord general channel. They'd love to help you out! Lastly, book mentor . This should be your very very LAST stop for solving your problem. You won't have this in the \"real world\" so use this with caution and be forewarned. For a more extensive discussion about these steps check out the videos below where Mayra and Shelby walk you through what it looks like to solve your own problems.","title":"Helping Yourself (the only way there is)"},{"location":"HowTo-selfHelp/#check-the-curriculum","text":"Search the Textbook w/Mayra Search the Textbook w/Shelby","title":"Check the Curriculum"},{"location":"HowTo-selfHelp/#ai-virtual-tutor","text":"AI Tutor w/Shelby AI Tutor w/Mayra","title":"AI Virtual Tutor"},{"location":"HowTo-selfHelp/#external-resources-google","text":"Googling w/Shelby Googling w/Mayra","title":"External Resources (Google)"},{"location":"HowTo-selfHelp/#discord","text":"Ask the Class w/Mayra Ask the Class w/Shelby","title":"Discord"},{"location":"HowTo-selfHelp/#booking-a-tutor","text":"Book a Tutor w/Shelby Book a Tutor w/Mayra","title":"Booking a Tutor"},{"location":"HowTo-selfHelp/#book-a-tutor-restrictions","text":"The goal is not to deter you from asking for help but to help you to build the habits that will lead you to have a long career. Ideally, you would walk into a tutoring session with only after you'd tried everything else before and were able to say something like: \"Hi, I am having trouble having my code to do Z, I have looked in the curriculum but it only got me to X and further research got me to Y. What do you recommend I do to get me to Z?\" From experience, 70% of problems will fix be resolved through troubleshooting on your own. For the last 30% the help the tutors give you plus your improved troubleshooting practices will lead to a better experience in school and the job search. Finally, to help track these interactions, please fill out the Technical Mentoring Form for every official tutoring session, this does not include sessions during class. If you cannot follow these guidelines we will restrict your access to tutors until you can prove you've learned to find help on your own.","title":"Book a Tutor Restrictions"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 Discuss in words something you learned in class today or this week. Why/when would you use a class-based component vs a functional component? What are the differences? What new alternatives are there? What is create-react-app? Dig into this. What is JSX? How does React work? From entry point to last child component? How? How does the virtual DOM work in React? Explain in detail. Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? What\u2019s the difference between a React Element and a React Component? Class 4 Discuss in words something you learned in class today or this week. What is the difference between state and props? What is ReactDOM? What is the difference between ReactDOM and React ? What is React.createClass ? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain event delegation in JavaScript and why it is useful. Which new JavaScript / browser features are you most excited about and why? Class 6 Discuss in words something you learned in class today or this week. What is render() in React? Explain its purpose. Is setState() async? What are controlled components? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is the event loop in JavaScript? Why does ReactJS use className over class attribute? Class 8 Discuss in words something you learned in class today or this week. How does hoisting work in JavaScript? Why is setState() in React Async instead of Sync? How is the Virtual-DOM more efficient than Dirty checking? What is PureComponent ? When to use PureComponent over Component ? What is a higher order component? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you think you might use the checkAuth() function to actually verify a user's email and password? Class 10 Discuss in words something you learned in class today or this week. What is Redux? What is \u2018Store\u2019 in Redux? How is state changed in Redux? What is the difference between a Presentational component and a Container component? What is the second argument that can optionally be passed to setState and what is its purpose? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is your opinion of currently popular frameworks/libraries? List and provide your thoughts. Class 12 Discuss in words something you learned in class today or this week. What are \u201cactions\u201d in Redux? What is the role of reducers in Redux? What is the meaning of \u201csingle source of truth\u201d in Redux? Explain the working pieces of Redux. Which (if there is) node library method could you use to solve the algorithm problem you solved in class today? Class 14 Discuss in words something you learned in class today or this week. What is Redux Thunk used for? What is the difference between React Native and React? Are you familiar with AMD/require.js or commonjs? What can they do for you? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain your personal troubleshooting techniques. Include devtools and environments. Class 16 Discuss in words something you learned in class today or this week. Explain the use cases for, and differences between \u2014 bind , apply and call . Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you handle code organization? How do you handle dependency management? What is React.cloneElement ? And the difference with this.props.children ? Walk us through the process of creation of an application or website you've built. What are the differences between functional and imperative programming styles, and explain your preference, if any.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2","text":"Discuss in words something you learned in class today or this week. Why/when would you use a class-based component vs a functional component? What are the differences? What new alternatives are there? What is create-react-app? Dig into this. What is JSX? How does React work? From entry point to last child component? How? How does the virtual DOM work in React? Explain in detail. Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? What\u2019s the difference between a React Element and a React Component?","title":"Class 2"},{"location":"additionalResources/blogPrompts/#class-4","text":"Discuss in words something you learned in class today or this week. What is the difference between state and props? What is ReactDOM? What is the difference between ReactDOM and React ? What is React.createClass ? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain event delegation in JavaScript and why it is useful. Which new JavaScript / browser features are you most excited about and why?","title":"Class 4"},{"location":"additionalResources/blogPrompts/#class-6","text":"Discuss in words something you learned in class today or this week. What is render() in React? Explain its purpose. Is setState() async? What are controlled components? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is the event loop in JavaScript? Why does ReactJS use className over class attribute?","title":"Class 6"},{"location":"additionalResources/blogPrompts/#class-8","text":"Discuss in words something you learned in class today or this week. How does hoisting work in JavaScript? Why is setState() in React Async instead of Sync? How is the Virtual-DOM more efficient than Dirty checking? What is PureComponent ? When to use PureComponent over Component ? What is a higher order component? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you think you might use the checkAuth() function to actually verify a user's email and password?","title":"Class 8"},{"location":"additionalResources/blogPrompts/#class-10","text":"Discuss in words something you learned in class today or this week. What is Redux? What is \u2018Store\u2019 in Redux? How is state changed in Redux? What is the difference between a Presentational component and a Container component? What is the second argument that can optionally be passed to setState and what is its purpose? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is your opinion of currently popular frameworks/libraries? List and provide your thoughts.","title":"Class 10"},{"location":"additionalResources/blogPrompts/#class-12","text":"Discuss in words something you learned in class today or this week. What are \u201cactions\u201d in Redux? What is the role of reducers in Redux? What is the meaning of \u201csingle source of truth\u201d in Redux? Explain the working pieces of Redux. Which (if there is) node library method could you use to solve the algorithm problem you solved in class today?","title":"Class 12"},{"location":"additionalResources/blogPrompts/#class-14","text":"Discuss in words something you learned in class today or this week. What is Redux Thunk used for? What is the difference between React Native and React? Are you familiar with AMD/require.js or commonjs? What can they do for you? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain your personal troubleshooting techniques. Include devtools and environments.","title":"Class 14"},{"location":"additionalResources/blogPrompts/#class-16","text":"Discuss in words something you learned in class today or this week. Explain the use cases for, and differences between \u2014 bind , apply and call . Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you handle code organization? How do you handle dependency management? What is React.cloneElement ? And the difference with this.props.children ? Walk us through the process of creation of an application or website you've built. What are the differences between functional and imperative programming styles, and explain your preference, if any.","title":"Class 16"},{"location":"additionalResources/developSeries/","text":"Develop Series YT, Lisa Genova@TedTalks - How Your Memory Works, and why forgetting is totally okay YT, Chris Williamson@TEDx - Embracing Your Weirdness YT, Paul Rulkens@TEDx - Why the majority is always wrong YT, @TedTalk YT, @TedTalk YT, @TedTalk","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"YT, Lisa Genova@TedTalks - How Your Memory Works, and why forgetting is totally okay YT, Chris Williamson@TEDx - Embracing Your Weirdness YT, Paul Rulkens@TEDx - Why the majority is always wrong YT, @TedTalk YT, @TedTalk YT, @TedTalk","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A certified graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, While maintaining a grade average of >70 in each individual course, Missing no more than a total of 4 class days in total and, Build a full-stack web application using the technology learned in the 4 courses that: 25pts. - has a SQL database 25pts. - has a back-end that serves the data 10pts. - uses a third-party API 10pts. - has a sign-in strategy 20pts. - has a client-side(front-end) app for a user to interact with 10pts. - app is deployed and publicly accessible To qualify for presenting your App to the public at graduation ceremony please see Presentations Qualifications","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A certified graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, While maintaining a grade average of >70 in each individual course, Missing no more than a total of 4 class days in total and, Build a full-stack web application using the technology learned in the 4 courses that: 25pts. - has a SQL database 25pts. - has a back-end that serves the data 10pts. - uses a third-party API 10pts. - has a sign-in strategy 20pts. - has a client-side(front-end) app for a user to interact with 10pts. - app is deployed and publicly accessible To qualify for presenting your App to the public at graduation ceremony please see Presentations Qualifications","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. Steps to Whiteboarding Success Restate, rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency The Prompts Class 1 Prompt 1: none - No whiteboard training the first day. Class 2 Prompt 1: Largest-Smallest - How do you find the largest and smallest number in an unsorted integer array? Class 3 Prompt 1: sumPairs - How do you find all pairs of an integer array whose sum is equal to a given number? 1 2 3 const arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 32 , 0 , - 16 , 8 ] sumPairs ( arr , 16 ) // --> [[8, 8], [14, 2], [0, 16], [1, 15], [32, -16]] Class 4 Prompt 1: areAnagrams - How do you check if two strings are anagrams of each other? Build a program that does just that; return Boolean Class 5 Prompt 1: Recursive Reversal - How can a given string be reversed using recursion? Build a program to do that. Class 6 Prompt 1: Binary Search - How is a binary search tree implemented? Class 7 Prompt 1: Counting Nodes - How do you count the number of leaf nodes in a given binary tree? Class 8 Prompt 1: Reverse Word In-Place - How do you reverse words in a given sentence without using any library method? ```javascript const word = 2 const sentence = 'My cat was a dog and ran away.' 1 2 3 4 const reverseWord = (arg1, arg2) => {} reverseWord(sentence, word) // returns 'saw' ``` Class 9 Prompt 1: Bucket Sort - How do you implement a bucket sort algorithm? Class 10 Prompt 1: Counting Sort - How do you implement a counting sort algorithm? Do it. Class 11 Prompt 1: New Team Member - Break into groups and describe how the Redux-Dashboard app works as if you're introducing a new team member to the source code. Your instructor will act as the your \"new team member\". 20 mins and then we'll come back to do it as a class. Class 12 Prompt 1: No Temp Swap - How do you swap two numbers without using a third variable? Class 13 Prompt 1: Pascal's Triangle - Define a function that returns n lines of Pascal\u2019s Triangle Class 14 Prompt 1: Radix Sort - How is a radix sort algorithm implemented? Class 15 Prompt 1: The Famous Recursive Fibonacci Sequence - Use recursion to log a fibonacci sequence of n length. Class 16 Prompt 1: Pattern Recognition - Define a function that takes an Array of Strings and returns the most commonly occurring String in that Array","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#steps-to-whiteboarding-success","text":"Restate, rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency","title":"Steps to Whiteboarding Success"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: none - No whiteboard training the first day.","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: Largest-Smallest - How do you find the largest and smallest number in an unsorted integer array?","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: sumPairs - How do you find all pairs of an integer array whose sum is equal to a given number? 1 2 3 const arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 32 , 0 , - 16 , 8 ] sumPairs ( arr , 16 ) // --> [[8, 8], [14, 2], [0, 16], [1, 15], [32, -16]]","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: areAnagrams - How do you check if two strings are anagrams of each other? Build a program that does just that; return Boolean","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Recursive Reversal - How can a given string be reversed using recursion? Build a program to do that.","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Binary Search - How is a binary search tree implemented?","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Counting Nodes - How do you count the number of leaf nodes in a given binary tree?","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Reverse Word In-Place - How do you reverse words in a given sentence without using any library method? ```javascript const word = 2 const sentence = 'My cat was a dog and ran away.' 1 2 3 4 const reverseWord = (arg1, arg2) => {} reverseWord(sentence, word) // returns 'saw' ```","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Bucket Sort - How do you implement a bucket sort algorithm?","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Counting Sort - How do you implement a counting sort algorithm? Do it.","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: New Team Member - Break into groups and describe how the Redux-Dashboard app works as if you're introducing a new team member to the source code. Your instructor will act as the your \"new team member\". 20 mins and then we'll come back to do it as a class.","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: No Temp Swap - How do you swap two numbers without using a third variable?","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Pascal's Triangle - Define a function that returns n lines of Pascal\u2019s Triangle","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Radix Sort - How is a radix sort algorithm implemented?","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: The Famous Recursive Fibonacci Sequence - Use recursion to log a fibonacci sequence of n length.","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Pattern Recognition - Define a function that takes an Array of Strings and returns the most commonly occurring String in that Array","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone App to the public, your family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate see Graduation Prerequisites Complete the 501 Job Placement Course Create a profile and link your app to the ACA graduates page Rehearse the 5-minute presentation with your Job Placement Instructor and/or Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone App to the public, your family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate see Graduation Prerequisites Complete the 501 Job Placement Course Create a profile and link your app to the ACA graduates page Rehearse the 5-minute presentation with your Job Placement Instructor and/or Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/reportABug/","text":"Report a Bug Loading\u2026","title":"Report A Bug"},{"location":"additionalResources/reportABug/#report-a-bug","text":"Loading\u2026","title":"Report a Bug"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations There will be no student presentation for the first class. We'll discuss the purpose of presentations and how they will be assigned for future classes. In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here or in the home page of this textbook. The subject doesn't have to be closely related to what is currently being studied. Another objective of these presentations is to give cursory introductions to important topics that we don't have time to cover in the course. Students should prepare in advance, and own their responsibility to their class and themselves. Take this time now to decide and record who will present starting next class, Day 3, through Day 5, then Week 6 through Day 15 (18 presentations total). The first three classes, your prompt is: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 1 Organize and Coordinate who and when students are presenting. Organize and coordinate who is presenting and in what order for the first three days. Divide all students over the three days so everyone presents. Then organize which two students will present for each of the remaining days of this course, Day 6 - Day 16. Remember, two per day. Everyone pitches & demos their apps AGAIN on the last day. Class 2 No presentations today. Class 3 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 4 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 5 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 6 What is Angular(8+) and what is React? How are they different from each other? Programmers never stop learning. Share with the class ways you and they can continue their journey as programmers. Class 7 What are the different phases of ReactJS component lifecycle? How is React different from VUE? What is the significance of keys in React? Demonstrate to the class how and when they need to be used. Class 8 What are the major features, advantages, and limitations of ReactJS? It\u2019s ok to admit what you don\u2019t know. Share with the class ways a junior developer may approach senior developers to ask the right questions and get things to working faster. Silence is the worse thing a junior dev can produce! Class 9 What is Context in React? Describe and Demonstrate. Pair programming is valuable. Teach the class why working together is better than going alone. Why is the switch keyword used in React Router v4? Demonstrate and Describe. Class 10 Demonstrate synthetic events in React and explain them. Demonstrate how to tell React to build in Production mode and what will it do. Class 11 What are the concepts of functional programming? AS A PROGRAMMER, YOU DON\u2019T EXIST WITHIN A BUBBLE: IMMERSE YOURSELF IN THE CULTURE. Share with the class a few meetups, groups, and mailing lists to get on to join the local tech community. Class 12 What are the basic principals of Redux? Demonstrate the components and flow of data in Redux. Class 13 Distinguish Redux from MVC and Flux. Demonstrate how you would start planning your react app . Class 14 How would you start a React-Native project? Demonstrate and describe. What are the benefits of Redux? Class 15 Demonstrate to the class where to start searching for jobs and how. Programming is hard. Share with the class how to keep motivated even in the darkness. Class 16 Graduation App Pitches - all students or student pairs will pitch their app for the class! The Capstone App pitch includes: Names and skills graduating with Problem you were facing How your app solves that problem Favorite parts of the app Where you'd like to see this app go in the future (new features, etc...)","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"There will be no student presentation for the first class. We'll discuss the purpose of presentations and how they will be assigned for future classes. In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here or in the home page of this textbook. The subject doesn't have to be closely related to what is currently being studied. Another objective of these presentations is to give cursory introductions to important topics that we don't have time to cover in the course. Students should prepare in advance, and own their responsibility to their class and themselves. Take this time now to decide and record who will present starting next class, Day 3, through Day 5, then Week 6 through Day 15 (18 presentations total). The first three classes, your prompt is: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#class-1","text":"Organize and Coordinate who and when students are presenting. Organize and coordinate who is presenting and in what order for the first three days. Divide all students over the three days so everyone presents. Then organize which two students will present for each of the remaining days of this course, Day 6 - Day 16. Remember, two per day. Everyone pitches & demos their apps AGAIN on the last day.","title":"Class 1"},{"location":"additionalResources/studentPresentations/#class-2","text":"No presentations today.","title":"Class 2"},{"location":"additionalResources/studentPresentations/#class-3","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 3"},{"location":"additionalResources/studentPresentations/#class-4","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 4"},{"location":"additionalResources/studentPresentations/#class-5","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 5"},{"location":"additionalResources/studentPresentations/#class-6","text":"What is Angular(8+) and what is React? How are they different from each other? Programmers never stop learning. Share with the class ways you and they can continue their journey as programmers.","title":"Class 6"},{"location":"additionalResources/studentPresentations/#class-7","text":"What are the different phases of ReactJS component lifecycle? How is React different from VUE? What is the significance of keys in React? Demonstrate to the class how and when they need to be used.","title":"Class 7"},{"location":"additionalResources/studentPresentations/#class-8","text":"What are the major features, advantages, and limitations of ReactJS? It\u2019s ok to admit what you don\u2019t know. Share with the class ways a junior developer may approach senior developers to ask the right questions and get things to working faster. Silence is the worse thing a junior dev can produce!","title":"Class 8"},{"location":"additionalResources/studentPresentations/#class-9","text":"What is Context in React? Describe and Demonstrate. Pair programming is valuable. Teach the class why working together is better than going alone. Why is the switch keyword used in React Router v4? Demonstrate and Describe.","title":"Class 9"},{"location":"additionalResources/studentPresentations/#class-10","text":"Demonstrate synthetic events in React and explain them. Demonstrate how to tell React to build in Production mode and what will it do.","title":"Class 10"},{"location":"additionalResources/studentPresentations/#class-11","text":"What are the concepts of functional programming? AS A PROGRAMMER, YOU DON\u2019T EXIST WITHIN A BUBBLE: IMMERSE YOURSELF IN THE CULTURE. Share with the class a few meetups, groups, and mailing lists to get on to join the local tech community.","title":"Class 11"},{"location":"additionalResources/studentPresentations/#class-12","text":"What are the basic principals of Redux? Demonstrate the components and flow of data in Redux.","title":"Class 12"},{"location":"additionalResources/studentPresentations/#class-13","text":"Distinguish Redux from MVC and Flux. Demonstrate how you would start planning your react app .","title":"Class 13"},{"location":"additionalResources/studentPresentations/#class-14","text":"How would you start a React-Native project? Demonstrate and describe. What are the benefits of Redux?","title":"Class 14"},{"location":"additionalResources/studentPresentations/#class-15","text":"Demonstrate to the class where to start searching for jobs and how. Programming is hard. Share with the class how to keep motivated even in the darkness.","title":"Class 15"},{"location":"additionalResources/studentPresentations/#class-16","text":"Graduation App Pitches - all students or student pairs will pitch their app for the class! The Capstone App pitch includes: Names and skills graduating with Problem you were facing How your app solves that problem Favorite parts of the app Where you'd like to see this app go in the future (new features, etc...)","title":"Class 16"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Quick Student Intros Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.) Intro to React What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#quick-student-intros","text":"Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.)","title":"Quick Student Intros"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#intro-to-react","text":"What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Intro to React"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/","text":"Class Ten - Questions for Discussion Action creator Reducer combineReducers Dispatch Do you have to use bindActionCreator ? What is the flow? How does Redux manage data? Draw it. Can you repeat the steps to update the state.users ? What is meant by \"dumb\" component and \"smart\" container (Presentational component and a Container Component)? Why do our reducers need to return a copy of the state? How does the ... (spread operator) work under the hood? In the bindActionCreators documentation, what is happening in the import statement with the * ? What is dispatch doing?","title":"Day 10 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#class-ten-questions-for-discussion","text":"Action creator Reducer combineReducers Dispatch Do you have to use bindActionCreator ? What is the flow? How does Redux manage data? Draw it. Can you repeat the steps to update the state.users ? What is meant by \"dumb\" component and \"smart\" container (Presentational component and a Container Component)? Why do our reducers need to return a copy of the state? How does the ... (spread operator) work under the hood? In the bindActionCreators documentation, what is happening in the import statement with the * ? What is dispatch doing?","title":"Class Ten - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/","text":"Class Eleven - Questions for Discussion Asynchronous Promise Explain how Redux-Thunk works. Why do we need Redux-Thunk? What is createStore doing? What is applyMiddleware doing?","title":"Day 11 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#class-eleven-questions-for-discussion","text":"Asynchronous Promise Explain how Redux-Thunk works. Why do we need Redux-Thunk? What is createStore doing? What is applyMiddleware doing?","title":"Class Eleven - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/","text":"Class Twelve - Questions for Discussion useState useEffect Array destructuring What is happening in the array destructuring used in the example: const [count, setCount]; Why is planning critical? What does your app do? Why do you want to build this app? How does your idea solve a problem you have? How can you simplify your idea even more to build the base level of an incredible app with tons of features later on?","title":"Day 12 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#class-twelve-questions-for-discussion","text":"useState useEffect Array destructuring What is happening in the array destructuring used in the example: const [count, setCount]; Why is planning critical? What does your app do? Why do you want to build this app? How does your idea solve a problem you have? How can you simplify your idea even more to build the base level of an incredible app with tons of features later on?","title":"Class Twelve - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/","text":"Class Thirteen - Question for Discussion What are node_modules ? What's the difference between package.json and package-lock.json ? Where is the entry point to your React app? What changes will you need to make to your backend for your Capstone Project to have the data it needs? What do you find to be the hardest part about planning your Capstone App?","title":"Day 13 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#class-thirteen-question-for-discussion","text":"What are node_modules ? What's the difference between package.json and package-lock.json ? Where is the entry point to your React app? What changes will you need to make to your backend for your Capstone Project to have the data it needs? What do you find to be the hardest part about planning your Capstone App?","title":"Class Thirteen - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/","text":"Class Fourteen - Questions for Discussion What is a User Flow? Why the hell do we need a user flow? How is the visualization of our app useful to our creation of it? How does planning feel compared to coding?","title":"Day 14 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#class-fourteen-questions-for-discussion","text":"What is a User Flow? Why the hell do we need a user flow? How is the visualization of our app useful to our creation of it? How does planning feel compared to coding?","title":"Class Fourteen - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/","text":"Class Fifteen - Questions for Discussion What is atomic design? Why is it best to reuse components? How do you plan to reuse components?","title":"Day 15 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#class-fifteen-questions-for-discussion","text":"What is atomic design? Why is it best to reuse components? How do you plan to reuse components?","title":"Class Fifteen - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/","text":"Class Sixteen - Question for Discussion","title":"Day 16 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#class-sixteen-question-for-discussion","text":"","title":"Class Sixteen - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two - Questions for Discussion Props + State What does Composable Architecture mean? Really, what does it mean? Can someone draw a diagram for us? What is the entry-point of a React app? How does our app get data? What does it do after that? What are the reasons for creating a class-based component? What is this.state ? Why do we have to use this ? What is the setState() method? Why must we use it to set state? What is special about it? Why do we call it local state? Why do we need it? What is scope? Why is it important to understand? Give an example of how could you take advantage of scope. What is app state? How do we pass data from a parent component to any of its child components? Can someone draw this our for us? Why do we need to pass the data? What are attributes and why do we need them in React components? How do we create a method in a React component? Where does it go? What's the syntax? What are Template literals in JavaScript? What's the syntax? What's the naming convention of React components? What's the difference between a Class-based and a Functional component? Which do you think is more performant? Why? What are React Hooks? How do you think you could organize multiple components? Any suggestions? Drawings? Why?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"","title":"Class Two - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#props-state","text":"What does Composable Architecture mean? Really, what does it mean? Can someone draw a diagram for us? What is the entry-point of a React app? How does our app get data? What does it do after that? What are the reasons for creating a class-based component? What is this.state ? Why do we have to use this ? What is the setState() method? Why must we use it to set state? What is special about it? Why do we call it local state? Why do we need it? What is scope? Why is it important to understand? Give an example of how could you take advantage of scope. What is app state? How do we pass data from a parent component to any of its child components? Can someone draw this our for us? Why do we need to pass the data? What are attributes and why do we need them in React components? How do we create a method in a React component? Where does it go? What's the syntax? What are Template literals in JavaScript? What's the syntax? What's the naming convention of React components? What's the difference between a Class-based and a Functional component? Which do you think is more performant? Why? What are React Hooks? How do you think you could organize multiple components? Any suggestions? Drawings? Why?","title":"Props + State"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class 3 Questions for Discussion Conditional Rendering Which React lifecycle method do you use to fetch data from an API? How do you use CSS in your React components? Event Handler How do you handle events in React like clicking a button and input text? Syntax? Dynamic Rendering Key How do you embed .map() in JSX? What is the syntax for building methods to handle events? What other JavaScript thing have you learned while learning React? What is the best practice for assigning a key to a list item while mapping? Syntax?","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-3-questions-for-discussion","text":"","title":"Class 3 Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#conditional-rendering","text":"Which React lifecycle method do you use to fetch data from an API? How do you use CSS in your React components? Event Handler How do you handle events in React like clicking a button and input text? Syntax?","title":"Conditional Rendering"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#dynamic-rendering","text":"Key How do you embed .map() in JSX? What is the syntax for building methods to handle events? What other JavaScript thing have you learned while learning React? What is the best practice for assigning a key to a list item while mapping? Syntax?","title":"Dynamic Rendering"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/","text":"Class Four - Questions for Discussion Forms Controlled component Single source of truth Who is Dan Abramov? Why is he important enough to talk about here? Why do we need to .bind() our methods? (or arrow functions?) In the CodePen you will see the line that says: ReactDOM.render() . What's going on here and why? What is the npm package: prop-types used for?`","title":"Day 4 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#class-four-questions-for-discussion","text":"","title":"Class Four - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#forms","text":"Controlled component Single source of truth Who is Dan Abramov? Why is he important enough to talk about here? Why do we need to .bind() our methods? (or arrow functions?) In the CodePen you will see the line that says: ReactDOM.render() . What's going on here and why? What is the npm package: prop-types used for?`","title":"Forms"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/","text":"Class Five - Questions for Discussion What is a Styled Component? What is a Controlled Component? What is an NPM package? What is Material UI? What is Material Design? What is a styled component? What is your first step to using Material UI? Why do you think we should use Material UI? How does Material-UI or Bootstrap work? What makes the difference when you pass the components different props? Why is the process of styling different in React than in plain HTML, CSS DOM creation? How do you style a component without a third-party like Material-UI? What are the various ways to do it? How is the Material-UI Documentation organized? Can we make sense of how they've laid out the components?","title":"Day 5 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#class-five-questions-for-discussion","text":"What is a Styled Component? What is a Controlled Component? What is an NPM package? What is Material UI? What is Material Design? What is a styled component? What is your first step to using Material UI? Why do you think we should use Material UI? How does Material-UI or Bootstrap work? What makes the difference when you pass the components different props? Why is the process of styling different in React than in plain HTML, CSS DOM creation? How do you style a component without a third-party like Material-UI? What are the various ways to do it? How is the Material-UI Documentation organized? Can we make sense of how they've laid out the components?","title":"Class Five - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/","text":"Class Six - Questions for Discussion componentDidUpdate componentDidMount constructor method super method What are the lifecycle methods of React Component? How/when should you use componentDidMount ? How/when should you use componentDidUpdate ? Can we come up with a use case for each lifecycle method? What are Hooks and how do they helps us not use class components?","title":"Day 6 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#class-six-questions-for-discussion","text":"componentDidUpdate componentDidMount constructor method super method What are the lifecycle methods of React Component? How/when should you use componentDidMount ? How/when should you use componentDidUpdate ? Can we come up with a use case for each lifecycle method? What are Hooks and how do they helps us not use class components?","title":"Class Six - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/","text":"Class Seven - Questions for Discussion Describe each of these components and their purpose: <Switch> , <Link> , <BrowserRouter> , Router , ReactDom , and the render() method Describe the work flow from Link to someComponent . What is BrowserRouter doing? What is Routing? Why do we need web app routing ? Describe in detail this line of code: ReactDOM.render(<Main />, document.getElementById('root'));","title":"Day 7 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#class-seven-questions-for-discussion","text":"Describe each of these components and their purpose: <Switch> , <Link> , <BrowserRouter> , Router , ReactDom , and the render() method Describe the work flow from Link to someComponent . What is BrowserRouter doing? What is Routing? Why do we need web app routing ? Describe in detail this line of code: ReactDOM.render(<Main />, document.getElementById('root'));","title":"Class Seven - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/","text":"Class Eight - Questions for Dicussion What is a Cookie? How would you describe cookies? Could you name a few of their uses? Why do we need certain components to be protected? How do you think we'll use this to create an actual login process? What is the HTML History api? What is the singleton pattern? What is production mode? What is the browser window? What is setting cookies?","title":"Day 8 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#class-eight-questions-for-dicussion","text":"What is a Cookie? How would you describe cookies? Could you name a few of their uses? Why do we need certain components to be protected? How do you think we'll use this to create an actual login process? What is the HTML History api? What is the singleton pattern? What is production mode? What is the browser window? What is setting cookies?","title":"Class Eight - Questions for Dicussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/","text":"Class Nine - Questions for Discussion Store Global state Container mapStateToProps What is the Provider doing for our React components? Explain Redux on paper. Use drawings and words to explain it to a friend, classmate, roommate, or spouse. Why do we need to \"wrap\" our components in containers? What is mapStateToProps doing?","title":"Day 9 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#class-nine-questions-for-discussion","text":"Store Global state Container mapStateToProps What is the Provider doing for our React components? Explain Redux on paper. Use drawings and words to explain it to a friend, classmate, roommate, or spouse. Why do we need to \"wrap\" our components in containers? What is mapStateToProps doing?","title":"Class Nine - Questions for Discussion"},{"location":"module-1/CRA-overview/","text":"CRA (create-react-app) + ToDo App Walk-through Overview For the rest of this class, we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion. Starting with React video See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element. Create-React-App See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote. Convert Functional Component to Class-based Component Learn what component state means How to convert a Functional Component to a Class-Based Component import Component exchange function keyword for class keyword build constructor and call super build state object and build a render method. JSX & Add Button + State Change Use JSX to render pure JavaScript within your HTML. Build a button. Build a method to be called when the button is clicked. Update state in the method. And render the state change on the screen. Add Input Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\". .map() Todos use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element Know Your Docs React Dev Docs - create-react-app NPM Docs - npx Deprecated and is now part of the NPM CLI toolchain","title":"CRA Overview"},{"location":"module-1/CRA-overview/#cra-create-react-app-todo-app-walk-through","text":"","title":"CRA (create-react-app) + ToDo App Walk-through"},{"location":"module-1/CRA-overview/#overview","text":"For the rest of this class, we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion.","title":"Overview"},{"location":"module-1/CRA-overview/#starting-with-react-video","text":"See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element.","title":"Starting with React video"},{"location":"module-1/CRA-overview/#create-react-app","text":"See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote.","title":"Create-React-App"},{"location":"module-1/CRA-overview/#convert-functional-component-to-class-based-component","text":"Learn what component state means How to convert a Functional Component to a Class-Based Component import Component exchange function keyword for class keyword build constructor and call super build state object and build a render method.","title":"Convert Functional Component to Class-based Component"},{"location":"module-1/CRA-overview/#jsx-add-button-state-change","text":"Use JSX to render pure JavaScript within your HTML. Build a button. Build a method to be called when the button is clicked. Update state in the method. And render the state change on the screen.","title":"JSX &amp; Add Button + State Change"},{"location":"module-1/CRA-overview/#add-input","text":"Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\".","title":"Add Input"},{"location":"module-1/CRA-overview/#map-todos","text":"use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element","title":".map() Todos"},{"location":"module-1/CRA-overview/#know-your-docs","text":"React Dev Docs - create-react-app NPM Docs - npx Deprecated and is now part of the NPM CLI toolchain","title":"Know Your Docs"},{"location":"module-1/bonusLesson/","text":"Bonus Lesson: React from HTML to JSX + Why Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus - HTML + JSX"},{"location":"module-1/bonusLesson/#bonus-lesson-react-from-html-to-jsx-why","text":"Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus Lesson: React from HTML to JSX + Why"},{"location":"module-1/class-1/","text":"Class 1: Todo App The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney Greet, Outline, and Objectify OBJECTIVE - Today the student will learn and practice to understand: how to use React to create a simple composable web app Demonstrate their ability to build a new todo app in React from recollection Questions for Student Led Discussion + Quick Intros Interview Challenge Student Presentations Creation Time: Repeat the Homework Create-react-app Add origin Create a todo list app Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins As usual, it is incredibly important that you read the pre-homework. If you haven't read the pre-homework and worked through the code-along video YOU WILL BE FAR BEHIND TODAY!!! In the pre-homework, you should have downloaded create-react-app and spun up a create-react-app, built a button that changes state from true to false and then displayed the change of state. Today, we're going to continue that process and build a todo app with React!! Example Simple React Todo App Create a new react app: npx create-react-app my-app-name-here cd my-app-name-here git init and create a new repe push it to the new repo in GitHub git remote add origin \"https://github.com/your_github_username/$repo_name.git\" Yank out all the unnecessary code and begin building your todo app Create the state for your app.js the equal an object with the values: {isClicked: false, todos: [], text: ''} in it Create a button and add an onClickHandler that uses this.setState({}) to change the value of isClicked from false to true and true to false Create an input field and an onChangeHandler function that changes the state of text: '' to the e.target.value onChange of the input field Change your onClickHandler function to uses this.setState({}) to set the value of text as the last value todos: [] Don't forget to spread the rest/ ... of the todos Now clear text in the same function Once you have state being changed properly create an element that can be used for each of the items in todos: [] Now .map() over todos and show each item in the DOM. REMEMBER to give the callback function in .map() an index and provide that to each of the elements as a prop: key={index} Create a button on each of the item elements and uses this and when clicked removes/deletes the item from todos: [] METHOD 1 : Passing Methods/Functions as Props. Use the following mix-and-match options to pass a delete method that uses this.setState to update state when the delete button is clicked, passing the index of the item back up to the component that handles state . ref Mix & Match Code Snippets a handleClick={index => this.deleteItem(index)} b delete = (index) => { c } d let objectCopy = [...this.state.item] e ObjectCopy.splice(index, 1) f this.SetState({items: [...objectCopy]}) g <button onClick={() => props.handleClick(index)}>Delete</button> Follow-up Video: Vimeo, Clayton@ACA - Intro to React, 80 mins Or use METHOD 2 : use setState Hook - https://www.robinwieruch.de/react-remove-item-from-list Push Yourself Further Create a button that allows you to edit each todo Add a drag and drop feature to reorder the todos Complete both methods of the delete and add functionality Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 1 ToDo App"},{"location":"module-1/class-1/#class-1-todo-app","text":"The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney","title":"Class 1: Todo App"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"OBJECTIVE - Today the student will learn and practice to understand: how to use React to create a simple composable web app Demonstrate their ability to build a new todo app in React from recollection Questions for Student Led Discussion + Quick Intros Interview Challenge Student Presentations Creation Time: Repeat the Homework Create-react-app Add origin Create a todo list app Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-1/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-1/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-1/#creation-time-60-90-mins","text":"As usual, it is incredibly important that you read the pre-homework. If you haven't read the pre-homework and worked through the code-along video YOU WILL BE FAR BEHIND TODAY!!! In the pre-homework, you should have downloaded create-react-app and spun up a create-react-app, built a button that changes state from true to false and then displayed the change of state. Today, we're going to continue that process and build a todo app with React!! Example Simple React Todo App Create a new react app: npx create-react-app my-app-name-here cd my-app-name-here git init and create a new repe push it to the new repo in GitHub git remote add origin \"https://github.com/your_github_username/$repo_name.git\" Yank out all the unnecessary code and begin building your todo app Create the state for your app.js the equal an object with the values: {isClicked: false, todos: [], text: ''} in it Create a button and add an onClickHandler that uses this.setState({}) to change the value of isClicked from false to true and true to false Create an input field and an onChangeHandler function that changes the state of text: '' to the e.target.value onChange of the input field Change your onClickHandler function to uses this.setState({}) to set the value of text as the last value todos: [] Don't forget to spread the rest/ ... of the todos Now clear text in the same function Once you have state being changed properly create an element that can be used for each of the items in todos: [] Now .map() over todos and show each item in the DOM. REMEMBER to give the callback function in .map() an index and provide that to each of the elements as a prop: key={index} Create a button on each of the item elements and uses this and when clicked removes/deletes the item from todos: [] METHOD 1 : Passing Methods/Functions as Props. Use the following mix-and-match options to pass a delete method that uses this.setState to update state when the delete button is clicked, passing the index of the item back up to the component that handles state . ref Mix & Match Code Snippets a handleClick={index => this.deleteItem(index)} b delete = (index) => { c } d let objectCopy = [...this.state.item] e ObjectCopy.splice(index, 1) f this.SetState({items: [...objectCopy]}) g <button onClick={() => props.handleClick(index)}>Delete</button> Follow-up Video: Vimeo, Clayton@ACA - Intro to React, 80 mins Or use METHOD 2 : use setState Hook - https://www.robinwieruch.de/react-remove-item-from-list","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-1/#push-yourself-further","text":"Create a button that allows you to edit each todo Add a drag and drop feature to reorder the todos Complete both methods of the delete and add functionality","title":"Push Yourself Further"},{"location":"module-1/class-1/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: Punk API Beer App Your limitation\u2014it\u2019s only your imagination. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: passing data between components using props set state and use it fetch external data and set state with it dynamically render data with uniform elements Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Pair up to build in pairs Plan your beer app (whiteboard & Code Plan) Create a repo and program Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Build a simple app that requests information from the PUNK API and dynamically renders data from it with React components. Project Instructions Pair-program this one Create a react app: PUNK-API-REACT-APP git init and push it up as a repo In your app.js component make an HTTP request with axios to: https://api.punkapi.com/v2/beers and set the data that comes back into an array in state . Build a beer component that displays everything about the beer Map over state and render a component for each beer in state Add a button that allows a user to \"like\" a beer Follow-up Video YT, ihatetomatoes - React, How to use Fetch API Push Yourself Further Follow along with Peter Tichy at ihatetomatoes through his React Tutorial to make the app collapsible and interactive Go find another API and build another React app: https://apilist.fun Build the functionality for your \"liked\" heart 411-16-Code Plan Your Like Button Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create PunkAPI Assignment Create Class 2 Blog Assignment Before you give the attendance code, STOP everyone and hold a quick verbal review of these terms. Ask the class and let students call out the answer freely. Don't let only one student answer them all though! Props State setState() Template literals in JavaScript Give attendance code Prepare for next by completing all of your pre-class lessons Complete the feedback survey Record every class. Remind the students to merge their PRs (if applicable). Remind students to bring paper and pencils to every class for whiteboarding.","title":"Class 2 Beer App"},{"location":"module-1/class-2/#class-2-punk-api-beer-app","text":"Your limitation\u2014it\u2019s only your imagination.","title":"Class 2: Punk API Beer App"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: passing data between components using props set state and use it fetch external data and set state with it dynamically render data with uniform elements Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Pair up to build in pairs Plan your beer app (whiteboard & Code Plan) Create a repo and program Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"Build a simple app that requests information from the PUNK API and dynamically renders data from it with React components.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#project-instructions","text":"Pair-program this one Create a react app: PUNK-API-REACT-APP git init and push it up as a repo In your app.js component make an HTTP request with axios to: https://api.punkapi.com/v2/beers and set the data that comes back into an array in state . Build a beer component that displays everything about the beer Map over state and render a component for each beer in state Add a button that allows a user to \"like\" a beer","title":"Project Instructions"},{"location":"module-1/class-2/#follow-up-video","text":"YT, ihatetomatoes - React, How to use Fetch API","title":"Follow-up Video"},{"location":"module-1/class-2/#push-yourself-further","text":"Follow along with Peter Tichy at ihatetomatoes through his React Tutorial to make the app collapsible and interactive Go find another API and build another React app: https://apilist.fun Build the functionality for your \"liked\" heart 411-16-Code Plan Your Like Button","title":"Push Yourself Further"},{"location":"module-1/class-2/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-2/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create PunkAPI Assignment Create Class 2 Blog Assignment Before you give the attendance code, STOP everyone and hold a quick verbal review of these terms. Ask the class and let students call out the answer freely. Don't let only one student answer them all though! Props State setState() Template literals in JavaScript Give attendance code Prepare for next by completing all of your pre-class lessons Complete the feedback survey Record every class. Remind the students to merge their PRs (if applicable). Remind students to bring paper and pencils to every class for whiteboarding.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-3/","text":"Class 3: Address Book It\u2019s going to be hard, but hard does not mean impossible. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Conditional rendering with React Initiating and using local state in React components Passing data via props to child components Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Project One: Random User Address Book Project 2: Todo App continued w/Mapping, Props, State and Conditional Rendering Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Project One: Random User Address Book Partner up. This is a pair programming project. Start with this API: https://randomuser.me/api?results=25 Whiteboard an app you can use to display users that you would use if you didn't have your phone. Make a code plan and plan your components. Spec 1: minimum 25 users Spec 2: displays the user's name and thumbnail picture Spec 3: When the \"show details\" button is clicked the user's details are revealed and button text turns to \"hide details\" Spec 4: When \"hide details\" is clicked the user's details disappear. Follow-up Video: YT, ihatetomatoes - How to use Fetch API in React Project Two: ToDo App Continued If you didn't finish your Todo App from last night w/ mapping, props, state and conditional rendering, now is the time to finish that. Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create AddressBook Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 3 Address Book"},{"location":"module-1/class-3/#class-3-address-book","text":"It\u2019s going to be hard, but hard does not mean impossible.","title":"Class 3: Address Book"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Conditional rendering with React Initiating and using local state in React components Passing data via props to child components Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Project One: Random User Address Book Project 2: Todo App continued w/Mapping, Props, State and Conditional Rendering Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-3/#project-one-random-user-address-book","text":"Partner up. This is a pair programming project. Start with this API: https://randomuser.me/api?results=25 Whiteboard an app you can use to display users that you would use if you didn't have your phone. Make a code plan and plan your components. Spec 1: minimum 25 users Spec 2: displays the user's name and thumbnail picture Spec 3: When the \"show details\" button is clicked the user's details are revealed and button text turns to \"hide details\" Spec 4: When \"hide details\" is clicked the user's details disappear. Follow-up Video: YT, ihatetomatoes - How to use Fetch API in React","title":"Project One: Random User Address Book"},{"location":"module-1/class-3/#project-two-todo-app-continued","text":"If you didn't finish your Todo App from last night w/ mapping, props, state and conditional rendering, now is the time to finish that. Loading\u2026","title":"Project Two: ToDo App Continued"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Create AddressBook Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-4/","text":"Class 4: Hackathon Instructor Notes What In-Class Hackathon to build a Hacker News Clone with the Algolia API. Groups of 3 - 4 Architecture: 4 Components passing props Plan It => Build It => Evaluate It => Host It Why Need to internalize how to plan an app, visualize the needs and building blocks. Learn to read docs on their own. Work as a team. Organize on Trello and Git Branches How Divide the groups by partnering students by strengths. Require them to create a Trello board meanwhile one student can build a repo. Let them lead the planning but make sure they all have a plan before setting off. Let them lead their groups and mentor only when they ask. Watch the overview video . Wake up with determination. Go to bed with satisfaction. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Developing an app in collaboration API requests, conditional rendering, mapping, forms Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Hackernews Client or GitHub Issue Client Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today you will work with a team of 2-3 junior developers to build a Hackernews Client. For this Hackathon you will need to look at your available data and plan how you want to render it, then plan with your team how to build it. Work smart, not hard. 411-22-HackathonOverview from Zollege on Vimeo . Here\u2019s the regular Hacker News site, and then there\u2019s the Algolia Hacker News Search . If you haven't visited either one, you should start bringing it into your daily practice. It has been said that all web apps are basically just lists. This app will give you some practice with lists of components that are a little more complicated than todos. Fetch stories from the Algolia HN Search REST API . Hint: Look under the Search heading. Instructions Example NewsFeed In groups of 2 - 3: Use your browser to see what the data looks like when you fetch it. Whiteboard and make a plan of the app you want to build with the data. Create a react app, git init and push it to a new repo, then git clone. Together, build a new app people can use!! Specs: Starts with empty list Has search bar at the top to filter search for terms Accepts a search term and calls the HN API with that term as the query Loads the list Has a form input to search by date and author Follow-up: Blog, Medium - How to Build a Simple Hackernews Feed Push Yourself Further Add a \"View Later\" button to flag articles you want to read later. This will move the article into another list. Add a \"Not Interested\" section to flag articles you don't want to read and greys out the title text when clicked. Add functionality that only displays 10 articles at a time. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Hackathon Checkpoint Assignment Create Class 4 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 4 Hackathon"},{"location":"module-1/class-4/#class-4-hackathon","text":"","title":"Class 4: Hackathon"},{"location":"module-1/class-4/#instructor-notes","text":"","title":"Instructor Notes"},{"location":"module-1/class-4/#what","text":"In-Class Hackathon to build a Hacker News Clone with the Algolia API. Groups of 3 - 4 Architecture: 4 Components passing props Plan It => Build It => Evaluate It => Host It","title":"What"},{"location":"module-1/class-4/#why","text":"Need to internalize how to plan an app, visualize the needs and building blocks. Learn to read docs on their own. Work as a team. Organize on Trello and Git Branches","title":"Why"},{"location":"module-1/class-4/#how","text":"Divide the groups by partnering students by strengths. Require them to create a Trello board meanwhile one student can build a repo. Let them lead the planning but make sure they all have a plan before setting off. Let them lead their groups and mentor only when they ask. Watch the overview video . Wake up with determination. Go to bed with satisfaction.","title":"How"},{"location":"module-1/class-4/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Developing an app in collaboration API requests, conditional rendering, mapping, forms Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Hackernews Client or GitHub Issue Client Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-4/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-4/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-4/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-4/#creation-time-60-90-mins","text":"Today you will work with a team of 2-3 junior developers to build a Hackernews Client. For this Hackathon you will need to look at your available data and plan how you want to render it, then plan with your team how to build it. Work smart, not hard. 411-22-HackathonOverview from Zollege on Vimeo . Here\u2019s the regular Hacker News site, and then there\u2019s the Algolia Hacker News Search . If you haven't visited either one, you should start bringing it into your daily practice. It has been said that all web apps are basically just lists. This app will give you some practice with lists of components that are a little more complicated than todos. Fetch stories from the Algolia HN Search REST API . Hint: Look under the Search heading.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-4/#instructions","text":"Example NewsFeed In groups of 2 - 3: Use your browser to see what the data looks like when you fetch it. Whiteboard and make a plan of the app you want to build with the data. Create a react app, git init and push it to a new repo, then git clone. Together, build a new app people can use!! Specs: Starts with empty list Has search bar at the top to filter search for terms Accepts a search term and calls the HN API with that term as the query Loads the list Has a form input to search by date and author Follow-up: Blog, Medium - How to Build a Simple Hackernews Feed","title":"Instructions"},{"location":"module-1/class-4/#push-yourself-further","text":"Add a \"View Later\" button to flag articles you want to read later. This will move the article into another list. Add a \"Not Interested\" section to flag articles you don't want to read and greys out the title text when clicked. Add functionality that only displays 10 articles at a time.","title":"Push Yourself Further"},{"location":"module-1/class-4/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-4/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-4/#exit-recap-attendance-and-reminders-5-mins","text":"Create Hackathon Checkpoint Assignment Create Class 4 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/conditionalRendering/","text":"Conditional Rendering The harder you work for something, the greater you\u2019ll feel when you achieve it. Overview Whoa, you've done a lot! Already you've learned the core mindset and techniques of React which includes a new language, JSX!! Congratulation! In the past few lessons you've learned how to fetch data, store it in state, and rendering it for the human user\u2019s eyes using someone else's codebase, React. During that time you've learned how to merge our understanding of programming in JavaScript with the layout and styling of HTML and CSS. We've been working hard! But now it's time to dig a little deeper and figure out how to use some of the statements we learned last week to render certain elements based on conditions that we get in our applications. Conditional Rendering Using Local State Below is a snippet of code that should be very easy for you to read. Simple If/Else Statement 1 2 3 4 5 if ( isVerified ) { return \"is verified\" } else { return \"not verified\" } This is simple and straightforward JavaScript. We'll now just apply the same logic with React. After all, when we're developing in React we're writing JavaScript! If/Else Statement in React 1 2 3 4 5 6 7 8 9 import React from 'react' const myConditionalComponent = ( props ) => { if ( props . isVerified ) { return < IsVerifiedComponent userId = { props . id } /> } else { return < NotVerifiedComponent userId = { props . id } /> } } Above we see that if the user is verified, (prop.isVerified = true) then we can render a component that might welcome the user like the <IsVerifiedComponent /> , else we can render a component that tells them that their login failed and ask them to try again in the <NotVerifiedComponent /> . All of that was based on the values that are in the props object. We can do the same thing with state! Follow along with the comments throughout the code snippet to understand this for yourself. Button Changes State 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // turn your functional component into a class-based component so you can create local state import React , { Component } from 'react' import UserNameCard from 'UserNameCard.js' import UserDetailsCard from 'UserDetailsCard.js' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) /* inside the constructor, initiate the state as an object and give it the keys you want to use, in this case we'll use a property called isHidden so we know what it's for. */ this . state = { isHidden : true } } /* Remember from 211 that classes are functions that return an object with a context or instance of which will require/allow us to use the `this` keyword. */ /* because the component is a class we can also create and use our own methods: */ handleClick = () => { /* What you see below is a ternary operator. It reads like this: \"if `this.state.isHidden` is true - set status to be false , else set it to true\". */ let status = this . state . isHidden == true ? false : true /* Because we have the variable status set to be the opposite of whatever `this.state.isHidden` equals... */ /* ...we can use its value to set `this.state.isHidden` when our button is clicked.*/ /* Notice we use the `.setState({})` method to change values in our state object. */ this . setState ({ isHidden : status }) } render () { /* then we check if the value in state is true or false and render accordingly */ if ( this . state . isHidden ) { return ( /* if the user clicks this component it will trigger the `handleClick` method which changes the state and then forces the parent component to re-render, which will render the `<UserDetailsCard />` component as well and vice versa! */ < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import React , { Component } from 'react' import UserNameCard from 'UserNameCard.js' import UserDetailsCard from 'UserDetailsCard.js' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { if ( this . state . isHidden ) { return ( < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } In the example above we will have to assume <UserNameCard /> and <UserDetailsCard /> have a button in them that looks like this: <button onClick={this.props.revealClick}>Show Details</button> and <button onClick={this.props.hideClick}>Hide Details</button> . Each of these buttons have a built-in property called onClick . We then assign the onClick method to this.props.revealClick which then points back to the original method we built: handleClick . In short, when the button is clicked it sends data back up to its parent components to change the value of this.state.isHidden . In turn, when the state changes, React will re-render and we'll get a new view because MyConditionalClass has a conditional rendering if/else statement in it. You will be using this for your next few projects so read back over it and make sure you got it! NOTE: in the normal DOM methods you have seen onclick but in React you will use onClick (the JS standard, camelCase format) . For further reading check out the Medium blog on Conditional Rendering in the Additional Resources . In the upcoming video you'll see a different way to manage conditional rendering using the newer method, useState() hook. Both ways work and this \"older\" way is taught first because it used to be the only way to manage this task before React introduced Hooks . But using these \"hooks\" requires a bit of understanding and we believe learning Class-based components is the primer to for understanding React Hooks, knowing what they are doing under-the-hood, so to speak. See It - Conditional Rendering You are welcome to use either method you feel most comfortable with but we would be remiss if you didn't learn how to use the favored React Hook, useState() , to do the same thing and not create a Class-based Component only to manage a state object...! Additional Resources YT, Codevolution - Conditional Rendering Blog, Medium - Conditional Rendering Know Your Docs Legacy React Docs - Hooks Legacy React Docs - Lists & Keys React Dev Docs - Conditional Rendering React Dev Docs - Listing Items with Keys React Dev Docs - useState()","title":"Conditional Rendering"},{"location":"module-1/conditionalRendering/#conditional-rendering","text":"The harder you work for something, the greater you\u2019ll feel when you achieve it.","title":"Conditional Rendering"},{"location":"module-1/conditionalRendering/#overview","text":"Whoa, you've done a lot! Already you've learned the core mindset and techniques of React which includes a new language, JSX!! Congratulation! In the past few lessons you've learned how to fetch data, store it in state, and rendering it for the human user\u2019s eyes using someone else's codebase, React. During that time you've learned how to merge our understanding of programming in JavaScript with the layout and styling of HTML and CSS. We've been working hard! But now it's time to dig a little deeper and figure out how to use some of the statements we learned last week to render certain elements based on conditions that we get in our applications.","title":"Overview"},{"location":"module-1/conditionalRendering/#conditional-rendering-using-local-state","text":"Below is a snippet of code that should be very easy for you to read. Simple If/Else Statement 1 2 3 4 5 if ( isVerified ) { return \"is verified\" } else { return \"not verified\" } This is simple and straightforward JavaScript. We'll now just apply the same logic with React. After all, when we're developing in React we're writing JavaScript! If/Else Statement in React 1 2 3 4 5 6 7 8 9 import React from 'react' const myConditionalComponent = ( props ) => { if ( props . isVerified ) { return < IsVerifiedComponent userId = { props . id } /> } else { return < NotVerifiedComponent userId = { props . id } /> } } Above we see that if the user is verified, (prop.isVerified = true) then we can render a component that might welcome the user like the <IsVerifiedComponent /> , else we can render a component that tells them that their login failed and ask them to try again in the <NotVerifiedComponent /> . All of that was based on the values that are in the props object. We can do the same thing with state! Follow along with the comments throughout the code snippet to understand this for yourself. Button Changes State 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // turn your functional component into a class-based component so you can create local state import React , { Component } from 'react' import UserNameCard from 'UserNameCard.js' import UserDetailsCard from 'UserDetailsCard.js' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) /* inside the constructor, initiate the state as an object and give it the keys you want to use, in this case we'll use a property called isHidden so we know what it's for. */ this . state = { isHidden : true } } /* Remember from 211 that classes are functions that return an object with a context or instance of which will require/allow us to use the `this` keyword. */ /* because the component is a class we can also create and use our own methods: */ handleClick = () => { /* What you see below is a ternary operator. It reads like this: \"if `this.state.isHidden` is true - set status to be false , else set it to true\". */ let status = this . state . isHidden == true ? false : true /* Because we have the variable status set to be the opposite of whatever `this.state.isHidden` equals... */ /* ...we can use its value to set `this.state.isHidden` when our button is clicked.*/ /* Notice we use the `.setState({})` method to change values in our state object. */ this . setState ({ isHidden : status }) } render () { /* then we check if the value in state is true or false and render accordingly */ if ( this . state . isHidden ) { return ( /* if the user clicks this component it will trigger the `handleClick` method which changes the state and then forces the parent component to re-render, which will render the `<UserDetailsCard />` component as well and vice versa! */ < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import React , { Component } from 'react' import UserNameCard from 'UserNameCard.js' import UserDetailsCard from 'UserDetailsCard.js' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { if ( this . state . isHidden ) { return ( < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } In the example above we will have to assume <UserNameCard /> and <UserDetailsCard /> have a button in them that looks like this: <button onClick={this.props.revealClick}>Show Details</button> and <button onClick={this.props.hideClick}>Hide Details</button> . Each of these buttons have a built-in property called onClick . We then assign the onClick method to this.props.revealClick which then points back to the original method we built: handleClick . In short, when the button is clicked it sends data back up to its parent components to change the value of this.state.isHidden . In turn, when the state changes, React will re-render and we'll get a new view because MyConditionalClass has a conditional rendering if/else statement in it. You will be using this for your next few projects so read back over it and make sure you got it! NOTE: in the normal DOM methods you have seen onclick but in React you will use onClick (the JS standard, camelCase format) . For further reading check out the Medium blog on Conditional Rendering in the Additional Resources . In the upcoming video you'll see a different way to manage conditional rendering using the newer method, useState() hook. Both ways work and this \"older\" way is taught first because it used to be the only way to manage this task before React introduced Hooks . But using these \"hooks\" requires a bit of understanding and we believe learning Class-based components is the primer to for understanding React Hooks, knowing what they are doing under-the-hood, so to speak.","title":"Conditional Rendering Using Local State"},{"location":"module-1/conditionalRendering/#see-it-conditional-rendering","text":"You are welcome to use either method you feel most comfortable with but we would be remiss if you didn't learn how to use the favored React Hook, useState() , to do the same thing and not create a Class-based Component only to manage a state object...!","title":"See It - Conditional Rendering"},{"location":"module-1/conditionalRendering/#additional-resources","text":"YT, Codevolution - Conditional Rendering Blog, Medium - Conditional Rendering","title":"Additional Resources"},{"location":"module-1/conditionalRendering/#know-your-docs","text":"Legacy React Docs - Hooks Legacy React Docs - Lists & Keys React Dev Docs - Conditional Rendering React Dev Docs - Listing Items with Keys React Dev Docs - useState()","title":"Know Your Docs"},{"location":"module-1/developSeries-i-must-succeed/","text":"I Must Succeed","title":"Develop I Must Succeed"},{"location":"module-1/developSeries-i-must-succeed/#i-must-succeed","text":"","title":"I Must Succeed"},{"location":"module-1/developSeries-stopBeingLazy/","text":"Stop Being Lazy","title":"Develop Not Lazy"},{"location":"module-1/developSeries-stopBeingLazy/#stop-being-lazy","text":"","title":"Stop Being Lazy"},{"location":"module-1/dynamicRendering/","text":"Dynamic Rendering with .map() Overview You've done this already but I think it's good to review it so you don't get hung up on a simple and avoidable bug in these next few projects. When we .map() over an array in React we must provide the callback function an index for its second argument. The reason we have to do this is that React works to make our app fast and efficient by watching the actual DOM and comparing it to the virtual DOM. To do this it needs to have a way to identify one instance of a component from another. When we give the callback function an index we are giving React the chance to apply a unique individual value to each of the nodes that will be created in the DOM tree by each instance of the component. The value we give it is called a key . To give each of our items in the array a unique and individual key we assign it the value of the index in the callback function of the .map() method. Mapping - Key & Index .map Example with key i as 2nd argument 1 2 3 4 5 6 7 8 9 const todos = [{ title : \"Feed Dog\" , status : \"red\" }, { title : \"Walk Dog\" , status : \"yellow\" }, { title : \"Pet Dog\" , status : \"green\" }] const todoItems = todos . map (( item , i ) => return ( < li key = { i } className = { item . status } > { item . title } < /li> ) ); Above we see an example of using the index of the item in the array as the key, represented as i . This is not the preferred way but is the fall-back option if you don't have another way to assign unique keys . If the items come with id keys we could assign the key to item.id or even item.email instead. All that matters to React is that each element has a unique key so it can do its job of updated and rendering what, when, and where. Note: See how we assigned the className to the status of the todo item. This is JSX syntax that means the same as class name in HTML. Map Over & Render Data Practice It Continuing with the Todo app you built last class, you're going to pull out the pieces that represent each todo into a separate component. Then you will map over state and pass to each instance of the component the props they need to render the todo item, the delete button, the edit button and the urgency status. Instructions Before you get going make sure you install this most wonderful VS Code Extension: Simple React Snippets . Continue with the app you built in the first class of 411. Make a code plan through whiteboarding what you need to do. The todoList component should map over the this.state.todos and return a todoItem component for each todo in the array. The todoItem should be passed props that include handlers like: handleClick , handleChange , handleEdit . The todoItem should have a state that maintains the urgency status that holds the values of green , yellow or red . The todoItem component should render the background-color of the text based on the status of the item. At the end your Todo list should look the same but function differently with the exception of the status colors. Additional Resources YT, Codevolution - List Rendering Blog, Medium - Quick and Lazy Way to Assign Unique Ids Know Your Docs Most importantly, use the React Docs as your guide each time you build with React. UUID Docs - Home Page Legacy React Docs - Hooks Legacy React Docs - Lists & Keys React Dev Docs - Hooks React Dev Docs - Where to Get Your Keys","title":"Dynamic Rendering"},{"location":"module-1/dynamicRendering/#dynamic-rendering-with-map","text":"","title":"Dynamic Rendering with .map()"},{"location":"module-1/dynamicRendering/#overview","text":"You've done this already but I think it's good to review it so you don't get hung up on a simple and avoidable bug in these next few projects. When we .map() over an array in React we must provide the callback function an index for its second argument. The reason we have to do this is that React works to make our app fast and efficient by watching the actual DOM and comparing it to the virtual DOM. To do this it needs to have a way to identify one instance of a component from another. When we give the callback function an index we are giving React the chance to apply a unique individual value to each of the nodes that will be created in the DOM tree by each instance of the component. The value we give it is called a key . To give each of our items in the array a unique and individual key we assign it the value of the index in the callback function of the .map() method.","title":"Overview"},{"location":"module-1/dynamicRendering/#mapping-key-index","text":".map Example with key i as 2nd argument 1 2 3 4 5 6 7 8 9 const todos = [{ title : \"Feed Dog\" , status : \"red\" }, { title : \"Walk Dog\" , status : \"yellow\" }, { title : \"Pet Dog\" , status : \"green\" }] const todoItems = todos . map (( item , i ) => return ( < li key = { i } className = { item . status } > { item . title } < /li> ) ); Above we see an example of using the index of the item in the array as the key, represented as i . This is not the preferred way but is the fall-back option if you don't have another way to assign unique keys . If the items come with id keys we could assign the key to item.id or even item.email instead. All that matters to React is that each element has a unique key so it can do its job of updated and rendering what, when, and where. Note: See how we assigned the className to the status of the todo item. This is JSX syntax that means the same as class name in HTML.","title":"Mapping - Key &amp; Index"},{"location":"module-1/dynamicRendering/#map-over-render-data","text":"","title":"Map Over &amp; Render Data"},{"location":"module-1/dynamicRendering/#practice-it","text":"Continuing with the Todo app you built last class, you're going to pull out the pieces that represent each todo into a separate component. Then you will map over state and pass to each instance of the component the props they need to render the todo item, the delete button, the edit button and the urgency status.","title":"Practice It"},{"location":"module-1/dynamicRendering/#instructions","text":"Before you get going make sure you install this most wonderful VS Code Extension: Simple React Snippets . Continue with the app you built in the first class of 411. Make a code plan through whiteboarding what you need to do. The todoList component should map over the this.state.todos and return a todoItem component for each todo in the array. The todoItem should be passed props that include handlers like: handleClick , handleChange , handleEdit . The todoItem should have a state that maintains the urgency status that holds the values of green , yellow or red . The todoItem component should render the background-color of the text based on the status of the item. At the end your Todo list should look the same but function differently with the exception of the status colors.","title":"Instructions"},{"location":"module-1/dynamicRendering/#additional-resources","text":"YT, Codevolution - List Rendering Blog, Medium - Quick and Lazy Way to Assign Unique Ids","title":"Additional Resources"},{"location":"module-1/dynamicRendering/#know-your-docs","text":"Most importantly, use the React Docs as your guide each time you build with React. UUID Docs - Home Page Legacy React Docs - Hooks Legacy React Docs - Lists & Keys React Dev Docs - Hooks React Dev Docs - Where to Get Your Keys","title":"Know Your Docs"},{"location":"module-1/fetchStoreRender/","text":"Fetch Data & Store it in Local State You are in charge of your own destiny. You are the steward of your own vessel. And you have the power to choose, to grow, to learn, and to lead! Overview Now that we have a grip on this passing props stuff let's take a deeper look at that state stuff in Class-based Components . As you saw in the last lesson we were able to pass the values in a parent component's state down to its child component through props . But what is state ? Where does it get its values? When is it created? In this lesson, we'll address all of those questions. Component State (Local Memory) According to the React Docs , state is locally-scoped memory , which means that it is only available to the component that it is initialized in unless that data/memory is passed to another component via, ya know... props . The Rules of State Only class-based components can have local state . state is just a plain ole JavaScript object with key-value pairs. If state changes the component will & must re-render. state can only be updated with the this.setState() method which takes an object {} as its sole argument. setState() compares the object you pass into the current state and changes only the values that need to change. Again, state updates are merged which means setState() compares the object of state and the object passed into it before it makes changes and only changes what needs to be changed. This is why this.state can only be changed with the setState() method. The changes of state follow a pattern of data flow called a top-down or unidirectional data flow. Data flows downward . This means that state is always owned by some specific parent component, and any data or UI components derived from that state can only affect components below them in the tree. See It - State Overview: Fetch, Store, and Render Data Fetch Data w/Axios + componentDidMount Map Over & Render Data Render Functional Components + Styling Practice It - State + Props The homework is going to require you to code on your own a little more than usual. Why? Because the concepts of React are functional programming concepts and require doing to understand them. Also, you're becoming an actual developer, which means you need to start learning to teach yourself . Sooner or later there will be a new library or language you will need to know but don't. You then have to use your experience here to teach yourself that new library or language. Don't be afraid. You have the power of Google with you. BE SURE TO COMPLETE THIS BEFORE CLASS OR YOU WILL BE BEHIND!! Follow along with the official React Tutorial to build an interactive Tic-Tac-Toe Game. Here's your starter code You can do this either in CodePen or in a local environment folder. When you get it working in one, transfer it to the other. Start here . Additional Resources YT, Ben Awad - State in React.js, pt.5 YT, Net Ninja - #17, Fetching Data useEffect Know Your Docs Legacy React Docs - State + Lifecycle Methods React Dev Docs - Fetching Data w/Effects React Dev Docs - Synchronizing w/Effects","title":"Fetch, Store, Render"},{"location":"module-1/fetchStoreRender/#fetch-data-store-it-in-local-state","text":"You are in charge of your own destiny. You are the steward of your own vessel. And you have the power to choose, to grow, to learn, and to lead!","title":"Fetch Data &amp; Store it in Local State"},{"location":"module-1/fetchStoreRender/#overview","text":"Now that we have a grip on this passing props stuff let's take a deeper look at that state stuff in Class-based Components . As you saw in the last lesson we were able to pass the values in a parent component's state down to its child component through props . But what is state ? Where does it get its values? When is it created? In this lesson, we'll address all of those questions.","title":"Overview"},{"location":"module-1/fetchStoreRender/#component-state-local-memory","text":"According to the React Docs , state is locally-scoped memory , which means that it is only available to the component that it is initialized in unless that data/memory is passed to another component via, ya know... props .","title":"Component State (Local Memory)"},{"location":"module-1/fetchStoreRender/#the-rules-of-state","text":"Only class-based components can have local state . state is just a plain ole JavaScript object with key-value pairs. If state changes the component will & must re-render. state can only be updated with the this.setState() method which takes an object {} as its sole argument. setState() compares the object you pass into the current state and changes only the values that need to change. Again, state updates are merged which means setState() compares the object of state and the object passed into it before it makes changes and only changes what needs to be changed. This is why this.state can only be changed with the setState() method. The changes of state follow a pattern of data flow called a top-down or unidirectional data flow. Data flows downward . This means that state is always owned by some specific parent component, and any data or UI components derived from that state can only affect components below them in the tree.","title":"The Rules of State"},{"location":"module-1/fetchStoreRender/#see-it-state","text":"","title":"See It - State"},{"location":"module-1/fetchStoreRender/#overview-fetch-store-and-render-data","text":"","title":"Overview: Fetch, Store, and Render Data"},{"location":"module-1/fetchStoreRender/#fetch-data-waxios-componentdidmount","text":"","title":"Fetch Data w/Axios + componentDidMount"},{"location":"module-1/fetchStoreRender/#map-over-render-data","text":"","title":"Map Over &amp; Render Data"},{"location":"module-1/fetchStoreRender/#render-functional-components-styling","text":"","title":"Render Functional Components + Styling"},{"location":"module-1/fetchStoreRender/#practice-it-state-props","text":"The homework is going to require you to code on your own a little more than usual. Why? Because the concepts of React are functional programming concepts and require doing to understand them. Also, you're becoming an actual developer, which means you need to start learning to teach yourself . Sooner or later there will be a new library or language you will need to know but don't. You then have to use your experience here to teach yourself that new library or language. Don't be afraid. You have the power of Google with you. BE SURE TO COMPLETE THIS BEFORE CLASS OR YOU WILL BE BEHIND!! Follow along with the official React Tutorial to build an interactive Tic-Tac-Toe Game. Here's your starter code You can do this either in CodePen or in a local environment folder. When you get it working in one, transfer it to the other. Start here .","title":"Practice It - State + Props"},{"location":"module-1/fetchStoreRender/#additional-resources","text":"YT, Ben Awad - State in React.js, pt.5 YT, Net Ninja - #17, Fetching Data useEffect","title":"Additional Resources"},{"location":"module-1/fetchStoreRender/#know-your-docs","text":"Legacy React Docs - State + Lifecycle Methods React Dev Docs - Fetching Data w/Effects React Dev Docs - Synchronizing w/Effects","title":"Know Your Docs"},{"location":"module-1/formsInReact/","text":"Forms in React Keep your face always toward the sunshine\u2014and shadows will fall behind you.\u2003\u2014Walt Whitman Overview We've seen a lot in the past few classes. It may seem like a flurry of information but the more you practice this stuff the easier it will get. Always keep looking up React documentation and tutorials to guide you along. Today let's talk about using forms in React. Forms are what you will build over and over again in your career! You've seen and used forms in HTML. They're pretty simple and easy to use. A form that takes someone's name looks like this: 1 2 3 4 5 6 7 < form > < label > Name: < input type = \"text\" name = \"name\" /> </ label > < input type = \"submit\" value = \"Submit\" /> </ form > In HTML, the elements like: <input> , <textarea> , and <select> handle their own state, but in React we want state to be handled in our component\u2019s local state. We call this a single source of truth . When a React component that renders a form also controls what happens inside its form based on what the user inputs, we call it a controlled component . As the user types, the new state is set with the values they input and the value they see inside the form only represents what is stored in the component\u2019s state. The code snippet below demonstrates a simple controlled component . Simple Controlled Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // This method is called when the form is submitted. Potentially an API // request could go here using the data from this.state . handleSubmit ( e ) { // Always put this line in on submits, it prevents the page from // reloading and wiping your state. e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to // empty quotes again. this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes `this.state.value` to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } } w/o comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ) this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ) this . handleSubmit = this . handleSubmit . bind ( this ) } handleChange ( e ) { this . setState ({ value : e . target . value }) } handleSubmit ( e ) { e . preventDefault () alert ( 'A name was submitted: ' + this . state . value ) this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } } In this way, we can control what data is sent off and when it is sent. Before moving on, make sure you read over all the examples laid out in the very clear React Form Docs . Pay special attention to the <select/> and Handling Multiple Inputs . See It - Forms in React DRY Methods + Handle Submit Practice It This CodePen is the same code snippet you saw on the previous page. It was created by Dan Abramov the creator of Redux, a technology you'll learn in a few short weeks! Forms in React CodePen Instructions Open and fork the CodePen above Create 5 more text inputs: lastname , DOB , age, pho ne, and gender in this form. Use a <select> input for gender. Create keys in this.state to change the values based on what the user puts in. Console.log on submission. Now create an array in this.state that you can push into when the submit button is clicked. map over the array and display the users. Filter By Search Term Know Your Docs Legacy React Docs - Forms Legacy React Docs - Handling Multiple Inputs React Dev Docs - Forms React Dev Docs - Reacting to Input w/state","title":"Forms in React"},{"location":"module-1/formsInReact/#forms-in-react","text":"Keep your face always toward the sunshine\u2014and shadows will fall behind you.\u2003\u2014Walt Whitman","title":"Forms in React"},{"location":"module-1/formsInReact/#overview","text":"We've seen a lot in the past few classes. It may seem like a flurry of information but the more you practice this stuff the easier it will get. Always keep looking up React documentation and tutorials to guide you along. Today let's talk about using forms in React. Forms are what you will build over and over again in your career! You've seen and used forms in HTML. They're pretty simple and easy to use. A form that takes someone's name looks like this: 1 2 3 4 5 6 7 < form > < label > Name: < input type = \"text\" name = \"name\" /> </ label > < input type = \"submit\" value = \"Submit\" /> </ form > In HTML, the elements like: <input> , <textarea> , and <select> handle their own state, but in React we want state to be handled in our component\u2019s local state. We call this a single source of truth . When a React component that renders a form also controls what happens inside its form based on what the user inputs, we call it a controlled component . As the user types, the new state is set with the values they input and the value they see inside the form only represents what is stored in the component\u2019s state. The code snippet below demonstrates a simple controlled component . Simple Controlled Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // This method is called when the form is submitted. Potentially an API // request could go here using the data from this.state . handleSubmit ( e ) { // Always put this line in on submits, it prevents the page from // reloading and wiping your state. e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to // empty quotes again. this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes `this.state.value` to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } } w/o comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ) this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ) this . handleSubmit = this . handleSubmit . bind ( this ) } handleChange ( e ) { this . setState ({ value : e . target . value }) } handleSubmit ( e ) { e . preventDefault () alert ( 'A name was submitted: ' + this . state . value ) this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } } In this way, we can control what data is sent off and when it is sent. Before moving on, make sure you read over all the examples laid out in the very clear React Form Docs . Pay special attention to the <select/> and Handling Multiple Inputs .","title":"Overview"},{"location":"module-1/formsInReact/#see-it-forms-in-react","text":"","title":"See It - Forms in React"},{"location":"module-1/formsInReact/#dry-methods-handle-submit","text":"","title":"DRY Methods + Handle Submit"},{"location":"module-1/formsInReact/#practice-it","text":"This CodePen is the same code snippet you saw on the previous page. It was created by Dan Abramov the creator of Redux, a technology you'll learn in a few short weeks! Forms in React CodePen","title":"Practice It"},{"location":"module-1/formsInReact/#instructions","text":"Open and fork the CodePen above Create 5 more text inputs: lastname , DOB , age, pho ne, and gender in this form. Use a <select> input for gender. Create keys in this.state to change the values based on what the user puts in. Console.log on submission. Now create an array in this.state that you can push into when the submit button is clicked. map over the array and display the users.","title":"Instructions"},{"location":"module-1/formsInReact/#filter-by-search-term","text":"","title":"Filter By Search Term"},{"location":"module-1/formsInReact/#know-your-docs","text":"Legacy React Docs - Forms Legacy React Docs - Handling Multiple Inputs React Dev Docs - Forms React Dev Docs - Reacting to Input w/state","title":"Know Your Docs"},{"location":"module-1/functionalComponentHooks/","text":"Functional Components with Hooks Trust the process. Overview: Replace Class-based with Functional + Hooks We've been learning React through Class-based Components but we're now going to switch them out for Functional components. And instead of using Lifecycle methods, we'll use things called Hooks. That being said . . . why use React Hooks? Well . . . because it allows us to use things like state in our functional components. When we say \"state\" here we mean local component state. Not global app state created by Redux. React Hooks What are Hooks? They are simple pieces of React code that were added in 2018, to great fanfare among React developers. As we mentioned above, they allow you to use \"state\" in functional components ( not class-based components ). This promotes code cleanliness, only pure functional components, as well, code performance. The best way to learn about it is to just dive right in so we will look at an example. The following is an example taken directly from the Legacy React website . Take a look at it and see if you can identify what looks different about it than the other React components you've seen and built. Functional exampleComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { useState } from 'react' function exampleComponent () { // Declare a new state variable, which we'll call `count` with an initial value of `0` const [ count , setCount ] = useState ( 0 ) return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } export default exampleComponent So what's happening in the component above? Well the first thing we notice is that we are importing the hook called useState from React . You can see that being used on the first line of the component. In fact, that's the only other line we need to talk about. If you remember, you can declare two variables at once using array destructuring and that's exactly what's happening here with [count, setCount] . Count will represent the value of state you want to use. Using regular state, it would look like this: Class-Based ExampleComponent.js Equivalent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import React , { Component } from 'react' class ExampleComponent extends React { constructor ( props ) { super ( props ) this . state = { count : 0 } } setCount = () => { this . setState ({ count : count + 1 }) } render () { return ( < div > < p > You clicked { this . state . count } times < /p> < button onClick = { this . setCount ()} > Click me < /button> < /div> ) } } export default ExampleComponent You'll notice that we set the count equal to 0 . The way that happened with React Hooks was on the fifth line of the first snippet, which reads useState(0) . The useState function is called with the initial value you want to set to a variable, in this case, count . So there's only one part left and that's the setCount variable. That variable represents a function and you call it when you want to change that particular piece of state! If we wanted to change the count to 1 we would write setCount(1) somewhere in the component. You can see an example of this in the button's onClick method. <button onClick={() => setCount(count + 1)}> , line 10. Pretty simple stuff right? There are other hooks like useEffect that exist but we won't dive into those right now. We simply wanted to bring this to your attention because we know that you'll encounter it on your path to becoming front-end developers. One main place that you'll see Hooks used is in the Material-UI documentation (coming up in a couple of class lessons). Typically, when an update as popular as this happens, people start integrating it as quickly as possible. Why Functional over Class-based Why did we learn Class-based and now have to replace them? Class-based & Functional components have been part of React since React's inception, May 29, 2013. Accept back then, Class-based components were previously the only way to manage component state because you could create this.state = {} in a class. With the advent of Hooks, introduced in React v16.8, we can now manage component state in Functional components. Because of this new way of component state management, the memory efficiency of Functional components, less boilerplate code, and cleanliness of the code developers now favor Functional components with hooks when writing new code. This being said, legacy code-bases will have both and you'll need to know how to read and write each. Here is a scenario that demonstrates a use case for why developers favor functional components with hooks. Let's say last week you made this simple display component. Functional Component of App.js 1 2 3 4 5 import React from 'react' function App () { return < h1 > Simple Functional Component < /h1> } Now we've been asked to add some component state to toggle between visible and hidden statuses. Before hooks we would have to go through the process and convert it to a Class-based component then add a constructor() , super() , this.state={} , then create values to hold the state, plus passing in an object the the method...blah blah blah. With Hooks, we can keep our component as a Function by simply adding in one of the hooks, known as useState then handling the click with a custom build method: State management using the useState Hook of App.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { useState } from 'react' function App () { const [ isHidden , setIsHidden ] = useState ( false ); const handleClick = () => { let status = isHidden === true ? false : true setIsHidden ( status ) } return ( < div > < p > The Status of hidden is { ` ${ isHidden } ` } < /p> < h1 onClick = { handleClick } > Functional Component Using State < /h1> < /div> ) } Above useState() is a hook (just a function) imported from React that returns two values: a state value and a method(or, function) to change that state value. We hold these two items in variables ( that's what you see on line 4: const [isHidden, setIsHidden] ). These two variables are defined by us, the developer. We could call them const [isClicked, setClickedValue] or anything else we want as long as it makes sense for what value they hold and change. The syntax may look funny to you but it's just array destructuring. Using array destructuring we hold the values of what's returned from useState() as [isHidden, setIsHidden] to hold the value of state and create a method to change that value, respectively. When setIsHidden is called it will update isHidden with whatever argument is passed to setIsHidden . See line 8 in the above example. Are Class-based Components Being Replaced? From the get go, you've been learning React through Class-based components so you can manage component state. Now we're asking you to switch to Functional components and use this new thing called Hooks instead of lifecycle methods and state. This may be frustrating but remember, React is the foremost front-end library in the world with wide adoption. Because of this, many applications are built with it. In the beginning of React, the only way to manage component state was through the use of Class-based components. Because of this you will likely see them in legacy code bases, Google searches, code examples on StackOverflow and equivalent forums. In the end, it is important to know both because, the React development team has said they have no plans to remove Class-based components by making them obsolete or non-compatible. Converting Class-based to Functional Under-the-hood, both Class-based components and functional components work exactly the same with DOM changes based on the state reference in memory. The examples below show the conversion of code from Class-based component to Functional Component using a hook to manage state. The Class-based Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // MyConditionalComponent.js import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { return ( < div > < h1 onClick = { this . handleClick } > Functional Component Using State < /h1> < /div> ) } } The Functional Component Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // MyConditionalComponent.js to a functional component with useState hook import React , { useState } from 'react' function myConditionalComponent () { const [ isHidden , setIsHidden ] = useState ( false ) const handleClick = () => { let status = isHidden == true ? false : true setIsHidden ( status ); } return < h1 onClick = { handleClick } > Functional Component Using State < /h1> } export default myConditionalComponent With Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // MyConditionalComponent.js to a functional component with useState hook // Instead of importing the { Component }, let's import the { useState } hook import React , { useState } from 'react' // No need to build a class, let's just keep it as a simple function: function myConditionalComponent () { // Since it's not a class it doesn't need a `constructor(){}`. // And because it's not extending the React Component there's no need to // call `super()`. // Also, we can store & update the value(s) we need with the `useState()` // function & destructuring instead of using a `this.state={}` object. const [ isHidden , setIsHidden ] = useState ( false ) const handleClick = () => { // With a functional component we don't have a state object, // therefore, no need for all the extra member operators (.) to // connect \"this\" and \"state\" and yada yada. let status = isHidden == true ? false : true // Next, we don't need to pass an object to setState, instead, just // use the function you defined earlier: setIsHidden ( status ) } // Finally, we don't need to invoke the `render()` method. return < h1 onClick = { handleClick } > Functional Component Using State < /h1> } export default myConditionalComponent Take some time to compare these two components. They accomplish the exact same thing but use different syntax to do it. useEffect Instead of componentDidMount and other lifecycle methods we now just have one hook called useEffect that does it all. When useEffect has an empty dependency array [] it behaves just like componentDidMount . The Functional Component Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // MyFunctionTodos.js import React , { useState , useEffect } from 'react' ; function MyFunctionTodos () { const [ arrayOfTodos , setArrayOfTodos ] = useState ([]); useEffect (() => { fetch ( 'https://jsonplaceholder.typicode.com/todos' ) . then ( response => { return response . json () }) // update state with setArrayOfTodos . then ( todos => setArrayOfTodos ( todos )) }, []); // <-- when dependency array is empty... // ...it works just like componentDidMount() return ( < div > { arrayOfTodos . map (( todo , index ) => { return < li key = { index } > { todo . title } < /li> })} < /div> ); } We can run code when state is updated too. Below we have an isCountEven function that runs when count is updated and the useEffect hook is checking for that update in the dependency [count] array. useEffect() update 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // MyCountComponent.js import React , { useState , useEffect } from 'react' ; function MyCountComponent () { const [ count , setCount ] = useState ( 1 ); useEffect (() => { // useEffect takes in anonymous function let isCountEven = () => { if ( count % 2 === 0 ){ console . log ( \"yes count is even\" , count ); } } isCountEven (); }, [ count ]); // dependency array will only run when `count` changes const handleClick = () => { let newCount = count + setCount ( newCount ); } return < h1 onClick = { handleClick } > { `You clicked ${ count } times` } < /h1>; } See It - Components with Hooks The accompanying Scotch.io/DigitalOcean Tutorial In the future, many videos & examples in pre-class lessons and some assignment work use Class-based components and have you'll have to know the Functional and Hook equivalent and be able to convert them your self. Practice It Part 1 Below is a simple CodePen with a Class-based Component. Check out how the code works, what the app is doing, and then convert it to a Functional Component to make the app function the exact same way. Convert Class To Functional component with Hooks Part 2 Import { useState } on the first line next to React Initialize the variables like in the example above. You will want a count and setCount with the default value being 0 Create an <h3> that displays the current count Create a button that uses setCount on its onClick method to change the count Additional Resources Medium, Dan Abramov - Hooks YT, Fireship - 10 React Hooks Explained YT, ReactConf - Dan Abramov: React 90% Cleaner Blog, sarah_chima@dev.to - Array Destructuring Know Your Docs Legacy React Docs - Hooks React Dev Docs - Hooks React Dev Docs - Rules of Hooks","title":"Functional Components and Hooks"},{"location":"module-1/functionalComponentHooks/#functional-components-with-hooks","text":"Trust the process.","title":"Functional Components with Hooks"},{"location":"module-1/functionalComponentHooks/#overview-replace-class-based-with-functional-hooks","text":"We've been learning React through Class-based Components but we're now going to switch them out for Functional components. And instead of using Lifecycle methods, we'll use things called Hooks. That being said . . . why use React Hooks? Well . . . because it allows us to use things like state in our functional components. When we say \"state\" here we mean local component state. Not global app state created by Redux.","title":"Overview: Replace Class-based with Functional + Hooks"},{"location":"module-1/functionalComponentHooks/#react-hooks","text":"What are Hooks? They are simple pieces of React code that were added in 2018, to great fanfare among React developers. As we mentioned above, they allow you to use \"state\" in functional components ( not class-based components ). This promotes code cleanliness, only pure functional components, as well, code performance. The best way to learn about it is to just dive right in so we will look at an example. The following is an example taken directly from the Legacy React website . Take a look at it and see if you can identify what looks different about it than the other React components you've seen and built. Functional exampleComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { useState } from 'react' function exampleComponent () { // Declare a new state variable, which we'll call `count` with an initial value of `0` const [ count , setCount ] = useState ( 0 ) return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } export default exampleComponent So what's happening in the component above? Well the first thing we notice is that we are importing the hook called useState from React . You can see that being used on the first line of the component. In fact, that's the only other line we need to talk about. If you remember, you can declare two variables at once using array destructuring and that's exactly what's happening here with [count, setCount] . Count will represent the value of state you want to use. Using regular state, it would look like this: Class-Based ExampleComponent.js Equivalent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import React , { Component } from 'react' class ExampleComponent extends React { constructor ( props ) { super ( props ) this . state = { count : 0 } } setCount = () => { this . setState ({ count : count + 1 }) } render () { return ( < div > < p > You clicked { this . state . count } times < /p> < button onClick = { this . setCount ()} > Click me < /button> < /div> ) } } export default ExampleComponent You'll notice that we set the count equal to 0 . The way that happened with React Hooks was on the fifth line of the first snippet, which reads useState(0) . The useState function is called with the initial value you want to set to a variable, in this case, count . So there's only one part left and that's the setCount variable. That variable represents a function and you call it when you want to change that particular piece of state! If we wanted to change the count to 1 we would write setCount(1) somewhere in the component. You can see an example of this in the button's onClick method. <button onClick={() => setCount(count + 1)}> , line 10. Pretty simple stuff right? There are other hooks like useEffect that exist but we won't dive into those right now. We simply wanted to bring this to your attention because we know that you'll encounter it on your path to becoming front-end developers. One main place that you'll see Hooks used is in the Material-UI documentation (coming up in a couple of class lessons). Typically, when an update as popular as this happens, people start integrating it as quickly as possible.","title":"React Hooks"},{"location":"module-1/functionalComponentHooks/#why-functional-over-class-based","text":"Why did we learn Class-based and now have to replace them? Class-based & Functional components have been part of React since React's inception, May 29, 2013. Accept back then, Class-based components were previously the only way to manage component state because you could create this.state = {} in a class. With the advent of Hooks, introduced in React v16.8, we can now manage component state in Functional components. Because of this new way of component state management, the memory efficiency of Functional components, less boilerplate code, and cleanliness of the code developers now favor Functional components with hooks when writing new code. This being said, legacy code-bases will have both and you'll need to know how to read and write each. Here is a scenario that demonstrates a use case for why developers favor functional components with hooks. Let's say last week you made this simple display component. Functional Component of App.js 1 2 3 4 5 import React from 'react' function App () { return < h1 > Simple Functional Component < /h1> } Now we've been asked to add some component state to toggle between visible and hidden statuses. Before hooks we would have to go through the process and convert it to a Class-based component then add a constructor() , super() , this.state={} , then create values to hold the state, plus passing in an object the the method...blah blah blah. With Hooks, we can keep our component as a Function by simply adding in one of the hooks, known as useState then handling the click with a custom build method: State management using the useState Hook of App.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { useState } from 'react' function App () { const [ isHidden , setIsHidden ] = useState ( false ); const handleClick = () => { let status = isHidden === true ? false : true setIsHidden ( status ) } return ( < div > < p > The Status of hidden is { ` ${ isHidden } ` } < /p> < h1 onClick = { handleClick } > Functional Component Using State < /h1> < /div> ) } Above useState() is a hook (just a function) imported from React that returns two values: a state value and a method(or, function) to change that state value. We hold these two items in variables ( that's what you see on line 4: const [isHidden, setIsHidden] ). These two variables are defined by us, the developer. We could call them const [isClicked, setClickedValue] or anything else we want as long as it makes sense for what value they hold and change. The syntax may look funny to you but it's just array destructuring. Using array destructuring we hold the values of what's returned from useState() as [isHidden, setIsHidden] to hold the value of state and create a method to change that value, respectively. When setIsHidden is called it will update isHidden with whatever argument is passed to setIsHidden . See line 8 in the above example.","title":"Why Functional over Class-based"},{"location":"module-1/functionalComponentHooks/#are-class-based-components-being-replaced","text":"From the get go, you've been learning React through Class-based components so you can manage component state. Now we're asking you to switch to Functional components and use this new thing called Hooks instead of lifecycle methods and state. This may be frustrating but remember, React is the foremost front-end library in the world with wide adoption. Because of this, many applications are built with it. In the beginning of React, the only way to manage component state was through the use of Class-based components. Because of this you will likely see them in legacy code bases, Google searches, code examples on StackOverflow and equivalent forums. In the end, it is important to know both because, the React development team has said they have no plans to remove Class-based components by making them obsolete or non-compatible.","title":"Are Class-based Components Being Replaced?"},{"location":"module-1/functionalComponentHooks/#converting-class-based-to-functional","text":"Under-the-hood, both Class-based components and functional components work exactly the same with DOM changes based on the state reference in memory. The examples below show the conversion of code from Class-based component to Functional Component using a hook to manage state. The Class-based Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // MyConditionalComponent.js import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { return ( < div > < h1 onClick = { this . handleClick } > Functional Component Using State < /h1> < /div> ) } } The Functional Component Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // MyConditionalComponent.js to a functional component with useState hook import React , { useState } from 'react' function myConditionalComponent () { const [ isHidden , setIsHidden ] = useState ( false ) const handleClick = () => { let status = isHidden == true ? false : true setIsHidden ( status ); } return < h1 onClick = { handleClick } > Functional Component Using State < /h1> } export default myConditionalComponent With Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // MyConditionalComponent.js to a functional component with useState hook // Instead of importing the { Component }, let's import the { useState } hook import React , { useState } from 'react' // No need to build a class, let's just keep it as a simple function: function myConditionalComponent () { // Since it's not a class it doesn't need a `constructor(){}`. // And because it's not extending the React Component there's no need to // call `super()`. // Also, we can store & update the value(s) we need with the `useState()` // function & destructuring instead of using a `this.state={}` object. const [ isHidden , setIsHidden ] = useState ( false ) const handleClick = () => { // With a functional component we don't have a state object, // therefore, no need for all the extra member operators (.) to // connect \"this\" and \"state\" and yada yada. let status = isHidden == true ? false : true // Next, we don't need to pass an object to setState, instead, just // use the function you defined earlier: setIsHidden ( status ) } // Finally, we don't need to invoke the `render()` method. return < h1 onClick = { handleClick } > Functional Component Using State < /h1> } export default myConditionalComponent Take some time to compare these two components. They accomplish the exact same thing but use different syntax to do it.","title":"Converting Class-based to Functional"},{"location":"module-1/functionalComponentHooks/#useeffect","text":"Instead of componentDidMount and other lifecycle methods we now just have one hook called useEffect that does it all. When useEffect has an empty dependency array [] it behaves just like componentDidMount . The Functional Component Way 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // MyFunctionTodos.js import React , { useState , useEffect } from 'react' ; function MyFunctionTodos () { const [ arrayOfTodos , setArrayOfTodos ] = useState ([]); useEffect (() => { fetch ( 'https://jsonplaceholder.typicode.com/todos' ) . then ( response => { return response . json () }) // update state with setArrayOfTodos . then ( todos => setArrayOfTodos ( todos )) }, []); // <-- when dependency array is empty... // ...it works just like componentDidMount() return ( < div > { arrayOfTodos . map (( todo , index ) => { return < li key = { index } > { todo . title } < /li> })} < /div> ); } We can run code when state is updated too. Below we have an isCountEven function that runs when count is updated and the useEffect hook is checking for that update in the dependency [count] array. useEffect() update 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // MyCountComponent.js import React , { useState , useEffect } from 'react' ; function MyCountComponent () { const [ count , setCount ] = useState ( 1 ); useEffect (() => { // useEffect takes in anonymous function let isCountEven = () => { if ( count % 2 === 0 ){ console . log ( \"yes count is even\" , count ); } } isCountEven (); }, [ count ]); // dependency array will only run when `count` changes const handleClick = () => { let newCount = count + setCount ( newCount ); } return < h1 onClick = { handleClick } > { `You clicked ${ count } times` } < /h1>; }","title":"useEffect"},{"location":"module-1/functionalComponentHooks/#see-it-components-with-hooks","text":"The accompanying Scotch.io/DigitalOcean Tutorial In the future, many videos & examples in pre-class lessons and some assignment work use Class-based components and have you'll have to know the Functional and Hook equivalent and be able to convert them your self.","title":"See It - Components with Hooks"},{"location":"module-1/functionalComponentHooks/#practice-it","text":"","title":"Practice It"},{"location":"module-1/functionalComponentHooks/#part-1","text":"Below is a simple CodePen with a Class-based Component. Check out how the code works, what the app is doing, and then convert it to a Functional Component to make the app function the exact same way. Convert Class To Functional component with Hooks","title":"Part 1"},{"location":"module-1/functionalComponentHooks/#part-2","text":"Import { useState } on the first line next to React Initialize the variables like in the example above. You will want a count and setCount with the default value being 0 Create an <h3> that displays the current count Create a button that uses setCount on its onClick method to change the count","title":"Part 2"},{"location":"module-1/functionalComponentHooks/#additional-resources","text":"Medium, Dan Abramov - Hooks YT, Fireship - 10 React Hooks Explained YT, ReactConf - Dan Abramov: React 90% Cleaner Blog, sarah_chima@dev.to - Array Destructuring","title":"Additional Resources"},{"location":"module-1/functionalComponentHooks/#know-your-docs","text":"Legacy React Docs - Hooks React Dev Docs - Hooks React Dev Docs - Rules of Hooks","title":"Know Your Docs"},{"location":"module-1/hackathonOverview/","text":"Hackathon Overview 411-22-HackathonOverview from Zollege on Vimeo . Additional Resources YT, Ben Awad - How to Code a Form in React","title":"Hackathon Overview"},{"location":"module-1/hackathonOverview/#hackathon-overview","text":"411-22-HackathonOverview from Zollege on Vimeo .","title":"Hackathon Overview"},{"location":"module-1/hackathonOverview/#additional-resources","text":"YT, Ben Awad - How to Code a Form in React","title":"Additional Resources"},{"location":"module-1/introToReact/","text":"Intro to React as a Front-End Library Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw Recap At this point in your journey, you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses. Overview Let's start with what React is. It's a library, a codebase you can import & use. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead. Read It - What's React? React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G, and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say, it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends, and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want! How Does React Work? There are a couple of pieces we'll cover first then you can start putting it all together for yourself. Functional Components Functional Component are just that, components that can be called just like normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent Class-Based Components pt.1 Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool! BIG NOTES you MUST remember: Each component can & must only return ONE parent element. This means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class-based component. Know Your Docs Legacy NPM Docs - npx Legacy React Docs - Home Page React Dev Docs - Home Page React Dev Docs - Rules of React","title":"Intro to React"},{"location":"module-1/introToReact/#intro-to-react-as-a-front-end-library","text":"Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw","title":"Intro to React as a Front-End Library"},{"location":"module-1/introToReact/#recap","text":"At this point in your journey, you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses.","title":"Recap"},{"location":"module-1/introToReact/#overview","text":"Let's start with what React is. It's a library, a codebase you can import & use. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead.","title":"Overview"},{"location":"module-1/introToReact/#read-it-whats-react","text":"React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G, and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say, it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends, and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want!","title":"Read It - What's React?"},{"location":"module-1/introToReact/#how-does-react-work","text":"There are a couple of pieces we'll cover first then you can start putting it all together for yourself.","title":"How Does React Work?"},{"location":"module-1/introToReact/#functional-components","text":"Functional Component are just that, components that can be called just like normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent","title":"Functional Components"},{"location":"module-1/introToReact/#class-based-components-pt1","text":"Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool!","title":"Class-Based Components pt.1"},{"location":"module-1/introToReact/#big-notes-you-must-remember","text":"Each component can & must only return ONE parent element. This means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class-based component.","title":"BIG NOTES you MUST remember:"},{"location":"module-1/introToReact/#know-your-docs","text":"Legacy NPM Docs - npx Legacy React Docs - Home Page React Dev Docs - Home Page React Dev Docs - Rules of React","title":"Know Your Docs"},{"location":"module-1/introToStateAndProps/","text":"Intro to State and Props \u201cThe power of imagination makes us infinite.\u201d \u2014John Muir Recap Once you fall into React, you will fall in love with it. It's so simple and easy to use that you'll memorize all the life cycle methods and understand state and props and then you won't want to build with anything else. Today is going to be a whirlwind of facts and concepts. We're going to cover all the things that makeup React. It'll be tough at first because it's a lot! And it's new to you. But rest assured, you will get enough practice with it in the coming weeks that all of it will sink in and you'll be proud to put React on your resume! Overview Recall that React is a tool that helps us build composable websites and apps. This composable structure is the center-point to the whole mindset behind React. Each of the pieces on a website, the smaller components that make up the whole, are just that components . In 101 you were used to building the components of a web page with various HTML tags: <article></article> , <p></p> , etc. Each of these elements represented a small piece of the whole page. With React we build functions that return these same elements. We call these functions React Components . The reason we build them as functions is that we might need to use the same element for an unknown amount of times with different data inside of it. For example, on Facebook you have a page to view all of your friends. Each of your friends has different information but they are still displayed on the same element/piece/component with the same shape and styling. Furthermore, you may have 6000 friends and I may only have 500. Using functions, the React app built by Facebook will call the FriendComponent function 6000 times when you look at your friends and 500 times when I look at my friends. To make this work we need a way to pass unique data to each function call so that each function call will return the same HTML element but render the unique data we pass to it. This passing of data happens with something called props as in prop erties. You see, this props parameter will represent the properties of the element that is returned from the React Component (function) Props (How we pass data in React) Below you'll see a code snippet of a couple React components (again, which are simple JavaScript functions!). The only thing that makes them \"React\" functions is that they can be passed to the much larger React function that ingests them and turns them into HTML elements on a web page, known as React Elements . Just like functions, they can take arguments between their () . In fact, this is the only way we can pass props . To use the available props we must pass the props keyword into the () of the component. ChildComponent.js 1 2 3 4 5 6 7 const ChildComponent = ( props ) => { return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } export default ChildComponent In the above example, you see the props keyword passed into the function as an argument right? Now, where does the data associated with that props keyword come from? Look what's going on here: ParentComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 import childComponent from './childComponent.js' class ParentComponent extends Component { constructor () { super () render () { < childComponent propOne = { \"zebra cake\" } propTwo = { \"confection heaven\" } /> } } } export default ParentComponent In the code snippet above you see that our first childComponent is called inside our ParentComponent . Notice the JSX syntax: When we call a component in React with JSX it looks a lot like HTML syntax? In the line where we call the childComponent we see there are two props given: propOne and propTwo . They look a lot like attributes of an HTML tag, no? This is how we pass props down to other components. We can give them any attribute name we want. That same functionality could have been written: <childComponent poop={\"zebra cakes\"} unicorn={\"confection heaven\"}/> ; but instead we choose useful attribute/property names. Let's see it with state now. In the code snippet below we see the ParentComponent now has a state object, a simple JavaScript object with key and value pairs. Then we see the childComponent is called/invoked and passed props that reference keys of the state object. In this way, we can pass local state to another piece/component of our application!! ParentComponent with state + childComponent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ParentComponent extends Component { constructor () { super () this . state = { pieceOne : 'fig newton' , pieceTwo : 'sweet cardboard' , pieceThree : 3500 , } render () { return ( < childComponent propOne = { this . state . pieceOne } propTwo = { this . state . pieceTwo } /> ) } } } const childComponent = ( props ) => { return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } If we want our parent component to pass down a piece of its state to a child component we give the child component attributes like propTwo then point it at the value we want: propTwo={this.state.pieceTwo} ; this creates a key:value pair like we're familiar with in JavaScript already. After that, we use the props keyword in the child component, and presto, you have a component using props !! If we rendered childComponent it would say: \"A fig newton tastes like sweet cardboard.\" Under-the-hood, props is just an object and it looks like this: 1 2 3 4 props = { pieceOne : 'fig newton' , pieceTwo : 'sweet cardboard' } If you wanted to console.log() the value of the pieceOne key you would: console.log(props.pieceOne) . 1 2 3 4 5 6 7 8 const childComponent = ( props ) => { console . log ( props . pieceOne ) return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } NOTE: In the ParentComponent we must use the this keyword to indicate we want to to use the value of this object in this instance but when we get to the childComponent we don't have to use the this keyword because it is a pure functional component that doesn't have instances like Class-based components. Hopefully, that makes sense. If not, make sure you walk through it again so you can follow along with how the props are passed to components, then take a look at the following video and maybe that'll get you going in the right direction to build your own mental model of how data is passed from a parent component to any of its child components See & Practice What Are Props Follow the video below through to the challenge so you can: Visualize why props are needed in React. How they are used in the context of basic JavaScript's arguments & parameters. How to write the syntax of a new prop. And how to use props. How to Pass Props Follow along with the video below so you too can: Create a new functional component. Import and export the component. Pass props to the new component. Squash a bug while exporting. And render your to-do list with the new component. Passing Methods as Props (How to Remove your ToDos) Following the \"Three Jobs of a Developer\", this video shows you how to: Build a method to handle the deletion or manipulation and moving of data when we want to remove a to-do item. Pass a method as a prop to be used when the human-user clicks a button they can see . Finally, remove the item from where it is stored in state and rendered back to the user. NOTE: \"Three Jobs of a Developer\": Store data, Move & Manipulate data, and Show data to a human-user. Destructuring Props This video shows you how to D.R.Y. your code up by destructuring your props. Additional Resources YT, Academind - React Basics #6: Passing Data w/Props Know Your Docs Legacy React Docs - Props React Dev Docs - Props","title":"State & Props Intro"},{"location":"module-1/introToStateAndProps/#intro-to-state-and-props","text":"\u201cThe power of imagination makes us infinite.\u201d \u2014John Muir","title":"Intro to State and Props"},{"location":"module-1/introToStateAndProps/#recap","text":"Once you fall into React, you will fall in love with it. It's so simple and easy to use that you'll memorize all the life cycle methods and understand state and props and then you won't want to build with anything else. Today is going to be a whirlwind of facts and concepts. We're going to cover all the things that makeup React. It'll be tough at first because it's a lot! And it's new to you. But rest assured, you will get enough practice with it in the coming weeks that all of it will sink in and you'll be proud to put React on your resume!","title":"Recap"},{"location":"module-1/introToStateAndProps/#overview","text":"Recall that React is a tool that helps us build composable websites and apps. This composable structure is the center-point to the whole mindset behind React. Each of the pieces on a website, the smaller components that make up the whole, are just that components . In 101 you were used to building the components of a web page with various HTML tags: <article></article> , <p></p> , etc. Each of these elements represented a small piece of the whole page. With React we build functions that return these same elements. We call these functions React Components . The reason we build them as functions is that we might need to use the same element for an unknown amount of times with different data inside of it. For example, on Facebook you have a page to view all of your friends. Each of your friends has different information but they are still displayed on the same element/piece/component with the same shape and styling. Furthermore, you may have 6000 friends and I may only have 500. Using functions, the React app built by Facebook will call the FriendComponent function 6000 times when you look at your friends and 500 times when I look at my friends. To make this work we need a way to pass unique data to each function call so that each function call will return the same HTML element but render the unique data we pass to it. This passing of data happens with something called props as in prop erties. You see, this props parameter will represent the properties of the element that is returned from the React Component (function)","title":"Overview"},{"location":"module-1/introToStateAndProps/#props-how-we-pass-data-in-react","text":"Below you'll see a code snippet of a couple React components (again, which are simple JavaScript functions!). The only thing that makes them \"React\" functions is that they can be passed to the much larger React function that ingests them and turns them into HTML elements on a web page, known as React Elements . Just like functions, they can take arguments between their () . In fact, this is the only way we can pass props . To use the available props we must pass the props keyword into the () of the component. ChildComponent.js 1 2 3 4 5 6 7 const ChildComponent = ( props ) => { return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } export default ChildComponent In the above example, you see the props keyword passed into the function as an argument right? Now, where does the data associated with that props keyword come from? Look what's going on here: ParentComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 import childComponent from './childComponent.js' class ParentComponent extends Component { constructor () { super () render () { < childComponent propOne = { \"zebra cake\" } propTwo = { \"confection heaven\" } /> } } } export default ParentComponent In the code snippet above you see that our first childComponent is called inside our ParentComponent . Notice the JSX syntax: When we call a component in React with JSX it looks a lot like HTML syntax? In the line where we call the childComponent we see there are two props given: propOne and propTwo . They look a lot like attributes of an HTML tag, no? This is how we pass props down to other components. We can give them any attribute name we want. That same functionality could have been written: <childComponent poop={\"zebra cakes\"} unicorn={\"confection heaven\"}/> ; but instead we choose useful attribute/property names. Let's see it with state now. In the code snippet below we see the ParentComponent now has a state object, a simple JavaScript object with key and value pairs. Then we see the childComponent is called/invoked and passed props that reference keys of the state object. In this way, we can pass local state to another piece/component of our application!! ParentComponent with state + childComponent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ParentComponent extends Component { constructor () { super () this . state = { pieceOne : 'fig newton' , pieceTwo : 'sweet cardboard' , pieceThree : 3500 , } render () { return ( < childComponent propOne = { this . state . pieceOne } propTwo = { this . state . pieceTwo } /> ) } } } const childComponent = ( props ) => { return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } If we want our parent component to pass down a piece of its state to a child component we give the child component attributes like propTwo then point it at the value we want: propTwo={this.state.pieceTwo} ; this creates a key:value pair like we're familiar with in JavaScript already. After that, we use the props keyword in the child component, and presto, you have a component using props !! If we rendered childComponent it would say: \"A fig newton tastes like sweet cardboard.\" Under-the-hood, props is just an object and it looks like this: 1 2 3 4 props = { pieceOne : 'fig newton' , pieceTwo : 'sweet cardboard' } If you wanted to console.log() the value of the pieceOne key you would: console.log(props.pieceOne) . 1 2 3 4 5 6 7 8 const childComponent = ( props ) => { console . log ( props . pieceOne ) return ( < h1 > A { props . propOne } tastes like { props . propTwo }. < /h1> ) } NOTE: In the ParentComponent we must use the this keyword to indicate we want to to use the value of this object in this instance but when we get to the childComponent we don't have to use the this keyword because it is a pure functional component that doesn't have instances like Class-based components. Hopefully, that makes sense. If not, make sure you walk through it again so you can follow along with how the props are passed to components, then take a look at the following video and maybe that'll get you going in the right direction to build your own mental model of how data is passed from a parent component to any of its child components","title":"Props (How we pass data in React)"},{"location":"module-1/introToStateAndProps/#see-practice","text":"","title":"See &amp; Practice"},{"location":"module-1/introToStateAndProps/#what-are-props","text":"Follow the video below through to the challenge so you can: Visualize why props are needed in React. How they are used in the context of basic JavaScript's arguments & parameters. How to write the syntax of a new prop. And how to use props.","title":"What Are Props"},{"location":"module-1/introToStateAndProps/#how-to-pass-props","text":"Follow along with the video below so you too can: Create a new functional component. Import and export the component. Pass props to the new component. Squash a bug while exporting. And render your to-do list with the new component.","title":"How to Pass Props"},{"location":"module-1/introToStateAndProps/#passing-methods-as-props-how-to-remove-your-todos","text":"Following the \"Three Jobs of a Developer\", this video shows you how to: Build a method to handle the deletion or manipulation and moving of data when we want to remove a to-do item. Pass a method as a prop to be used when the human-user clicks a button they can see . Finally, remove the item from where it is stored in state and rendered back to the user. NOTE: \"Three Jobs of a Developer\": Store data, Move & Manipulate data, and Show data to a human-user.","title":"Passing Methods as Props (How to Remove your ToDos)"},{"location":"module-1/introToStateAndProps/#destructuring-props","text":"This video shows you how to D.R.Y. your code up by destructuring your props.","title":"Destructuring Props"},{"location":"module-1/introToStateAndProps/#additional-resources","text":"YT, Academind - React Basics #6: Passing Data w/Props","title":"Additional Resources"},{"location":"module-1/introToStateAndProps/#know-your-docs","text":"Legacy React Docs - Props React Dev Docs - Props","title":"Know Your Docs"},{"location":"module-1/reactDeveloperTools-pt1/","text":"React DevTools Overview As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on! Practice It Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools Additional Resources YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#react-devtools","text":"","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#overview","text":"As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on!","title":"Overview"},{"location":"module-1/reactDeveloperTools-pt1/#practice-it","text":"Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools","title":"Practice It"},{"location":"module-1/reactDeveloperTools-pt1/#additional-resources","text":"YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"Additional Resources"},{"location":"module-2/class-5/","text":"Class 5: Music App - Part 1 of 2 Once we believe in ourselves, we can risk curiosity, wonder, spontaneous delight, or any experience that reveals the human spirit.\u2003\u2014E. E. Cummings Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time create-react-app + repo + git init + add origin Begin building a Music Client for next Checkpoint Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins This week we will build our first application from scratch. It will be a music app with a few simple operations. During this process we will make use of state , props , lifecycle methods , forms and styling with Material UI to create a login screen and dashboard that interacts with user controls. You will have both class days this week to complete the project and upload your GitHub URL to the assignment submission. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the example images below. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Do your best and have fun! Example One Example Two Project Instructions Setup We will be working from scratch so you will need to create your own GitHub repository for this project and call it JS411-my-music-app . Do that now. Project Work 1. Initializing Navigate to a directory of your choosing (wherever you want your project to be) and run the command npx create-react-app my-music-app . A new folder called my-music-app should have been created. Once your project( my-music-app ) is created (with npx create-react-app using your terminal) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY_URL> to connect your local application to your remote repository. Now run npm start to see the default create-react-app code running. Additionally, install Material UI in this folder: npm install @mui/material @emotion/react @emotion/styled . 2. Login Screen Next, you will want to get rid of the default contents inside of App.js of create-react-app and replace them with the login screen. From the examples, the first thing you are probably noticing is the navigation bar. HINT: You can find the App Bar Component on the Material UI page. There are examples for integrating it. You will also want the Button and TextField components from Material UI. Search the site to find examples of those. If you want to add additional styling to these components, simply add the CSS to the App.css file for now. You can add a className on Material UI components just like you can with any other component. HINT: Add a property called loggedIn to your state that has a Boolean value. It should be set to false as the default. When you click the button to login, set that variable to true . You will probably want to do some conditional rendering here to show the login screen if the user is not logged in or show something else otherwise. As a refresher...conditional rendering with a ternary operator looks like this: a Ternary Example 1 2 3 4 5 render () { return this . state . loggedIn ? < Dashboard /> : ( // the code for your login screen ) } a Regular If/Else Example 1 2 3 4 5 6 7 8 9 render () { if ( this . state . loggedIn ) { return < Dashboard /> } else { return ( // the code for your login screen ) } } As a final note for the login session, you can make both the username and password fields required but don't worry about any other validation here. You can put whatever you want in those fields, click 'login' and it will work. We can learn more about true authentication in later weeks. 3. Components Folder Make a folder called components/ inside your src/ folder to hold any other components you wish to make in the future. You will need at least one more for the dashboard page. 4. Dashboard Component Make a component called Dashboard.js inside the components/ folder. You will want to create this component and then import it back into App.js to be conditionally rendered based on login like in the examples above. For now feel free to render something simple in this component like <p>testing</p> to see if it's working. HINT: If you noticed that you lost the nav bar when you navigated to this component then it makes sense because it was probably hardcoded in the App.js file. Find a way to break it out into its own component (maybe NavBar.js) and wrap App component with it so that it always shows up. Inside Dashboard.js you will want to create three cards; the Card component, as well as, its accompanying CardContent and CardActions can be found by looking in Material UI docs . HINT: You might choose to use flexbox (or grid ) to evenly space these three cards across the dashboard. 5. Card 1 - Online Mode This card will need access to the Switch Component . Think about setting a variable in state called online and having it be a Boolean value to represent the online status. When the switch is clicked, make sure the state gets updated: false to true . 6. Card 2 - Master Volume This card will need access to the Slider Component . Think about setting a variable in state called volume and having it be a number like 20 . When the slider is changed, update the state with the correct volume. HINT: Set your volume on a scale of 0 to 100 with steps of 10 at a time. 7. Card 3 - Sound Quality This card will need access to the Select Component . Think about setting a variable in state called \"quality\" and having it be a number of 1, 2 or 3, representing \"Low\", \"Normal\" or \"High\" quality. When the select box is changed make sure the state gets updated. 8. System Notifications Create a state variable in the Dashboard component called notifications and make it an empty array. When any other piece of state changes ( online , volume , quality ) update the notifications array with the corresponding messages. Here are the rules to follow: If the online status is \"false\" add the message Your application is offline. You won't be able to share or stream music to other devices. If the volume exceeds 80, add the message Listening to music at a high volume could cause long-term hearing loss. If the sound quality is changed to low, add the message Music quality is degraded. Increase quality if your connection allows it. HINT: Consider using the componentDidUpdate lifecycle method so that you know whenever the component state has changed. You can access the previous state with the prevState variable. More information on this: React componentDidUpdate() . Make sure to map through these notifications and display them underneath a \"System Notifications\" heading. Remember: you also have next class to work on this. Start reading the next pre-homework to understand more about lifecycle methods. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Music App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 5 Music App 1/2"},{"location":"module-2/class-5/#class-5-music-app-part-1-of-2","text":"Once we believe in ourselves, we can risk curiosity, wonder, spontaneous delight, or any experience that reveals the human spirit.\u2003\u2014E. E. Cummings","title":"Class 5: Music App - Part 1 of 2"},{"location":"module-2/class-5/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time create-react-app + repo + git init + add origin Begin building a Music Client for next Checkpoint Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-5/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-5/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-5/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-5/#creation-time-60-90-mins","text":"This week we will build our first application from scratch. It will be a music app with a few simple operations. During this process we will make use of state , props , lifecycle methods , forms and styling with Material UI to create a login screen and dashboard that interacts with user controls. You will have both class days this week to complete the project and upload your GitHub URL to the assignment submission. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the example images below. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Do your best and have fun! Example One Example Two","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-5/#project-instructions","text":"","title":"Project Instructions"},{"location":"module-2/class-5/#setup","text":"We will be working from scratch so you will need to create your own GitHub repository for this project and call it JS411-my-music-app . Do that now.","title":"Setup"},{"location":"module-2/class-5/#project-work","text":"","title":"Project Work"},{"location":"module-2/class-5/#1-initializing","text":"Navigate to a directory of your choosing (wherever you want your project to be) and run the command npx create-react-app my-music-app . A new folder called my-music-app should have been created. Once your project( my-music-app ) is created (with npx create-react-app using your terminal) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY_URL> to connect your local application to your remote repository. Now run npm start to see the default create-react-app code running. Additionally, install Material UI in this folder: npm install @mui/material @emotion/react @emotion/styled .","title":"1. Initializing"},{"location":"module-2/class-5/#2-login-screen","text":"Next, you will want to get rid of the default contents inside of App.js of create-react-app and replace them with the login screen. From the examples, the first thing you are probably noticing is the navigation bar. HINT: You can find the App Bar Component on the Material UI page. There are examples for integrating it. You will also want the Button and TextField components from Material UI. Search the site to find examples of those. If you want to add additional styling to these components, simply add the CSS to the App.css file for now. You can add a className on Material UI components just like you can with any other component. HINT: Add a property called loggedIn to your state that has a Boolean value. It should be set to false as the default. When you click the button to login, set that variable to true . You will probably want to do some conditional rendering here to show the login screen if the user is not logged in or show something else otherwise. As a refresher...conditional rendering with a ternary operator looks like this: a Ternary Example 1 2 3 4 5 render () { return this . state . loggedIn ? < Dashboard /> : ( // the code for your login screen ) } a Regular If/Else Example 1 2 3 4 5 6 7 8 9 render () { if ( this . state . loggedIn ) { return < Dashboard /> } else { return ( // the code for your login screen ) } } As a final note for the login session, you can make both the username and password fields required but don't worry about any other validation here. You can put whatever you want in those fields, click 'login' and it will work. We can learn more about true authentication in later weeks.","title":"2. Login Screen"},{"location":"module-2/class-5/#3-components-folder","text":"Make a folder called components/ inside your src/ folder to hold any other components you wish to make in the future. You will need at least one more for the dashboard page.","title":"3. Components Folder"},{"location":"module-2/class-5/#4-dashboard-component","text":"Make a component called Dashboard.js inside the components/ folder. You will want to create this component and then import it back into App.js to be conditionally rendered based on login like in the examples above. For now feel free to render something simple in this component like <p>testing</p> to see if it's working. HINT: If you noticed that you lost the nav bar when you navigated to this component then it makes sense because it was probably hardcoded in the App.js file. Find a way to break it out into its own component (maybe NavBar.js) and wrap App component with it so that it always shows up. Inside Dashboard.js you will want to create three cards; the Card component, as well as, its accompanying CardContent and CardActions can be found by looking in Material UI docs . HINT: You might choose to use flexbox (or grid ) to evenly space these three cards across the dashboard.","title":"4. Dashboard Component"},{"location":"module-2/class-5/#5-card-1-online-mode","text":"This card will need access to the Switch Component . Think about setting a variable in state called online and having it be a Boolean value to represent the online status. When the switch is clicked, make sure the state gets updated: false to true .","title":"5. Card 1 - Online Mode"},{"location":"module-2/class-5/#6-card-2-master-volume","text":"This card will need access to the Slider Component . Think about setting a variable in state called volume and having it be a number like 20 . When the slider is changed, update the state with the correct volume. HINT: Set your volume on a scale of 0 to 100 with steps of 10 at a time.","title":"6. Card 2 - Master Volume"},{"location":"module-2/class-5/#7-card-3-sound-quality","text":"This card will need access to the Select Component . Think about setting a variable in state called \"quality\" and having it be a number of 1, 2 or 3, representing \"Low\", \"Normal\" or \"High\" quality. When the select box is changed make sure the state gets updated.","title":"7. Card 3 - Sound Quality"},{"location":"module-2/class-5/#8-system-notifications","text":"Create a state variable in the Dashboard component called notifications and make it an empty array. When any other piece of state changes ( online , volume , quality ) update the notifications array with the corresponding messages. Here are the rules to follow: If the online status is \"false\" add the message Your application is offline. You won't be able to share or stream music to other devices. If the volume exceeds 80, add the message Listening to music at a high volume could cause long-term hearing loss. If the sound quality is changed to low, add the message Music quality is degraded. Increase quality if your connection allows it. HINT: Consider using the componentDidUpdate lifecycle method so that you know whenever the component state has changed. You can access the previous state with the prevState variable. More information on this: React componentDidUpdate() . Make sure to map through these notifications and display them underneath a \"System Notifications\" heading. Remember: you also have next class to work on this. Start reading the next pre-homework to understand more about lifecycle methods.","title":"8. System Notifications"},{"location":"module-2/class-5/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-5/#exit-recap-attendance-and-reminders-5-mins","text":"Create Music App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-6/","text":"Class 6: Music App - Part 2 of 2 I dwell in possibility.\u2003\u2014Emily Dickinson Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Continue Music App from last class Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Continue working on the Music App from last class. If you finish this exercise early, help a friend! One of the best ways to learn is to teach. You will need to have this assignment submitted by this weekend. Refer to the Music App examples and instructions provided last class. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 6 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 6 Music App 2/2"},{"location":"module-2/class-6/#class-6-music-app-part-2-of-2","text":"I dwell in possibility.\u2003\u2014Emily Dickinson","title":"Class 6: Music App - Part 2 of 2"},{"location":"module-2/class-6/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Continue Music App from last class Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-6/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-6/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-6/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-6/#creation-time-60-90-mins","text":"Continue working on the Music App from last class. If you finish this exercise early, help a friend! One of the best ways to learn is to teach. You will need to have this assignment submitted by this weekend. Refer to the Music App examples and instructions provided last class.","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-6/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-6/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-6/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 6 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-7/","text":"Class 7: Fake Car Dashboard If you are working on something that you really care about, you don\u2019t have to be pushed. The vision pulls you.\u2003\u2014Steve Jobs Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: client-side routing of a web app with React Router the NPM package React-Router with its dependencies and structure Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Get specs laid out Fork & Clone 411_wk4_day1_react_router repository Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we learned last night about React Router. Below are some screenshots of a simple website for cars. We will finish this website by: adding routing with React Router, building a component for the cars detail page, and finally routing to the new component. Take a look at the images below and notice the URLs in them. Apparently our web designers want these specific URLs for these components. FakeCars Image One FakeCars Image Two FakeCars Image Three Project Instructions Fork and clone the following repo: 411_wk4_day1_react_router repository . The instructions are in the README. Push Yourself Further Follow along with this tutorial . Keep in mind that they do things a little differently but it's good to know different ways to write routers. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 7"},{"location":"module-2/class-7/#class-7-fake-car-dashboard","text":"If you are working on something that you really care about, you don\u2019t have to be pushed. The vision pulls you.\u2003\u2014Steve Jobs","title":"Class 7: Fake Car Dashboard"},{"location":"module-2/class-7/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: client-side routing of a web app with React Router the NPM package React-Router with its dependencies and structure Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Get specs laid out Fork & Clone 411_wk4_day1_react_router repository Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-7/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-7/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-7/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-7/#creation-time-60-90-mins","text":"Today we are going to practice what we learned last night about React Router. Below are some screenshots of a simple website for cars. We will finish this website by: adding routing with React Router, building a component for the cars detail page, and finally routing to the new component. Take a look at the images below and notice the URLs in them. Apparently our web designers want these specific URLs for these components. FakeCars Image One FakeCars Image Two FakeCars Image Three","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-7/#project-instructions","text":"Fork and clone the following repo: 411_wk4_day1_react_router repository . The instructions are in the README.","title":"Project Instructions"},{"location":"module-2/class-7/#push-yourself-further","text":"Follow along with this tutorial . Keep in mind that they do things a little differently but it's good to know different ways to write routers.","title":"Push Yourself Further"},{"location":"module-2/class-7/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-7/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-8/","text":"Class 8: Protected Routes It is always the simple that produces the marvelous.\u2003\u2014Amelia Barr Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Using Boolean logic to allow a user access to specific components Setting cookies in the user's browser Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the 411_wk4_day2_protected_routes repo Follow the instructions in the README to complete then turn in. Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we learned about Protected Routes. We will create a login page, set cookies, and build protected routes to provide a more reliable login experience for the users of the cars application we worked on before. Fork and clone the following repository: 411_wk4_day2_protected_routes . Follow the directions in the README.md to complete the project. git status , add , commit , push to your forked repo. Turn in the link of your forked repo. Follow-up Video: YT, FreeCodeCamp.org - cookies vs sessionStorage Push Yourself Further Read this insanely cool article on how one developer at Netlify used cookies to solve an on-boarding problem. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create FakeCar-Login Assignment Create Class 8 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 8 Login"},{"location":"module-2/class-8/#class-8-protected-routes","text":"It is always the simple that produces the marvelous.\u2003\u2014Amelia Barr","title":"Class 8: Protected Routes"},{"location":"module-2/class-8/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Using Boolean logic to allow a user access to specific components Setting cookies in the user's browser Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the 411_wk4_day2_protected_routes repo Follow the instructions in the README to complete then turn in. Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-8/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-8/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-8/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-8/#creation-time-60-90-mins","text":"Today we are going to practice what we learned about Protected Routes. We will create a login page, set cookies, and build protected routes to provide a more reliable login experience for the users of the cars application we worked on before. Fork and clone the following repository: 411_wk4_day2_protected_routes . Follow the directions in the README.md to complete the project. git status , add , commit , push to your forked repo. Turn in the link of your forked repo. Follow-up Video: YT, FreeCodeCamp.org - cookies vs sessionStorage","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-8/#push-yourself-further","text":"Read this insanely cool article on how one developer at Netlify used cookies to solve an on-boarding problem.","title":"Push Yourself Further"},{"location":"module-2/class-8/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-8/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-8/#exit-recap-attendance-and-reminders-5-mins","text":"Create FakeCar-Login Assignment Create Class 8 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/componentLifeCycle/","text":"Component Lifecycle Let us make our future now, and let us make our dreams tomorrow\u2019s reality.\u2003\u2014Malala Yousafzai We've done a lot in the past two weeks getting up to speed with React but there are some deeper level concepts we need to cover and firmly grasp. Today we will take a deeper dive into React's Class-Based Component Lifecycle and the methods involved, but before we do let's look at this JSX syntax a little more closely. Overview The Component Lifecycle is a set of steps that every class-based component goes through from when the component is referenced/invoked and mounted in the DOM to when it is closed out and removed from the DOM, birth to death. This Lifecycle can be divided into 4 phases: Mounting , Updating , Unmounting , & Error . Inside of each of these phases are individual methods(properties with functions as their definition/value). These methods are appropriately classified as lifecycle methods because they get called throughout each phase and each has a purpose... we will get into soon. Why? The purpose of these lifecycle methods is to capture or encapsulate the manipulation, moving, and rendering of data inside of each component, just like JSX provides easier syntax for doing this. Having the ability to pinpoint certain points of execution during a component's \"life\" gives us greater flexibility, programming customization, and testing opportunities. For example, we may want to load some data into our component before we render it onto the screen. It just so happens that there is a lifecycle method called componentDidMount that fires after the initial render method. This is a great place to make a call for that data. And yes, render() is a lifecycle method too. If your data hasn't come back from the API yet you might offer the user a spinning wheel or cute animation through the use of conditional rendering in your render statement so when your data does come in, you can call render again. These methods become more and more useful as you grow into your new trade and become more proficient. For now, let's cover the most commonly used methods and how to mentally model what they are and how to use them. Read It - Class-Based Component Lifecycle We've talked briefly about what the component lifecycle is and why it's useful so let's get a little more into the details of the operation. I'd like to start with how these lifecycle methods are accessed. From the past couple classes, you've likely become familiar with seeing a component written like this: Two ways to extend Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React from 'react' class MyComponent extends React . Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } // Or... import React , { Component } from 'react' class MyComponent extends Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } The above two examples are the exact same in terms of functionality. The only difference is that we imported Component separately in the second example. Let's talk about that a little. The reason we have access to any of these methods (for example: render ) is because of the \"Component\" keyword on line 1 and/or 3 of the two examples above. When we create our component with class MyComponent ... and use extends Component , which we've imported from React , we are saying (in code) that we want our class to have all the capabilities of a React class component (a class that is built into the React node module). The method render actually lives on that Component and the only reason we get to use it is that we \"extended\" from Component with a class of our own. Fortunately for us, Component has a few other useful methods to use the same way: The componentDidMount Method This method, when used in your component, fires when the component is inserted into the DOM tree. This happens after the initial \"render\" method and can be useful for fetching data or updating state based on some conditions. The componentDidMount method (and other lifecycle methods) are usually placed above the render method. Here's an example: Example of componentDidMount 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { data : [] } } componentDidMount () { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { this . setState ({ data : examples }) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { this . state . data } < /p> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { useState , useEffect } from 'react' function MyComponent () { const [ data , setData ] = useState ([]); useEffect (() => { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { setData ( examples ) }) }, []); // empty dependency array so it will only run when first mounting return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { data } < /p> < /div> ) } The render Method This may seem redundant but the render method is important to understand since it is the only required method when using a class component. The render method typically returns JSX but it can also return other things, namely: Arrays Strings/Numbers Booleans Null The above options aren't typical so we will focus on JSX. It's also important to note that the render method should be a \"pure function\" which means it doesn't update state . The second rule to render is that it must return something ...JSX, null , an array, whatever. It must return something. Speaking of state, we need to remember that this render method will be invoked each time the state changes. Calling this.setState() anywhere in your component will cause this function to fire again and update the parts of the DOM that may have changed. In the following code, how many times will the render method be called on initiation? Simple Class Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [] } } componentDidMount () { const arr = this . props . users . filter ( u => u . username . length > 5 ) this . setState ({ users : arr }) } handleClick = () => { this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React , { useState , useEffect } from 'react' function MyComponent ( props ) { const [ users , setusers ] = useState ([]); const propUsers = props . users ; useEffect (() => { const arr = propUsers . filter ( u => u . username . length > 5 ) setusers ( arr ) }, [ propUsers ]); // any props used inside this useEffect must go in the dependency array const handleClick = () => { setusers ([... users ]. concat ([ 'newUser' ])) } return ( < div > < h1 > Welcome to our component < /h1> { errText && < p > { errText } < /p>} < p > Here ' s an array with our users : { users } < /p> < button onClick = { handleClick } > Add User < /button> < /div> ) } The key is in the word \"initially\" . Hopefully you guessed 2 times. The render will be invoked a third time when the button is clicked. The answer is two because this.setState is asynchronous and the initial render will attempt before the componentDidMount function is complete. However, componentDidMount will quickly update the state and re-render the component without the user noticing anything. You can read more about that process in the React Docs . Before we move to another lifecycle method let's remember that everything is an object including this React component we're extending. What this means is that it too has properties, or methods(because their values are functions). Just like all of the methods on the DOM or any HTML element you've worked with like onclick, hover, blur...etc, this React Component has method that are firing blanks throughout the cycles of its life until YOU, the developer, give them instructions. Here's invalid code but a good visual example of what the Component you're extending looks like under-the-hood. Under-the-hood look at the lifecycle methods - Invalid Code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // * React Class Component /Object-Thing/ myComponent = { constructor : () => { /* create state here */ }, componentDidMount : () => { /* fetch data here */ }, componentDidUpdate : () => {}, componentWillUnmount : () => { /* delete cookies, unsubscribe from current connections, sign out here */ }, render : () => { /* return the visual for the DOM in JSX here */ }, componentDidCatch : () => { /* process error handling here */ }, getDerivedStateFromError : () => {}, shouldComponentUpdate : () => {}, getSnapshotBeforeUpdate : () => {}, getDerivedStateFromProps : () => {}, } Now that you see each property is already declared on the class, you can now go and define them with whatever your application's needs are! If you don't need them, don't worry about them they'll just fire blanks with no side-effects! The componentDidUpdate Method This method is called when the component is updated. What does \"updated\" mean? It means when this.setState is called somewhere in the tree that affects the current component. This lifecycle method is not called on the initial load of the component. When it is called it automatically gives us a variable called prevProps that we can use to see if any of the props changed. You can call this.setState in this function but you want to be careful to do it based on some condition. If you don't, you'll cause an infinite loop because setState will cause the component to \"update\" which will then call setState which will cause it to update again, etc, etc, etc. For this reason, this is Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 componentDidUpdate ( prevProps , prevState , snapshot ) { // will not be invoked if shouldComponentUpdate() returns false. // Use to do side effects if the state or props change and those create a need for a side-effect like a data fetch/network request or visuals // fired every time render is called after the initial render call // If we have a snapshot value, we've just added new items. // Adjust scroll so these new items don't push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if ( snapshot !== null ) { const list = this . listRef . current ; list . scrollTop = list . scrollHeight - snapshot ; } } Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // this.setState({}) -> // componentDidUpdate() -> // this.setState({})-> // componentDidUpdate() -> // this.setState({})-> // etc. // This lifecycle method can be used like this: import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [], errText : \"\" } } componentDidUpdate () { if ( this . state . users . length === 0 ) { this . setState ({ errText : 'There are no users to show' }) } } handleClick = () => { // This line is a shorthand to set the state to equal what the list of users was plus the new user that was added. this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /h1> { this . state . errText && < p > { this . state . errText } < /p>} < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import React , { useState , useEffect } from 'react' function MyComponent () { const [ users , setusers ] = useState ([]); const [ errText , setErrText ] = useState ( '' ); useEffect (() => { if ( users . length === 0 ) { setErrText ( 'There are no users to show' ) } }, [ users ]); const handleClick = () => { setusers ([... users ]. concat ([ 'newUser' ])) } return ( < div > < h1 > Welcome to our component < /h1> { errText && < p > { errText } < /p>} < p > Here ' s an array with our users : { users } < /p> < button onClick = { handleClick } > Add User < /button> < /div> ) } The constructor Method The constructor is the first thing that happens when you load up a component. In fact, it's the first thing that happens anytime you use a class in JavaScript for any purpose (not just React). Inside the constructor is where you initialize variables that your class, or component, will use. For example, this is where you typically set your initial state. You also call the super() function inside of the constructor. This function calls the parent constructor with the data you've passed in, but we don't need to know about the details of that here so let's take a look at how we use the constructor: Example Usage of constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import React , { Component } from 'react' class MyComponent extends Component { constructor () { super () // calls the functionality of the grandparent class(the class parent of the Component class) this . state = { count : 0 } } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } It's important to note that many people have stopped using the constructor in such verbose terms since React released shortcuts for writing this. Essentially, it does the same thing behind the scenes but the above can now also be written as: State without calling constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { state = { count : 0 } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } Order of Operations The lifecycle methods we just covered were not in any specific order so below we'll order them by the way they fire when the component is mounted , rendered , updated , unmounted , and if an error occurs. These phases are the phases of the components cycle of life, a.k.a the order in which the methods are fired as the component comes into the DOM(mounts) and eventually leaves the DOM (unmounts). Mounting Phase constructor() render() Updating Phase shouldComponentUpdate(nextProps, nextState) render() componentDidUpdate(prevProps, prevState, snapshot) getSnapshotBeforeUpdate(prevProps, prevState) static getDerivedStateFromProps(props, state) Unmounting Phase componentWillUnmount() - used to fire before the render method but it is now considered legacy and unsafe to use. Error Phase - Not used to handle exceptions! componentDidCatch() getDerivedStateFromError() A full, comprehensive breakdown of all lifecycle methods can be found in here . We encourage you to look at this page often as well as use this lifecycle cheatsheet as you develop. Other component lifecycle methods and properties you should become familiar with are: setState() forceUpdate() defaultProps displayName Summary Practice It Work through the React Docs Tutorial to build a timer app that utilizes the lifecycle methods. Additional Resources Blog, CodeBurst - How to Use the Lifecycle Methods Blog, Blog - React Component Lifecycle Reference, Wojtekma - Lifecycle Methods Diagram Reference, LogRocket - The New React Lifecycle Methods Know Your Docs React Docs - componentDidMount React Docs - React Component","title":"Class Component Lifecycle"},{"location":"module-2/componentLifeCycle/#component-lifecycle","text":"Let us make our future now, and let us make our dreams tomorrow\u2019s reality.\u2003\u2014Malala Yousafzai We've done a lot in the past two weeks getting up to speed with React but there are some deeper level concepts we need to cover and firmly grasp. Today we will take a deeper dive into React's Class-Based Component Lifecycle and the methods involved, but before we do let's look at this JSX syntax a little more closely.","title":"Component Lifecycle"},{"location":"module-2/componentLifeCycle/#overview","text":"The Component Lifecycle is a set of steps that every class-based component goes through from when the component is referenced/invoked and mounted in the DOM to when it is closed out and removed from the DOM, birth to death. This Lifecycle can be divided into 4 phases: Mounting , Updating , Unmounting , & Error . Inside of each of these phases are individual methods(properties with functions as their definition/value). These methods are appropriately classified as lifecycle methods because they get called throughout each phase and each has a purpose... we will get into soon.","title":"Overview"},{"location":"module-2/componentLifeCycle/#why","text":"The purpose of these lifecycle methods is to capture or encapsulate the manipulation, moving, and rendering of data inside of each component, just like JSX provides easier syntax for doing this. Having the ability to pinpoint certain points of execution during a component's \"life\" gives us greater flexibility, programming customization, and testing opportunities. For example, we may want to load some data into our component before we render it onto the screen. It just so happens that there is a lifecycle method called componentDidMount that fires after the initial render method. This is a great place to make a call for that data. And yes, render() is a lifecycle method too. If your data hasn't come back from the API yet you might offer the user a spinning wheel or cute animation through the use of conditional rendering in your render statement so when your data does come in, you can call render again. These methods become more and more useful as you grow into your new trade and become more proficient. For now, let's cover the most commonly used methods and how to mentally model what they are and how to use them.","title":"Why?"},{"location":"module-2/componentLifeCycle/#read-it-class-based-component-lifecycle","text":"We've talked briefly about what the component lifecycle is and why it's useful so let's get a little more into the details of the operation. I'd like to start with how these lifecycle methods are accessed. From the past couple classes, you've likely become familiar with seeing a component written like this: Two ways to extend Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React from 'react' class MyComponent extends React . Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } // Or... import React , { Component } from 'react' class MyComponent extends Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } The above two examples are the exact same in terms of functionality. The only difference is that we imported Component separately in the second example. Let's talk about that a little. The reason we have access to any of these methods (for example: render ) is because of the \"Component\" keyword on line 1 and/or 3 of the two examples above. When we create our component with class MyComponent ... and use extends Component , which we've imported from React , we are saying (in code) that we want our class to have all the capabilities of a React class component (a class that is built into the React node module). The method render actually lives on that Component and the only reason we get to use it is that we \"extended\" from Component with a class of our own. Fortunately for us, Component has a few other useful methods to use the same way:","title":"Read It - Class-Based Component Lifecycle"},{"location":"module-2/componentLifeCycle/#the-componentdidmount-method","text":"This method, when used in your component, fires when the component is inserted into the DOM tree. This happens after the initial \"render\" method and can be useful for fetching data or updating state based on some conditions. The componentDidMount method (and other lifecycle methods) are usually placed above the render method. Here's an example: Example of componentDidMount 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { data : [] } } componentDidMount () { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { this . setState ({ data : examples }) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { this . state . data } < /p> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { useState , useEffect } from 'react' function MyComponent () { const [ data , setData ] = useState ([]); useEffect (() => { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { setData ( examples ) }) }, []); // empty dependency array so it will only run when first mounting return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { data } < /p> < /div> ) }","title":"The componentDidMount Method"},{"location":"module-2/componentLifeCycle/#the-render-method","text":"This may seem redundant but the render method is important to understand since it is the only required method when using a class component. The render method typically returns JSX but it can also return other things, namely: Arrays Strings/Numbers Booleans Null The above options aren't typical so we will focus on JSX. It's also important to note that the render method should be a \"pure function\" which means it doesn't update state . The second rule to render is that it must return something ...JSX, null , an array, whatever. It must return something. Speaking of state, we need to remember that this render method will be invoked each time the state changes. Calling this.setState() anywhere in your component will cause this function to fire again and update the parts of the DOM that may have changed. In the following code, how many times will the render method be called on initiation? Simple Class Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [] } } componentDidMount () { const arr = this . props . users . filter ( u => u . username . length > 5 ) this . setState ({ users : arr }) } handleClick = () => { this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React , { useState , useEffect } from 'react' function MyComponent ( props ) { const [ users , setusers ] = useState ([]); const propUsers = props . users ; useEffect (() => { const arr = propUsers . filter ( u => u . username . length > 5 ) setusers ( arr ) }, [ propUsers ]); // any props used inside this useEffect must go in the dependency array const handleClick = () => { setusers ([... users ]. concat ([ 'newUser' ])) } return ( < div > < h1 > Welcome to our component < /h1> { errText && < p > { errText } < /p>} < p > Here ' s an array with our users : { users } < /p> < button onClick = { handleClick } > Add User < /button> < /div> ) } The key is in the word \"initially\" . Hopefully you guessed 2 times. The render will be invoked a third time when the button is clicked. The answer is two because this.setState is asynchronous and the initial render will attempt before the componentDidMount function is complete. However, componentDidMount will quickly update the state and re-render the component without the user noticing anything. You can read more about that process in the React Docs . Before we move to another lifecycle method let's remember that everything is an object including this React component we're extending. What this means is that it too has properties, or methods(because their values are functions). Just like all of the methods on the DOM or any HTML element you've worked with like onclick, hover, blur...etc, this React Component has method that are firing blanks throughout the cycles of its life until YOU, the developer, give them instructions. Here's invalid code but a good visual example of what the Component you're extending looks like under-the-hood. Under-the-hood look at the lifecycle methods - Invalid Code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // * React Class Component /Object-Thing/ myComponent = { constructor : () => { /* create state here */ }, componentDidMount : () => { /* fetch data here */ }, componentDidUpdate : () => {}, componentWillUnmount : () => { /* delete cookies, unsubscribe from current connections, sign out here */ }, render : () => { /* return the visual for the DOM in JSX here */ }, componentDidCatch : () => { /* process error handling here */ }, getDerivedStateFromError : () => {}, shouldComponentUpdate : () => {}, getSnapshotBeforeUpdate : () => {}, getDerivedStateFromProps : () => {}, } Now that you see each property is already declared on the class, you can now go and define them with whatever your application's needs are! If you don't need them, don't worry about them they'll just fire blanks with no side-effects!","title":"The render Method"},{"location":"module-2/componentLifeCycle/#the-componentdidupdate-method","text":"This method is called when the component is updated. What does \"updated\" mean? It means when this.setState is called somewhere in the tree that affects the current component. This lifecycle method is not called on the initial load of the component. When it is called it automatically gives us a variable called prevProps that we can use to see if any of the props changed. You can call this.setState in this function but you want to be careful to do it based on some condition. If you don't, you'll cause an infinite loop because setState will cause the component to \"update\" which will then call setState which will cause it to update again, etc, etc, etc. For this reason, this is Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 componentDidUpdate ( prevProps , prevState , snapshot ) { // will not be invoked if shouldComponentUpdate() returns false. // Use to do side effects if the state or props change and those create a need for a side-effect like a data fetch/network request or visuals // fired every time render is called after the initial render call // If we have a snapshot value, we've just added new items. // Adjust scroll so these new items don't push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if ( snapshot !== null ) { const list = this . listRef . current ; list . scrollTop = list . scrollHeight - snapshot ; } } Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // this.setState({}) -> // componentDidUpdate() -> // this.setState({})-> // componentDidUpdate() -> // this.setState({})-> // etc. // This lifecycle method can be used like this: import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [], errText : \"\" } } componentDidUpdate () { if ( this . state . users . length === 0 ) { this . setState ({ errText : 'There are no users to show' }) } } handleClick = () => { // This line is a shorthand to set the state to equal what the list of users was plus the new user that was added. this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /h1> { this . state . errText && < p > { this . state . errText } < /p>} < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } Functional version with Hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import React , { useState , useEffect } from 'react' function MyComponent () { const [ users , setusers ] = useState ([]); const [ errText , setErrText ] = useState ( '' ); useEffect (() => { if ( users . length === 0 ) { setErrText ( 'There are no users to show' ) } }, [ users ]); const handleClick = () => { setusers ([... users ]. concat ([ 'newUser' ])) } return ( < div > < h1 > Welcome to our component < /h1> { errText && < p > { errText } < /p>} < p > Here ' s an array with our users : { users } < /p> < button onClick = { handleClick } > Add User < /button> < /div> ) }","title":"The componentDidUpdate Method"},{"location":"module-2/componentLifeCycle/#the-constructor-method","text":"The constructor is the first thing that happens when you load up a component. In fact, it's the first thing that happens anytime you use a class in JavaScript for any purpose (not just React). Inside the constructor is where you initialize variables that your class, or component, will use. For example, this is where you typically set your initial state. You also call the super() function inside of the constructor. This function calls the parent constructor with the data you've passed in, but we don't need to know about the details of that here so let's take a look at how we use the constructor: Example Usage of constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import React , { Component } from 'react' class MyComponent extends Component { constructor () { super () // calls the functionality of the grandparent class(the class parent of the Component class) this . state = { count : 0 } } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } It's important to note that many people have stopped using the constructor in such verbose terms since React released shortcuts for writing this. Essentially, it does the same thing behind the scenes but the above can now also be written as: State without calling constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { state = { count : 0 } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } }","title":"The constructor Method"},{"location":"module-2/componentLifeCycle/#order-of-operations","text":"The lifecycle methods we just covered were not in any specific order so below we'll order them by the way they fire when the component is mounted , rendered , updated , unmounted , and if an error occurs. These phases are the phases of the components cycle of life, a.k.a the order in which the methods are fired as the component comes into the DOM(mounts) and eventually leaves the DOM (unmounts).","title":"Order of Operations"},{"location":"module-2/componentLifeCycle/#mounting-phase","text":"constructor() render()","title":"Mounting Phase"},{"location":"module-2/componentLifeCycle/#updating-phase","text":"shouldComponentUpdate(nextProps, nextState) render() componentDidUpdate(prevProps, prevState, snapshot) getSnapshotBeforeUpdate(prevProps, prevState) static getDerivedStateFromProps(props, state)","title":"Updating Phase"},{"location":"module-2/componentLifeCycle/#unmounting-phase","text":"componentWillUnmount() - used to fire before the render method but it is now considered legacy and unsafe to use.","title":"Unmounting Phase"},{"location":"module-2/componentLifeCycle/#error-phase-not-used-to-handle-exceptions","text":"componentDidCatch() getDerivedStateFromError() A full, comprehensive breakdown of all lifecycle methods can be found in here . We encourage you to look at this page often as well as use this lifecycle cheatsheet as you develop. Other component lifecycle methods and properties you should become familiar with are: setState() forceUpdate() defaultProps displayName","title":"Error Phase - Not used to handle exceptions!"},{"location":"module-2/componentLifeCycle/#summary","text":"","title":"Summary"},{"location":"module-2/componentLifeCycle/#practice-it","text":"Work through the React Docs Tutorial to build a timer app that utilizes the lifecycle methods.","title":"Practice It"},{"location":"module-2/componentLifeCycle/#additional-resources","text":"Blog, CodeBurst - How to Use the Lifecycle Methods Blog, Blog - React Component Lifecycle Reference, Wojtekma - Lifecycle Methods Diagram Reference, LogRocket - The New React Lifecycle Methods","title":"Additional Resources"},{"location":"module-2/componentLifeCycle/#know-your-docs","text":"React Docs - componentDidMount React Docs - React Component","title":"Know Your Docs"},{"location":"module-2/componentStyling/","text":"Intro to Component Styling with Material-UI There is no success without failure. There is no failure without lesson. What is your lesson? Review and Recap We've built up some knowledge of React components and how they fit together using props. We've also explored how state works. That is the basic logic for creating applications but what about how they look? You should be familiar with CSS through 101 but today we are going to introduce a new styling tool... Material UI. Overview There are many different ways to style applications in React . You can use: CSS files that you've created and import them Third-party CSS (ex. Bootstrap), again import them and use their pre-built micro-components Styled components from various open source providers with libraries like Material UI The reason we are introducing Material UI is because it is a robust, cross-platform component library backed by Google. It was written by two former Google UI engineers and designed by one of Google's design teams . Before you move on, watch the backstory to a major project called Material Design by Google which gave birth to Material UI . NOTE: In this video at 2:43 use this command to install: npm install @mui/material @emotion/react @emotion/styled More on Material-UI We mentioned the words \"component library\". But what does that mean? Well...a component library is a set of pre-built components that satisfy some specific design requirement. For example...say I want all the buttons on my website to look the same (or similar). This is something that you usually want for consistency and good design. Well, Material UI provides a pre-built Button component that you can import into your code like this: import { Button } from '@mui/material'; These buttons come with pre-determined styles but can be further styled to your liking. See the code snippet and example screenshot below: the JSX 1 2 3 4 5 6 7 8 9 < Button variant = \"contained\" color = \"primary\" className = { classes . button } > Primary < /Button> < Button variant = \"contained\" color = \"secondary\" className = { classes . button } > Secondary < /Button> < Button variant = \"contained\" color = \"secondary\" disabled className = { classes . button } > Disabled < /Button> the Result You've probably noticed the import statement above somewhere else and up until this point may have been wondering what Material UI is in the technical sense or how to use it. If so, I've got great news: it's simply an NPM package that we need to install. We do so by running this command: npm install @mui/material @emotion/react @emotion/styled . Material UI uses the peer dependency emotion as a styling engine. More information can be found on this NPM package at NPMjs.com . Additionally, the documentation on all available components is available at the Material UI documentation. Be sure to use the navigation to look under the components folder. There is a lot of information available. So that's enough about what Material-UI is. Let's see it in action: the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 import React from 'react' ; import { Button } from '@mui/material' const App = () => { return ( < div style = {{ padding : '50px' }} > < h2 > Here ' s an example of a button using Material UI :< /h2> < Button variant = \"contained\" > Click Me < /Button> < /div> ) } export default App ; the Result In the above component, we simply import ed the Button from @mui/material and then used it below our heading. We supplied the prop, variant with a value of \"contained\" to tell the button that we want the border around it. Normally it comes without it. You can look more into the options, examples & why \"contained\" creates a border in the Button docs . So what does that code equate to when we run it? Take a look at \"the Result\" tab above. In Summary In conclusion, if you want to create a cool-looking, uniform experience across your application...use Material UI. See if they have a component for your needs. Buttons , Checkboxes , Radio Buttons , Selects , Sliders , Text Fields and more are all available for use. We will use Material UI to style our App in this week's lesson so go get familiar with the Docs . There are several ways to customize styles in Material UI. The preferred ways involve using the sx prop for direct styling or using styled() to create or add styles to existing components. The example from above with className on the buttons is also a valid option. 1 2 3 4 5 6 import Button from '@mui/material/Button' ; // sx is a prop that takes in an object with key value pairs written as // standard css you already know < Button sx = {{ border : \"5px solid red\" , \"margin-top\" : \"100px\" }} variant = \"text\" > Text < /Button> We can create styled components either with standard html elements or further down below giving styles to existing components. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import Button from '@mui/material/Button' ; //note new import system @mui/system it comes with @mui/material // we installed earlier import { styled } from '@mui/system' ; // Turn a div into a custom MaterialUi styled component const MyComponent = styled ( 'div' )({ color : 'darkslategray' , backgroundColor : 'aliceblue' , padding : 8 , borderRadius : 4 , border : \"5px solid blue\" }); export function BasicButtons () { return ( < MyComponent > < Button sx = {{ border : \"5px solid red\" , \"margin-top\" : \"100px\" }} variant = \"text\" > Text < /Button> < /MyComponent>; ); } See It - Using Material-UI NOTE: In this video at 4:49 you will see makeStyles but the preferred design pattern is a combination of higher order component styled() and/or sx prop: Direct Link To updated Code. Then scroll up in the documentation to see the custom card from the video. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Giving styles to exiting <IconButton/> component // Link to full code example // https://mui.com/material-ui/react-card/#RecipeReviewCard.js const ExpandMore = styled (( props ) => { const { expand , ... other } = props ; return < IconButton {... other } /> ; })(({ theme , expand }) => ({ transform : ! expand ? 'rotate(0deg)' : 'rotate(180deg)' , marginLeft : 'auto' , transition : theme . transitions . create ( 'transform' , { duration : theme . transitions . duration . shortest , }), })); Practice It Navigate to the following URL: https://codesandbox.io/s/new?from-embed . Under the \"Dependencies\" heading on the left side of the screen, click blue button that says \"Add Dependency\" Search for \"@mui/material\" exactly as written. It will be the top one. Click it to install it. Search for \"@emotion/styled\" exactly as written. It will be the top one. Click it to install it. Search for \"@emotion/react\" exactly as written. It will be the top one. Click it to install it. Now on line 3 of the code editor type import { Button } from '@mui/material' and press Enter . After line 11 (the h2 ), add the following: <Button>Click Me</Button> . You should see a button appear. Now on line 3 put a comma after the word Button and type TextField to import the TextField component. Above the button insert the following: <TextField label=\"Enter some text\" /> and below that line add <br /> for now just to give some separation. Do you see the text field? Try typing in it just to get a sense of its style. You're done! Easy styles and components for React with Material-UI. Additional Resources YT, CodingTheSmartWay.com - Getting Started with Material-UI YT, Google Design - What is Material Design Blog, CodeBurst - Four Ways to Style React Components Know Your Docs Be sure to reference the Material Documentation on Usage to see how others have used it with React, Next.js, Gatsby, Parcel, and more. NPM Docs - Material-UI Material-UI Docs - Home Page","title":"Component Styling with Material-UI"},{"location":"module-2/componentStyling/#intro-to-component-styling-with-material-ui","text":"There is no success without failure. There is no failure without lesson. What is your lesson?","title":"Intro to Component Styling with Material-UI"},{"location":"module-2/componentStyling/#review-and-recap","text":"We've built up some knowledge of React components and how they fit together using props. We've also explored how state works. That is the basic logic for creating applications but what about how they look? You should be familiar with CSS through 101 but today we are going to introduce a new styling tool... Material UI.","title":"Review and Recap"},{"location":"module-2/componentStyling/#overview","text":"There are many different ways to style applications in React . You can use: CSS files that you've created and import them Third-party CSS (ex. Bootstrap), again import them and use their pre-built micro-components Styled components from various open source providers with libraries like Material UI The reason we are introducing Material UI is because it is a robust, cross-platform component library backed by Google. It was written by two former Google UI engineers and designed by one of Google's design teams . Before you move on, watch the backstory to a major project called Material Design by Google which gave birth to Material UI . NOTE: In this video at 2:43 use this command to install: npm install @mui/material @emotion/react @emotion/styled","title":"Overview"},{"location":"module-2/componentStyling/#more-on-material-ui","text":"We mentioned the words \"component library\". But what does that mean? Well...a component library is a set of pre-built components that satisfy some specific design requirement. For example...say I want all the buttons on my website to look the same (or similar). This is something that you usually want for consistency and good design. Well, Material UI provides a pre-built Button component that you can import into your code like this: import { Button } from '@mui/material'; These buttons come with pre-determined styles but can be further styled to your liking. See the code snippet and example screenshot below: the JSX 1 2 3 4 5 6 7 8 9 < Button variant = \"contained\" color = \"primary\" className = { classes . button } > Primary < /Button> < Button variant = \"contained\" color = \"secondary\" className = { classes . button } > Secondary < /Button> < Button variant = \"contained\" color = \"secondary\" disabled className = { classes . button } > Disabled < /Button> the Result You've probably noticed the import statement above somewhere else and up until this point may have been wondering what Material UI is in the technical sense or how to use it. If so, I've got great news: it's simply an NPM package that we need to install. We do so by running this command: npm install @mui/material @emotion/react @emotion/styled . Material UI uses the peer dependency emotion as a styling engine. More information can be found on this NPM package at NPMjs.com . Additionally, the documentation on all available components is available at the Material UI documentation. Be sure to use the navigation to look under the components folder. There is a lot of information available. So that's enough about what Material-UI is. Let's see it in action: the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 import React from 'react' ; import { Button } from '@mui/material' const App = () => { return ( < div style = {{ padding : '50px' }} > < h2 > Here ' s an example of a button using Material UI :< /h2> < Button variant = \"contained\" > Click Me < /Button> < /div> ) } export default App ; the Result In the above component, we simply import ed the Button from @mui/material and then used it below our heading. We supplied the prop, variant with a value of \"contained\" to tell the button that we want the border around it. Normally it comes without it. You can look more into the options, examples & why \"contained\" creates a border in the Button docs . So what does that code equate to when we run it? Take a look at \"the Result\" tab above.","title":"More on Material-UI"},{"location":"module-2/componentStyling/#in-summary","text":"In conclusion, if you want to create a cool-looking, uniform experience across your application...use Material UI. See if they have a component for your needs. Buttons , Checkboxes , Radio Buttons , Selects , Sliders , Text Fields and more are all available for use. We will use Material UI to style our App in this week's lesson so go get familiar with the Docs . There are several ways to customize styles in Material UI. The preferred ways involve using the sx prop for direct styling or using styled() to create or add styles to existing components. The example from above with className on the buttons is also a valid option. 1 2 3 4 5 6 import Button from '@mui/material/Button' ; // sx is a prop that takes in an object with key value pairs written as // standard css you already know < Button sx = {{ border : \"5px solid red\" , \"margin-top\" : \"100px\" }} variant = \"text\" > Text < /Button> We can create styled components either with standard html elements or further down below giving styles to existing components. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import Button from '@mui/material/Button' ; //note new import system @mui/system it comes with @mui/material // we installed earlier import { styled } from '@mui/system' ; // Turn a div into a custom MaterialUi styled component const MyComponent = styled ( 'div' )({ color : 'darkslategray' , backgroundColor : 'aliceblue' , padding : 8 , borderRadius : 4 , border : \"5px solid blue\" }); export function BasicButtons () { return ( < MyComponent > < Button sx = {{ border : \"5px solid red\" , \"margin-top\" : \"100px\" }} variant = \"text\" > Text < /Button> < /MyComponent>; ); }","title":"In Summary"},{"location":"module-2/componentStyling/#see-it-using-material-ui","text":"NOTE: In this video at 4:49 you will see makeStyles but the preferred design pattern is a combination of higher order component styled() and/or sx prop: Direct Link To updated Code. Then scroll up in the documentation to see the custom card from the video. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Giving styles to exiting <IconButton/> component // Link to full code example // https://mui.com/material-ui/react-card/#RecipeReviewCard.js const ExpandMore = styled (( props ) => { const { expand , ... other } = props ; return < IconButton {... other } /> ; })(({ theme , expand }) => ({ transform : ! expand ? 'rotate(0deg)' : 'rotate(180deg)' , marginLeft : 'auto' , transition : theme . transitions . create ( 'transform' , { duration : theme . transitions . duration . shortest , }), }));","title":"See It - Using Material-UI"},{"location":"module-2/componentStyling/#practice-it","text":"Navigate to the following URL: https://codesandbox.io/s/new?from-embed . Under the \"Dependencies\" heading on the left side of the screen, click blue button that says \"Add Dependency\" Search for \"@mui/material\" exactly as written. It will be the top one. Click it to install it. Search for \"@emotion/styled\" exactly as written. It will be the top one. Click it to install it. Search for \"@emotion/react\" exactly as written. It will be the top one. Click it to install it. Now on line 3 of the code editor type import { Button } from '@mui/material' and press Enter . After line 11 (the h2 ), add the following: <Button>Click Me</Button> . You should see a button appear. Now on line 3 put a comma after the word Button and type TextField to import the TextField component. Above the button insert the following: <TextField label=\"Enter some text\" /> and below that line add <br /> for now just to give some separation. Do you see the text field? Try typing in it just to get a sense of its style. You're done! Easy styles and components for React with Material-UI.","title":"Practice It"},{"location":"module-2/componentStyling/#additional-resources","text":"YT, CodingTheSmartWay.com - Getting Started with Material-UI YT, Google Design - What is Material Design Blog, CodeBurst - Four Ways to Style React Components","title":"Additional Resources"},{"location":"module-2/componentStyling/#know-your-docs","text":"Be sure to reference the Material Documentation on Usage to see how others have used it with React, Next.js, Gatsby, Parcel, and more. NPM Docs - Material-UI Material-UI Docs - Home Page","title":"Know Your Docs"},{"location":"module-2/developSeries-discipline/","text":"Develop Discipline","title":"Develop Discipline"},{"location":"module-2/developSeries-discipline/#develop-discipline","text":"","title":"Develop Discipline"},{"location":"module-2/implement-ReactRouter/","text":"Implementing React-Router Overview Now that you've gotten a hold of this new tool and have an understanding of why and when to use it, let's take some time to see how it's implemented so you can really get the flow of these \"wrapper\"/higher-order components. Implement BrowserRouter Implement BrowserRouter Video Video Outline Go to index.js import { BrowserRouter } from 'react-router-dom' create new component 1 2 3 4 5 6 7 const Main = () => { return ( < BrowserRouter > < Router /> < /BrowserRouter> ) } and import Router from './Router' replace <App /> with wrapper function <Main /> NOTE: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". Your boilerplate might look like this: 1 2 3 4 5 6 import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < App /> ); Building the Router Component Building the Router Component Video Video Outline Create Router.js file import React import Routes & Route Import the two components you want to test with!!! import React from 'react' import { Routes, Route } from 'react-router-dom' import Home from './Home' import App from './App' Create Router function/component: 1 2 3 4 5 6 7 8 const Router = () => { return ( < Routes > < Route path = \"/home\" component = { Home } /> < Route path = \"/app\" component = { App } /> < /Routes> ) } Don't forget to: export default Router Go back to index.js and uncomment the import!! Test your App to see if it works! NOTE: This video was recorded before reactRouter v6. NOTE-2: We don't use <Switch> anymore. It is now <Routes> . NOTE-3: And now, you will import Routes and Route from react-router-dom . NOTE-4: Also, instead of using the component={ComponentName} prop you'll use the element={<ComponentName} prop. Your example should look more like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import React from 'react' ; import { Routes , Route } from 'react-router-dom' ; import App from './App' ; import Home from './Home' ; const Router = () => { return ( { /* Then we use Routes and Route. Routes acts like a regular JS Switch Statement */ } < Routes > { /* depending on the path in the URL, one of these Routes will be returned and their component rendered */ } < Route path = \"/home\" element = { < Home /> } /> < Route path = \"/app\" element = { < App /> } /> < /Routes> ); } export default Router ; Implementing Link Implementing Link Video Video Outline 1. Go to the simple components: <HelloWorldOne /> & <HelloWorldTwo /> 2. import { Link } from 'react-router-dom' 3. Add your wherever you want!!! 4. <Link to=\"/yourpath\"> 5. Remove underline... style={{ textDecoration: \"none\" }} 6. Use a Material-UI Button... import Button from \"@mui/material/Button\"; 1 2 3 4 5 6 7 8 9 < Link to = \"/home\" > < Button style = {{ margin : \"5% auto\" }} variant = \"outlined\" color = \"primary\" > Go BackHome < /Button> < /Link> 7. Create two more components called: <SignIn /> & <SignUp /> and give them all Links to go to <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> 8. Bonus 1: Use a Material-UI Button Group to do it!!! 9. Bonus 2: Create a new component for the Button Group and import it into the other four components: <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> or whichever components you've decided to use. Another Method to Implement Link with MUI Button MUI will also accept another property named component which can take the value of any component we want to render in it's place. By doing this, we will not need to overwrite Link 's default styling since MUI will overwrite it using this method. You can now also add the to property, which we can specify the route we want to navigate to, to our Button , and now our Link will have access to that to property as well. Here is an example on how to implement Link and MUI's Button: 1 2 3 4 5 // Of course, don't forget your necessary imports... < Button component = { Link } to = \"/login\" variant = \"outlined\" color = \"primary\" > Login < /Button> You can refer to MUI's Button API to see a list of different properties the Button component may take. Practice It Practice Section Instructions Open the code editor and navigate to App.js on the left-hand side The dependencies have already been imported for you. Notice the imports from \"react-router-dom\" and \"@mui/material\" We also have a custom Router component being imported. Let's look at the Router.js file next. The dependencies have also been imported here for you, import {Routes, Route} from \"react-router-dom\" We also have some simple custom Components being imported here as well, \"Dashboard\" and \"Login\" Follow the TODO's marked in the comments starting at the Router.js file, and then move to App.js. Practice making other Route 's and apply the same logic. Pretty Simple! Additional Resources YT, PedroTech - React Router v6 Reference, StackOverflow - Link YT, Net Ninja - React Router 6 Tutorial | Upgrading from v5 Know Your Docs React Training Docs - Routes & Route React Router Docs - Quick Start React Router Docs - React Router v6","title":"Implement React Router"},{"location":"module-2/implement-ReactRouter/#implementing-react-router","text":"","title":"Implementing React-Router"},{"location":"module-2/implement-ReactRouter/#overview","text":"Now that you've gotten a hold of this new tool and have an understanding of why and when to use it, let's take some time to see how it's implemented so you can really get the flow of these \"wrapper\"/higher-order components.","title":"Overview"},{"location":"module-2/implement-ReactRouter/#implement-browserrouter","text":"Implement BrowserRouter Video Video Outline Go to index.js import { BrowserRouter } from 'react-router-dom' create new component 1 2 3 4 5 6 7 const Main = () => { return ( < BrowserRouter > < Router /> < /BrowserRouter> ) } and import Router from './Router' replace <App /> with wrapper function <Main /> NOTE: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". Your boilerplate might look like this: 1 2 3 4 5 6 import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < App /> );","title":"Implement BrowserRouter"},{"location":"module-2/implement-ReactRouter/#building-the-router-component","text":"Building the Router Component Video Video Outline Create Router.js file import React import Routes & Route Import the two components you want to test with!!! import React from 'react' import { Routes, Route } from 'react-router-dom' import Home from './Home' import App from './App' Create Router function/component: 1 2 3 4 5 6 7 8 const Router = () => { return ( < Routes > < Route path = \"/home\" component = { Home } /> < Route path = \"/app\" component = { App } /> < /Routes> ) } Don't forget to: export default Router Go back to index.js and uncomment the import!! Test your App to see if it works! NOTE: This video was recorded before reactRouter v6. NOTE-2: We don't use <Switch> anymore. It is now <Routes> . NOTE-3: And now, you will import Routes and Route from react-router-dom . NOTE-4: Also, instead of using the component={ComponentName} prop you'll use the element={<ComponentName} prop. Your example should look more like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import React from 'react' ; import { Routes , Route } from 'react-router-dom' ; import App from './App' ; import Home from './Home' ; const Router = () => { return ( { /* Then we use Routes and Route. Routes acts like a regular JS Switch Statement */ } < Routes > { /* depending on the path in the URL, one of these Routes will be returned and their component rendered */ } < Route path = \"/home\" element = { < Home /> } /> < Route path = \"/app\" element = { < App /> } /> < /Routes> ); } export default Router ;","title":"Building the Router Component"},{"location":"module-2/implement-ReactRouter/#implementing-link","text":"Implementing Link Video Video Outline 1. Go to the simple components: <HelloWorldOne /> & <HelloWorldTwo /> 2. import { Link } from 'react-router-dom' 3. Add your wherever you want!!! 4. <Link to=\"/yourpath\"> 5. Remove underline... style={{ textDecoration: \"none\" }} 6. Use a Material-UI Button... import Button from \"@mui/material/Button\"; 1 2 3 4 5 6 7 8 9 < Link to = \"/home\" > < Button style = {{ margin : \"5% auto\" }} variant = \"outlined\" color = \"primary\" > Go BackHome < /Button> < /Link> 7. Create two more components called: <SignIn /> & <SignUp /> and give them all Links to go to <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> 8. Bonus 1: Use a Material-UI Button Group to do it!!! 9. Bonus 2: Create a new component for the Button Group and import it into the other four components: <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> or whichever components you've decided to use.","title":"Implementing Link"},{"location":"module-2/implement-ReactRouter/#another-method-to-implement-link-with-mui-button","text":"MUI will also accept another property named component which can take the value of any component we want to render in it's place. By doing this, we will not need to overwrite Link 's default styling since MUI will overwrite it using this method. You can now also add the to property, which we can specify the route we want to navigate to, to our Button , and now our Link will have access to that to property as well. Here is an example on how to implement Link and MUI's Button: 1 2 3 4 5 // Of course, don't forget your necessary imports... < Button component = { Link } to = \"/login\" variant = \"outlined\" color = \"primary\" > Login < /Button> You can refer to MUI's Button API to see a list of different properties the Button component may take.","title":"Another Method to Implement Link with MUI Button"},{"location":"module-2/implement-ReactRouter/#practice-it","text":"","title":"Practice It"},{"location":"module-2/implement-ReactRouter/#practice-section-instructions","text":"Open the code editor and navigate to App.js on the left-hand side The dependencies have already been imported for you. Notice the imports from \"react-router-dom\" and \"@mui/material\" We also have a custom Router component being imported. Let's look at the Router.js file next. The dependencies have also been imported here for you, import {Routes, Route} from \"react-router-dom\" We also have some simple custom Components being imported here as well, \"Dashboard\" and \"Login\" Follow the TODO's marked in the comments starting at the Router.js file, and then move to App.js. Practice making other Route 's and apply the same logic. Pretty Simple!","title":"Practice Section Instructions"},{"location":"module-2/implement-ReactRouter/#additional-resources","text":"YT, PedroTech - React Router v6 Reference, StackOverflow - Link YT, Net Ninja - React Router 6 Tutorial | Upgrading from v5","title":"Additional Resources"},{"location":"module-2/implement-ReactRouter/#know-your-docs","text":"React Training Docs - Routes & Route React Router Docs - Quick Start React Router Docs - React Router v6","title":"Know Your Docs"},{"location":"module-2/protectedRoutes-intro/","text":"Protected Routes I arise full of eagerness and energy, knowing well what achievement lies ahead of me.\u2003\u2014Zane Grey In the last lesson we learned how to route a user to a specific component/view based on the URL, but what if we needed to prevent certain users from seeing certain components. Let's say, if we had a class grading app we would want to prevent the students from seeing the allGradesComponent while still allowing the teacher to see it. We would put this allGradesComponent behind a Protected Route that will work like an if/else statement to see if the user is allowed to view it our not. Check it out below. Overview Why are we learning about this? Well, protected routes and authentication are tools we can use to secure our app from unwanted guests. It's also a way to keep us logged in. You might have noticed last week that when we \"logged into\" our app, everything was fine but when we refreshed the page we had to \"log in\" again. That's because the app had no way of understanding that we had an active session or cookie stored. Using protected routes and authentication will allow us to leave our machine ( computer ), come back the next day and open the app and remain right where we were when we left off. Only if our cookie has expired will we be required to log in again. Let's explore these processes further. NOTE=1: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". NOTE: This video was recorded before react-router & react-router-dom v6. We don't use <Switch> anymore, it is now <Routes> . Also, <Redirect> has been replaced by <Navigate> . What and How First and foremost, what is a Protected Route ? Just like the routes we worked with last class, these routes are protected by some logic. Think: if (userIsAuthorized) => go to profile; else {\"Sorry, you're not authorized, please log in.\"}. It boils down to a bit of JavaScript logic that directs the user to one component or another based on some condition. It's easiest to show an example. Protected Route Example without comments 1 2 3 4 5 6 7 8 9 10 11 12 import { Navigate } from \"react-router-dom\" ; const ProtectedRoute = ( props ) => { const { component : Component , ... rest } = props ; return ( checkAuth () === true ? ( < Component {... rest } /> ) : ( < Navigate to = \"/login\" /> ) ); }; export default ProtectedRoute ; Protected Route Example with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // Import `Navigate` from react-router-dom import { Navigate } from \"react-router-dom\" ; // Create a component that takes props that will serve our Protected Routes const ProtectedRoute = ( props ) => { // Destructure the props passed to this component. const { component : Component , ... rest } = props ; /* The ProtectedRoute function is going to take in props as an argument. These props will contain at the bare minimum a component that will be rendered if the condition is met. Therefore, when we destructure the props we will say that the component to be rendered is the component being passed: `component: Component` See? We're taking the component that was passed...whatever it was and storing it in a variable called `component` (lower-case C) so we can `render()` it later by called `<Component />` Since React will expect all components to begin with a capital letter, and the 'component' property is the prop that is storing the reference to the `Component` we want to render, we simply rename `component` to 'Component`. Now we have a reference to what ever component was passed to this `ProtectedRoute` functions i.e. `MySettings`, `MyAccount`, etc. The `{...rest}` of the properties we spread into a variable called `rest` which uses the spread operator `...` to capture and give us a reference to any remaining properties that may have been passed to this function. We can then again reference `rest` when we need to pass those properties to another Component down the chain. */ return ( // We will create this function `checkAuth()` soon, but for now, know // it returns either `true` or `false` depending on whether someone is // logged in or not. checkAuth () === true ? ( // IF? \"checkAuth()\" returns `true`, render this Component. See? A component protected by some logic . < Component {... rest } /> ) : ( // ELSE: `checkAuth()` must be `false` and we want to \"Navigate\" // the user to the \"/login\" route by changing their URL using the // `Navigate` component from `react-router-dom`. The `to=` property // point to the path we want to replace the URL with: `\"/login\"` < Navigate to = \"/login\" /> ) ); }; export default ProtectedRoute ; Let's talk about what this is doing: This ProtectedRoute component can accept any amount of props but the props we really want is the component property from the Route in question. On the first line... const ProtectedRoute = ({component: Component, ...rest}) => { ...we \"split\" out the Component from the rest of the props in order to use it more easily later. Next, we want to either return the Component or Navigate the user to the Login component. This will be based on a condition we will define. Think of your checkForWin() function in ticTacToe. We are referencing a custom-built checkAuth() function that we will create later. If checkAuth returns true then we will send the user on to the component they want to visit. If checkAuth returns false then we will Navigate them to the login component so that they can log in. NOTE: You don't have to remember all of this right now but know where to reference it. In the future when you are using Protected Routes (sometimes called Private Routes ) you should be able to Google something like \"React Protected Route\" for an example. Where Do We Put this Code? Where do we put this code? The ProtectedRoute component built above will be imported into our Router.js where we'll replace the element= prop of any Route we want to protect. Router.js File with ProtectedRoute Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { Routes , Router } from \"react-router-dom\" ; import Home from \"./components/Home\" ; // #1 Import the component you want to be protected import Dashboard from \"./components/Dashboard\" ; // #2 Import the ProtectedRoute import ProtectedRoute from \"./components/ProtectedRoute\" ; const Router = () => { return ( < Routes > < Route path = \"/\" element = { < Home /> } /> < Route path = \"/dashboard\" { /* #3 Replace the element prop with the ProtectedRoute and give the component you want to be rendered as ITS element prop. */ } element = { < ProtectedRoute component = { Dashboard } /> } /> < /Routes> ); }; export default Router ; NOTE: Notice how we are just sending the instance of the Dashboard component, this will be rendered by the Protected Route component based on the condition that someone is Authenticated or not. This does not to be wrapped like a JSX element <Dashboard /> . You need to simply pass in the Dashboard reference, from our import at the top of the file, as a property into our ProtectedRoute component. Now, the <Dashboard /> component will be protected and only be shown based on some condition like is the user authenticated, after we add it in , of course. We use the ProtectedRoute component by simply replacing the element property being rendered from one of the regular Route 's we've already built. Changing a Route to a ProtectedRoute For just a little more on this, let's look at them side by side, changing Route to a ProtectedRoute We simply change this Route to a ProtectedRoute by changing the element= property(prop). 1 2 3 4 5 // This < Route path = \"/dashboard\" element = { < Dashboard /> } /> // Becomes this < Route path = \"/dashboard\" element = { < ProtectedRoute component = { Dashboard } /> } > We pass in the ProtectedRoute component instead and make sure to include the component we just replaced with the ProtectedRoute as ITS component= prop. NOTE: The <ProtectedRoute /> element can also take any properties you want to include, but we want to make sure to include the component we do want to render IF the user is Authenticated or \"loggedIn\". See It - Protected Routes NOTE: This video was recorded before react-router & react-router-dom v6. We don't use <Switch> anymore, it is now <Routes> . Also, <Redirect> has been replaced by <Navigate> . The checkAuth() Function A very simple way to test if your protected route is working is to build a dumb function like the one below: const checkAuth = () => true The code above will say that you are always logged in and anyone will be able to navigate to your protected route. In production mode we generally want something more complicated than that. Maybe when the person enters their email and password, our server app verifies they are who they say they are then sends a token to be stored as a cookie to prove they've been authenticated. From there, our front-end app could check to see if a valid cookie exists and allows the user to the protected component/view. Let's look at how to find a cookie from the browser window , shall we? CheckAuth function & NPM cookie 1 2 3 4 5 6 7 // With a special NPM Package called \"cookie\" import cookie from \"cookie\" ; const checkAuth = () => { const cookies = cookie . parse ( document . cookie ); return cookies [ \"loggedIn\" ] ? true : false ; }; Look closely at the function above, it's getting all of the cookies that exist on the browser and saying, \"If there's one called loggedIn , return true . Otherwise return false . cookie.parse actually comes from the NPM package called cookie . We'll be installing it shortly. (Just make sure you do the following homework.) For now, let's assume if we're looking for a cookie called: loggedIn we probably put one, or set one , there called loggedIn with our app. This means our app can now save data to the local storage of a user's computer, or more specifically, their browser's local storage! This isn't something we've done yet.....ooooh....ahhhh. Cookies Cookies are small bits of information that websites store on your browser. They are key-value pairs like objects but they only contain text. They help the browser make certain decisions using the content that's been stored in these cookies. That's exactly what we are going to do here. You can interact with cookies at anytime by typing document.cookie in the console of your browser. Go ahead and do that now... document.cookie + Enter ==> \"ASPSESSIONIDAACDSPBS=IENHHCBEBANMBEPJNLICGFGP\" (or something like that) If you did this, it should have brought back a string of characters that's hard to do anything with. This problem is solved with the cookie package from npm . It can be installed with the regular npm i cookie command. Getting a list of our available cookies is easy with cookie.parse . But first, let's talk about setting cookies. In fact, you don't even need the cookie package to do this. You simply write something like this in your browser console: document.cookie = \"loggedIn=true;Max-Age=60*1000\" + Enter The Max-Age property decides how long the cookie will live for/be valid for. This property is counted in milliseconds so if you want the cookie to last one minute, you have to use 60*1000 , (1000 milliseconds = 1 second; 1 second X 60 = 1 minute) . In React & Node world, we can use the cookie package to write simple cookies as well. It will look something like this: Setting cookies using the cookie package 1 2 3 4 5 6 7 8 9 10 11 12 import cookie from \"cookie\" ; // Or // const cookie = require(\"cookie\"); // Set a new cookie document . cookie = cookie . serialize ( \"loggedIn\" , \"true\" , { maxAge : 1000 * 60 }); // Delete a cookie document . cookie = cookie . serialize ( \"loggedIn\" , null , { maxAge : 0 }); // To check your new cookies console . log ( cookie . parse ( document . cookie )); The cookie.serialize() method takes in 3 parameters: the key , the value , then an Object that takes in some key/value pairs as options. The list of options when using the cookie package can be found here . Setting the maxAge attribute to 0, or a negative number, will delete the cookie from memory. So now we've set this cookie on Login which means at Logout we'll want to clear it. Keep this in mind as we move forward because we're going to continue working on the Login in portion for now. NOTE: Without the cookie package, we would need to do some extra work in order to get our cookies to be more readable and usable. By default, document.cookie will return a concatenated string with all our key/values separated by a semi-colon. This makes it hard for us to extract the right bit of information we need. The npm package, cookie , simplifies that process for us, making it more practical. Lets take a look at what it looks like to get a cookie without that cookie package. Cookies without NPM cookie - without comments 1 2 3 4 5 6 7 8 9 document . cookie = \"loggedin=true;Max-Age=1000*60\" ; document . cookie = \"anotherKey=anotherValue;Max-Age=1000*60\" ; let cookies = {}; document . cookie . split ( \";\" ). forEach (( el ) => { let keyValue = el . split ( \"=\" ); return ( cookies [ keyValue [ 0 ]] = keyValue [ 1 ]); }); Cookies without NPM cookie - with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Set some cookies document . cookie = \"loggedin=true;Max-Age=1000*60\" ; document . cookie = \"anotherKey=anotherValue;Max-Age=1000*60\" ; // Create an object called `cookies` which will be used to store our key / values AFTER we break them down let cookies = {}; // Get cookies by calling to the cookie method on the document: // \"document.cookie\" document . cookie // \"loggedin=true;anotherKey=anotherValue // Split that concatenated string of joined key/values at the semicolons // and place it into an array . split ( \";\" ) // returns [\"loggedin=false\", \"anotherKey=anotherValue\"] // For each element in our new Array of strings . forEach (( el ) => { // Split the element AT the \"equal\" sign let keyValue = el . split ( \"=\" ); // [\"loggedin\", \"false\"] // And for every element, we return a new key/value pair and attach it // to our cookies object we create first return ( cookies [ keyValue [ 0 ]] = keyValue [ 1 ]); // At the end we get an object with 2 key values, which is much easier // to work with: // {loggedin: \"true\", anotherKey: \"anotherValue\"} }); Want to know more about cookies and what you can do with them? Read this very detailed article on What Are Cookies . Practice It Practice Section Instructions Open the sandbox above Navigate to the Route.js file and look at the comments Create a ProtectedRoute function where the commented line indicates Replace the use of Route with ProtectedRoute in the <Switch> component Do you see the components showing up? Use the address bar to navigate to the \"/about\" and \"/info\" pages. Do you see those? Replace the true with false in the checkAuth function. Are the components still showing up? Additional Resources YT, Coding Addict - React Router 6 - Protected Route YT,Bro Code - WTF is a JavaScript \"cookie\"? \ud83c\udf6a Article, WhatAreCookies.com - What Are Cookies Know Your Docs React Training Docs - Navigate NPM Docs - cookie","title":"Protected Routes"},{"location":"module-2/protectedRoutes-intro/#protected-routes","text":"I arise full of eagerness and energy, knowing well what achievement lies ahead of me.\u2003\u2014Zane Grey In the last lesson we learned how to route a user to a specific component/view based on the URL, but what if we needed to prevent certain users from seeing certain components. Let's say, if we had a class grading app we would want to prevent the students from seeing the allGradesComponent while still allowing the teacher to see it. We would put this allGradesComponent behind a Protected Route that will work like an if/else statement to see if the user is allowed to view it our not. Check it out below.","title":"Protected Routes"},{"location":"module-2/protectedRoutes-intro/#overview","text":"Why are we learning about this? Well, protected routes and authentication are tools we can use to secure our app from unwanted guests. It's also a way to keep us logged in. You might have noticed last week that when we \"logged into\" our app, everything was fine but when we refreshed the page we had to \"log in\" again. That's because the app had no way of understanding that we had an active session or cookie stored. Using protected routes and authentication will allow us to leave our machine ( computer ), come back the next day and open the app and remain right where we were when we left off. Only if our cookie has expired will we be required to log in again. Let's explore these processes further. NOTE=1: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". NOTE: This video was recorded before react-router & react-router-dom v6. We don't use <Switch> anymore, it is now <Routes> . Also, <Redirect> has been replaced by <Navigate> .","title":"Overview"},{"location":"module-2/protectedRoutes-intro/#what-and-how","text":"First and foremost, what is a Protected Route ? Just like the routes we worked with last class, these routes are protected by some logic. Think: if (userIsAuthorized) => go to profile; else {\"Sorry, you're not authorized, please log in.\"}. It boils down to a bit of JavaScript logic that directs the user to one component or another based on some condition. It's easiest to show an example. Protected Route Example without comments 1 2 3 4 5 6 7 8 9 10 11 12 import { Navigate } from \"react-router-dom\" ; const ProtectedRoute = ( props ) => { const { component : Component , ... rest } = props ; return ( checkAuth () === true ? ( < Component {... rest } /> ) : ( < Navigate to = \"/login\" /> ) ); }; export default ProtectedRoute ; Protected Route Example with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // Import `Navigate` from react-router-dom import { Navigate } from \"react-router-dom\" ; // Create a component that takes props that will serve our Protected Routes const ProtectedRoute = ( props ) => { // Destructure the props passed to this component. const { component : Component , ... rest } = props ; /* The ProtectedRoute function is going to take in props as an argument. These props will contain at the bare minimum a component that will be rendered if the condition is met. Therefore, when we destructure the props we will say that the component to be rendered is the component being passed: `component: Component` See? We're taking the component that was passed...whatever it was and storing it in a variable called `component` (lower-case C) so we can `render()` it later by called `<Component />` Since React will expect all components to begin with a capital letter, and the 'component' property is the prop that is storing the reference to the `Component` we want to render, we simply rename `component` to 'Component`. Now we have a reference to what ever component was passed to this `ProtectedRoute` functions i.e. `MySettings`, `MyAccount`, etc. The `{...rest}` of the properties we spread into a variable called `rest` which uses the spread operator `...` to capture and give us a reference to any remaining properties that may have been passed to this function. We can then again reference `rest` when we need to pass those properties to another Component down the chain. */ return ( // We will create this function `checkAuth()` soon, but for now, know // it returns either `true` or `false` depending on whether someone is // logged in or not. checkAuth () === true ? ( // IF? \"checkAuth()\" returns `true`, render this Component. See? A component protected by some logic . < Component {... rest } /> ) : ( // ELSE: `checkAuth()` must be `false` and we want to \"Navigate\" // the user to the \"/login\" route by changing their URL using the // `Navigate` component from `react-router-dom`. The `to=` property // point to the path we want to replace the URL with: `\"/login\"` < Navigate to = \"/login\" /> ) ); }; export default ProtectedRoute ; Let's talk about what this is doing: This ProtectedRoute component can accept any amount of props but the props we really want is the component property from the Route in question. On the first line... const ProtectedRoute = ({component: Component, ...rest}) => { ...we \"split\" out the Component from the rest of the props in order to use it more easily later. Next, we want to either return the Component or Navigate the user to the Login component. This will be based on a condition we will define. Think of your checkForWin() function in ticTacToe. We are referencing a custom-built checkAuth() function that we will create later. If checkAuth returns true then we will send the user on to the component they want to visit. If checkAuth returns false then we will Navigate them to the login component so that they can log in. NOTE: You don't have to remember all of this right now but know where to reference it. In the future when you are using Protected Routes (sometimes called Private Routes ) you should be able to Google something like \"React Protected Route\" for an example.","title":"What and How"},{"location":"module-2/protectedRoutes-intro/#where-do-we-put-this-code","text":"Where do we put this code? The ProtectedRoute component built above will be imported into our Router.js where we'll replace the element= prop of any Route we want to protect. Router.js File with ProtectedRoute Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { Routes , Router } from \"react-router-dom\" ; import Home from \"./components/Home\" ; // #1 Import the component you want to be protected import Dashboard from \"./components/Dashboard\" ; // #2 Import the ProtectedRoute import ProtectedRoute from \"./components/ProtectedRoute\" ; const Router = () => { return ( < Routes > < Route path = \"/\" element = { < Home /> } /> < Route path = \"/dashboard\" { /* #3 Replace the element prop with the ProtectedRoute and give the component you want to be rendered as ITS element prop. */ } element = { < ProtectedRoute component = { Dashboard } /> } /> < /Routes> ); }; export default Router ; NOTE: Notice how we are just sending the instance of the Dashboard component, this will be rendered by the Protected Route component based on the condition that someone is Authenticated or not. This does not to be wrapped like a JSX element <Dashboard /> . You need to simply pass in the Dashboard reference, from our import at the top of the file, as a property into our ProtectedRoute component. Now, the <Dashboard /> component will be protected and only be shown based on some condition like is the user authenticated, after we add it in , of course. We use the ProtectedRoute component by simply replacing the element property being rendered from one of the regular Route 's we've already built.","title":"Where Do We Put this Code?"},{"location":"module-2/protectedRoutes-intro/#changing-a-route-to-a-protectedroute","text":"For just a little more on this, let's look at them side by side, changing Route to a ProtectedRoute We simply change this Route to a ProtectedRoute by changing the element= property(prop). 1 2 3 4 5 // This < Route path = \"/dashboard\" element = { < Dashboard /> } /> // Becomes this < Route path = \"/dashboard\" element = { < ProtectedRoute component = { Dashboard } /> } > We pass in the ProtectedRoute component instead and make sure to include the component we just replaced with the ProtectedRoute as ITS component= prop. NOTE: The <ProtectedRoute /> element can also take any properties you want to include, but we want to make sure to include the component we do want to render IF the user is Authenticated or \"loggedIn\".","title":"Changing a Route to a ProtectedRoute"},{"location":"module-2/protectedRoutes-intro/#see-it-protected-routes","text":"NOTE: This video was recorded before react-router & react-router-dom v6. We don't use <Switch> anymore, it is now <Routes> . Also, <Redirect> has been replaced by <Navigate> .","title":"See It - Protected Routes"},{"location":"module-2/protectedRoutes-intro/#the-checkauth-function","text":"A very simple way to test if your protected route is working is to build a dumb function like the one below: const checkAuth = () => true The code above will say that you are always logged in and anyone will be able to navigate to your protected route. In production mode we generally want something more complicated than that. Maybe when the person enters their email and password, our server app verifies they are who they say they are then sends a token to be stored as a cookie to prove they've been authenticated. From there, our front-end app could check to see if a valid cookie exists and allows the user to the protected component/view. Let's look at how to find a cookie from the browser window , shall we? CheckAuth function & NPM cookie 1 2 3 4 5 6 7 // With a special NPM Package called \"cookie\" import cookie from \"cookie\" ; const checkAuth = () => { const cookies = cookie . parse ( document . cookie ); return cookies [ \"loggedIn\" ] ? true : false ; }; Look closely at the function above, it's getting all of the cookies that exist on the browser and saying, \"If there's one called loggedIn , return true . Otherwise return false . cookie.parse actually comes from the NPM package called cookie . We'll be installing it shortly. (Just make sure you do the following homework.) For now, let's assume if we're looking for a cookie called: loggedIn we probably put one, or set one , there called loggedIn with our app. This means our app can now save data to the local storage of a user's computer, or more specifically, their browser's local storage! This isn't something we've done yet.....ooooh....ahhhh.","title":"The checkAuth() Function"},{"location":"module-2/protectedRoutes-intro/#cookies","text":"Cookies are small bits of information that websites store on your browser. They are key-value pairs like objects but they only contain text. They help the browser make certain decisions using the content that's been stored in these cookies. That's exactly what we are going to do here. You can interact with cookies at anytime by typing document.cookie in the console of your browser. Go ahead and do that now... document.cookie + Enter ==> \"ASPSESSIONIDAACDSPBS=IENHHCBEBANMBEPJNLICGFGP\" (or something like that) If you did this, it should have brought back a string of characters that's hard to do anything with. This problem is solved with the cookie package from npm . It can be installed with the regular npm i cookie command. Getting a list of our available cookies is easy with cookie.parse . But first, let's talk about setting cookies. In fact, you don't even need the cookie package to do this. You simply write something like this in your browser console: document.cookie = \"loggedIn=true;Max-Age=60*1000\" + Enter The Max-Age property decides how long the cookie will live for/be valid for. This property is counted in milliseconds so if you want the cookie to last one minute, you have to use 60*1000 , (1000 milliseconds = 1 second; 1 second X 60 = 1 minute) . In React & Node world, we can use the cookie package to write simple cookies as well. It will look something like this: Setting cookies using the cookie package 1 2 3 4 5 6 7 8 9 10 11 12 import cookie from \"cookie\" ; // Or // const cookie = require(\"cookie\"); // Set a new cookie document . cookie = cookie . serialize ( \"loggedIn\" , \"true\" , { maxAge : 1000 * 60 }); // Delete a cookie document . cookie = cookie . serialize ( \"loggedIn\" , null , { maxAge : 0 }); // To check your new cookies console . log ( cookie . parse ( document . cookie )); The cookie.serialize() method takes in 3 parameters: the key , the value , then an Object that takes in some key/value pairs as options. The list of options when using the cookie package can be found here . Setting the maxAge attribute to 0, or a negative number, will delete the cookie from memory. So now we've set this cookie on Login which means at Logout we'll want to clear it. Keep this in mind as we move forward because we're going to continue working on the Login in portion for now. NOTE: Without the cookie package, we would need to do some extra work in order to get our cookies to be more readable and usable. By default, document.cookie will return a concatenated string with all our key/values separated by a semi-colon. This makes it hard for us to extract the right bit of information we need. The npm package, cookie , simplifies that process for us, making it more practical. Lets take a look at what it looks like to get a cookie without that cookie package. Cookies without NPM cookie - without comments 1 2 3 4 5 6 7 8 9 document . cookie = \"loggedin=true;Max-Age=1000*60\" ; document . cookie = \"anotherKey=anotherValue;Max-Age=1000*60\" ; let cookies = {}; document . cookie . split ( \";\" ). forEach (( el ) => { let keyValue = el . split ( \"=\" ); return ( cookies [ keyValue [ 0 ]] = keyValue [ 1 ]); }); Cookies without NPM cookie - with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Set some cookies document . cookie = \"loggedin=true;Max-Age=1000*60\" ; document . cookie = \"anotherKey=anotherValue;Max-Age=1000*60\" ; // Create an object called `cookies` which will be used to store our key / values AFTER we break them down let cookies = {}; // Get cookies by calling to the cookie method on the document: // \"document.cookie\" document . cookie // \"loggedin=true;anotherKey=anotherValue // Split that concatenated string of joined key/values at the semicolons // and place it into an array . split ( \";\" ) // returns [\"loggedin=false\", \"anotherKey=anotherValue\"] // For each element in our new Array of strings . forEach (( el ) => { // Split the element AT the \"equal\" sign let keyValue = el . split ( \"=\" ); // [\"loggedin\", \"false\"] // And for every element, we return a new key/value pair and attach it // to our cookies object we create first return ( cookies [ keyValue [ 0 ]] = keyValue [ 1 ]); // At the end we get an object with 2 key values, which is much easier // to work with: // {loggedin: \"true\", anotherKey: \"anotherValue\"} }); Want to know more about cookies and what you can do with them? Read this very detailed article on What Are Cookies .","title":"Cookies"},{"location":"module-2/protectedRoutes-intro/#practice-it","text":"","title":"Practice It"},{"location":"module-2/protectedRoutes-intro/#practice-section-instructions","text":"Open the sandbox above Navigate to the Route.js file and look at the comments Create a ProtectedRoute function where the commented line indicates Replace the use of Route with ProtectedRoute in the <Switch> component Do you see the components showing up? Use the address bar to navigate to the \"/about\" and \"/info\" pages. Do you see those? Replace the true with false in the checkAuth function. Are the components still showing up?","title":"Practice Section Instructions"},{"location":"module-2/protectedRoutes-intro/#additional-resources","text":"YT, Coding Addict - React Router 6 - Protected Route YT,Bro Code - WTF is a JavaScript \"cookie\"? \ud83c\udf6a Article, WhatAreCookies.com - What Are Cookies","title":"Additional Resources"},{"location":"module-2/protectedRoutes-intro/#know-your-docs","text":"React Training Docs - Navigate NPM Docs - cookie","title":"Know Your Docs"},{"location":"module-2/reactRouter-link/","text":"Creating Links to Update the URL Overview This BrowserRouter is pretty cool because it uses a Router component to Route to the correct view of a specific component according to the URL, but how does the URL get changed? Using Link Since Web 101 you've know that an <a> (anchor) tag is used to create hyperlinks on your site to get to a certain page in your website's folder, which typically look like this: <a href=\"/dash\">Go to Dashboard</a> . React Router provides its own linking mechanism that ensures interaction with our <Router> and <Routes> paths we created at the beginning of the homework. One of the great things about this component is that we can use it anywhere in our code. To do so, we need to import it first: import { Link } from 'react-router-dom' . (Maybe you're picking up on the pattern now?) Once imported we can use it in our code like this: SomeComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ...some import statements import { Link } from 'react-router-dom' // ...more import statements // Now just write in the Link component, tell it where \"to\" route and give it some text const SomeComponent = ( props ) => { < div > < h1 > Welcome to the SomeComponent Page < /h1> < p > There ' s lots to do and see here but if you want the full range of capabilities provided by this App , you need to checkout the < Link to = \"/dash\" > Dashboard Page < /Link> . < p > < /div> } export default SomeComponent Now, when a user clicks on the Dashboard Page link, the URL in the address bar will change, which will be picked up by the BrowserRouter component, which then calls the Router so the <Routes> component in the Router will return the correct component to the <BrowserRouter> \u2014in this case, <Dashboard/> . The Link component at its simplest, just takes a prop called to which represents the path you want to navigate to . EXTRA: You won't need this for tomorrow, but it's important to know that Links can send an object of properties through the to prop which makes them even more powerful. Take a look below: Example of Assigning an Object to the to prop in Link 1 2 3 4 5 6 7 8 < Link to = {{ pathname : \"/dash\" , search : \"?sort=name\" , hash : \"#the-hash\" , state : { fromHome : true } }} /> NOTE: We generally won't need this much flexibility but it's important to note the power of the Link component. You can read more about it at ReactTraining-Link . Know Your Docs React Training Docs - Link","title":"Router Link"},{"location":"module-2/reactRouter-link/#creating-links-to-update-the-url","text":"","title":"Creating Links to Update the URL"},{"location":"module-2/reactRouter-link/#overview","text":"This BrowserRouter is pretty cool because it uses a Router component to Route to the correct view of a specific component according to the URL, but how does the URL get changed?","title":"Overview"},{"location":"module-2/reactRouter-link/#using-link","text":"Since Web 101 you've know that an <a> (anchor) tag is used to create hyperlinks on your site to get to a certain page in your website's folder, which typically look like this: <a href=\"/dash\">Go to Dashboard</a> . React Router provides its own linking mechanism that ensures interaction with our <Router> and <Routes> paths we created at the beginning of the homework. One of the great things about this component is that we can use it anywhere in our code. To do so, we need to import it first: import { Link } from 'react-router-dom' . (Maybe you're picking up on the pattern now?) Once imported we can use it in our code like this: SomeComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ...some import statements import { Link } from 'react-router-dom' // ...more import statements // Now just write in the Link component, tell it where \"to\" route and give it some text const SomeComponent = ( props ) => { < div > < h1 > Welcome to the SomeComponent Page < /h1> < p > There ' s lots to do and see here but if you want the full range of capabilities provided by this App , you need to checkout the < Link to = \"/dash\" > Dashboard Page < /Link> . < p > < /div> } export default SomeComponent Now, when a user clicks on the Dashboard Page link, the URL in the address bar will change, which will be picked up by the BrowserRouter component, which then calls the Router so the <Routes> component in the Router will return the correct component to the <BrowserRouter> \u2014in this case, <Dashboard/> . The Link component at its simplest, just takes a prop called to which represents the path you want to navigate to . EXTRA: You won't need this for tomorrow, but it's important to know that Links can send an object of properties through the to prop which makes them even more powerful. Take a look below: Example of Assigning an Object to the to prop in Link 1 2 3 4 5 6 7 8 < Link to = {{ pathname : \"/dash\" , search : \"?sort=name\" , hash : \"#the-hash\" , state : { fromHome : true } }} /> NOTE: We generally won't need this much flexibility but it's important to note the power of the Link component. You can read more about it at ReactTraining-Link .","title":"Using Link"},{"location":"module-2/reactRouter-link/#know-your-docs","text":"React Training Docs - Link","title":"Know Your Docs"},{"location":"module-2/reactRouter/","text":"Intro to React Router The glow of one warm thought is to me worth more than money.\u2003\u2014Thomas Jefferson Overview What we've learned so far is great. It helps us build a dynamic single-page application (SPA), but so far our app literally just has one page. What if we want it to have more than one? Like a sign-up page, contact us page, products page, whatever!! That's where React Router comes in. With React Router we can control the URL in the address bar and tell our server to return the file that matches the URL we just changed it to. For instance: \"www.mywebsite.com/contactus\" might return the \"Contact Us\" page whereas \"www.mywebsite.com/signup\" might return the \"Sign Up\" page. Continue on to get the low down on how to make this work. Why Why use React Router? As we mentioned above, we use React Router to help us handle multiple routes in our URL. For example, every time you spin up your music dashboard app using npm start it sends the browser to the default path of the application in your computer ~/devFolder/musicApp/ , or simply, ~/ . Through the local port 3000 it shows up in your browser as \"http://localhost:3000/\" . But later, when we add a users page and want the route /users registered with our app's Router so the browser will navigate to the Users component that we built, we use React Router. Thus, we will have the following paths match the following components: / -> HomePage Component /users -> Users Component /users/0 -> UserDetails Component with the details of our first user React Router: The High Overview Video Breakdown App Demo What's going on How? Process Tools Used react-router-dom react-router Overview of components - (floating around able to be called by anyone) Go to index.js to see <App /> being called How to manage the shift between the two & Flow of functions in the functional programming heap of React-Router... reactDOM.render() <Main /> <BrowserRouter /> <Router /> <Routes /> <Route path=\"/mycomponentofchoice\" component={MyComponentOfChoice} /> <MyComponentOfChoice /> <Link to=\"/mycomponentofchoice\" /> Go to docs and install npm packages Installation npm i react-router react-router-dom Open up the React Router Docs: https://reactrouter.com/web/guides/quick-start VIDEO-NOTE-1: This video was recorded before React Router v6. We don't use <Switch> anymore. It is now <Routes> VIDEO-NOTE-2: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". See code snippet below. 1 2 3 4 5 6 import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < App /> ); VIDEO-NOTE-3: With React Router v6, after ReactDOM you'll import tools(functions) from only react-router-dom not react-router . What Install the Router Packages So how do we integrate React Router into our code? It's actually quite simple . . . it's an NPM package just like Material UI! Who would have thought?!? To install it in our project we just run the command npm i react-router react-router-dom inside our React app. This command installs two packages, as you may have noticed, react-router and react-router-dom. Go ahead and do that in your music app. It should be noted at this point that all forms of building front-end applications will need the use of a \"router\" of some shape and form. If you were building with Angular you'd need to use Angular's RouterModule and Routes . If you were building with Vue you'd need to use Vue Router . They all do the same job in their respective stacks, so while we're learning to build with React, let's use React Router . Creating the Router After installing the libraries/packages that make up the magic of React Router, we need to create a router, which really is just a function that, when called, returns the component it's assigned to. We start by creating a file called Router.js , usually right inside the src/ folder. Here's an example of a simple Router file: src/Router.js ```javascript import React from 'react'; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Here is where we are importing to the two main components we need from the React Router package. import { Routes, Route } from 'react-router-dom'; // Local imports. Import components we built ourselves import Home from './Home'; import Dashboard from './components/Dashboard'; import Profile from './components/Profile'; const Router = () => { return ( //Then we use Routes and Route. Routes acts like a regular JS Switch* Statement //depending on the path in the URL, one of these Routes will be returned and their component rendered <Routes> <Route path=\"/*\" element={<Home/>} /> <Route path=\"/dash\" element={<Dashboard/>} /> <Route path=\"/user/:id\" element={<Profile/>} /> </Routes> ); } //Don't forget to export your newly create Router component export default Router; ``` NOTE: When using the * at the end of a path it means to match deeply or exactly. We can only use * at the end of a path, make sure to never use it at the start or middle of a path(security errors will occur). You'll only need the trailing * when there is another <Routes> somewhere in that route's descendant tree. In that case, the descendant <Routes> will match on the portion of the pathname that remains. The Routes component always wraps multiple Route 's, so it is the single parent container this component returns. The Route 's are relative and help with leaner and more predictable code. Route 's are chosen based on the best match, not in order. You can put your Route 's in any order you like, the router will detect the best route for the current URL automatically. For readability if you want to start with \"home\" thats fine but nothing to worry about if you don't. NOTE: As we customize the \"Router\" component, keep in mind the Routes component bares an obvious resemblance in appearance and functionality to the switch() { case: } . In summary, Routes is telling the application, \"hey, look at all of the paths in this section to see if the current path in the browser matches any of these. If so, return the route that's connected to it.\" The Route then, is a component which specifies a combination of the correct relationship of \"path\" and \"component\". If the URL in the browser matches the path, then the Route sends the application to the correct component. In this case, /dash will load up the Dashboard component. You see the <Route> is the case: statement that says to do this when this is the case. Remember to Import the Components You Want to Use 1 2 3 4 5 6 // You need to use the Home component in the Route component you must import the Home component first import Home from './Home' < Routes > < Route path = \"/\" element = { < Home /> } /> < /Routes> This might seem obvious but it's an important piece to remember. Each of the components you want to use in your Router have to be imported so they're available/registered with the Router component. Also, notice that we used the Home component as the default route. If we're using Router we have to create a default case for the <Routes> component to return, because ALL components in React must return something !!! Rendering What Comes out of the Router Great, so we've created our Router file. Now what? Let's tell the application to use it! Remember, we created the file but haven't made the other parts of the application aware of it. The very first file of our app, the index.js file is our entry point into the app. Go to it and find the component it's currently using, which is most likely <App /> . We're going to make some renovations. Look below at the default setup of our app. Basic React index.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import React from 'react' ; import ReactDOM from 'react-dom/client' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; const root = ReactDOM . createRoot ( document . getElementById ( 'root' )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); NOTE: Don't worry about the reportWebVitals part. It is an API which we can learn to use later. Just focus on the steps ahead. As you probably guessed, we have to import things . . .The first (#1) is BrowserRouter . This, aptly named, package navigates the browser where we want it to. The second (#2) step we have to import is the Router component we just finished building. React index.js File with BrowserRouter & Our Router imported 1 2 3 4 5 6 7 8 9 10 11 import React from 'react' ; import ReactDOM from 'react-dom/client' ; // #1 import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; // #2 import Router from './Router' ; // ...more code below here... NOTE: The order in which packages and components are imported is not important to the app. The order is only important to you and your team, so find a style you like and develop it. In the example above you'll see package dependencies listed first, then styles, then components. Next, or #3 , we have to create a component to return this stuff for us. Let's call it Main and have it return <BrowserRouter> . Then stick our <Router /> component inside of it. This \"sticking\" inside is actually called \"wrapping\". We \"wrap\" the <BrowserRouter> around the <Router> so our entire application is encapsulated by the <BrowserRouter> . Newly Created Main Component in the index.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // ...more code above here... import Router from './Router' ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); // #3 const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ); root . render ( < App /> ); // ...more code about service worker blah blah below here... The fourth(#4) step is to use the \"wrap\". To do this we'll pass the Main component we just built to the root.render() method. Now our app's index.js file should look like this: Replaced <App /> with <Main /> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React from 'react' ; // #1 import ReactDOM from 'react-dom' ; import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import reportWebVitals from \"./reportWebVitals\" ; // We no longer need our App component to be imported here... // #2 import Router from './Router' ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); // #3 const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ); // #4 root . render ( < Main /> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); We call this \"wrapping\" stuff Higher Order Components or HOCs because, just like the Higher Order functions ( .map , .reduce , .filter ) you learned in 211, they take functions as their arguments and sometimes return functions: root.render() takes in Main which returns BrowserRouter which returns Router with returns one of the Routes which returns its appropriate component which then returns the JSX so the render can plug it into the DOM inside an element with the id \"root\" . Get it? If not, walk through that again slowly. Draw it out. Notes on this React Router/BrowserRouter stuff: Be sure to import { BrowserRouter } from 'react-router-dom' , Step 1 It is key that this { BrowserRouter } wraps our application because it is needed for the communication between our browser and our Router component. Additionally, when we take a look a the React Link component (coming up) we will learn that Link s can only be used inside of a \"router\" which BrowserRouter takes care of for us. Please note: You don't have to understand that right now, just start recognizing the pattern we are using above. Components return components that return components or, more simply, a function returns a function that returns a function. Functional programming! Remember to import your custom Router component, import Router from './Router' so it can be used in the index.js file, Step 2 . In Step 3 , we created a small component function called Main (you can call it something else if you like) and we wrapped our <Router /> inside the <BrowserRouter> </BrowserRouter> tags so the BrowserRouter component returns it. You may be thinking, \"couldn't we have just done that in the Router file?\". Yes, but this pattern will allow you to eventually add components around the router that you want to see on every page. For example, a Header and Footer component, like you see below: Example of Main Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const Main = () => ( < BrowserRouter > { /*You can use basic HTML elements to wrap your custom components so that you are in line with conventional semantic structural practices*/ } < header > < HeaderComponent /> < /header> < main > < Router /> { /* <-- See? Your different routes can be render here while still keeping the Header and Footer the same */ } < /main> < footer > < FooterComponent /> < /footer> < /BrowserRouter> ) But do NOTE that you may see slightly different patterns in other tutorials and that's perfectly fine. While you're learning, let's stick with this pattern. You can explore and diverge later on. Step 4 is simply replacing the call to App in root.render with the new Main function we just created. Once this step is done you should be able to load up your application and switch between the Home and Dashboard components by typing the corresponding URL in the browser. But of course, typing in that URL is annoying and you're definitely not asked to do that on anyone else's web site. To fix this let's learn how to use the Link part of React Router which is a programmatic way to switch the browser URL. Know Your Docs w3S Docs - Switch Statement w3S Docs - React Router React Training Docs - React Router React Router Docs - Quick Start React Router Docs - React Router v6 React Router Docs - Upgrading from v5","title":"React Router Intro"},{"location":"module-2/reactRouter/#intro-to-react-router","text":"The glow of one warm thought is to me worth more than money.\u2003\u2014Thomas Jefferson","title":"Intro to React Router"},{"location":"module-2/reactRouter/#overview","text":"What we've learned so far is great. It helps us build a dynamic single-page application (SPA), but so far our app literally just has one page. What if we want it to have more than one? Like a sign-up page, contact us page, products page, whatever!! That's where React Router comes in. With React Router we can control the URL in the address bar and tell our server to return the file that matches the URL we just changed it to. For instance: \"www.mywebsite.com/contactus\" might return the \"Contact Us\" page whereas \"www.mywebsite.com/signup\" might return the \"Sign Up\" page. Continue on to get the low down on how to make this work.","title":"Overview"},{"location":"module-2/reactRouter/#why","text":"Why use React Router? As we mentioned above, we use React Router to help us handle multiple routes in our URL. For example, every time you spin up your music dashboard app using npm start it sends the browser to the default path of the application in your computer ~/devFolder/musicApp/ , or simply, ~/ . Through the local port 3000 it shows up in your browser as \"http://localhost:3000/\" . But later, when we add a users page and want the route /users registered with our app's Router so the browser will navigate to the Users component that we built, we use React Router. Thus, we will have the following paths match the following components: / -> HomePage Component /users -> Users Component /users/0 -> UserDetails Component with the details of our first user React Router: The High Overview Video Breakdown App Demo What's going on How? Process Tools Used react-router-dom react-router Overview of components - (floating around able to be called by anyone) Go to index.js to see <App /> being called How to manage the shift between the two & Flow of functions in the functional programming heap of React-Router... reactDOM.render() <Main /> <BrowserRouter /> <Router /> <Routes /> <Route path=\"/mycomponentofchoice\" component={MyComponentOfChoice} /> <MyComponentOfChoice /> <Link to=\"/mycomponentofchoice\" /> Go to docs and install npm packages Installation npm i react-router react-router-dom Open up the React Router Docs: https://reactrouter.com/web/guides/quick-start VIDEO-NOTE-1: This video was recorded before React Router v6. We don't use <Switch> anymore. It is now <Routes> VIDEO-NOTE-2: This video was recorded before React v18 and the rendering method for React is now ReactDOM.createRoot() which is imported from \"react-dom/client\". See code snippet below. 1 2 3 4 5 6 import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < App /> ); VIDEO-NOTE-3: With React Router v6, after ReactDOM you'll import tools(functions) from only react-router-dom not react-router .","title":"Why"},{"location":"module-2/reactRouter/#what","text":"","title":"What"},{"location":"module-2/reactRouter/#install-the-router-packages","text":"So how do we integrate React Router into our code? It's actually quite simple . . . it's an NPM package just like Material UI! Who would have thought?!? To install it in our project we just run the command npm i react-router react-router-dom inside our React app. This command installs two packages, as you may have noticed, react-router and react-router-dom. Go ahead and do that in your music app. It should be noted at this point that all forms of building front-end applications will need the use of a \"router\" of some shape and form. If you were building with Angular you'd need to use Angular's RouterModule and Routes . If you were building with Vue you'd need to use Vue Router . They all do the same job in their respective stacks, so while we're learning to build with React, let's use React Router .","title":"Install the Router Packages"},{"location":"module-2/reactRouter/#creating-the-router","text":"After installing the libraries/packages that make up the magic of React Router, we need to create a router, which really is just a function that, when called, returns the component it's assigned to. We start by creating a file called Router.js , usually right inside the src/ folder. Here's an example of a simple Router file: src/Router.js ```javascript import React from 'react'; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Here is where we are importing to the two main components we need from the React Router package. import { Routes, Route } from 'react-router-dom'; // Local imports. Import components we built ourselves import Home from './Home'; import Dashboard from './components/Dashboard'; import Profile from './components/Profile'; const Router = () => { return ( //Then we use Routes and Route. Routes acts like a regular JS Switch* Statement //depending on the path in the URL, one of these Routes will be returned and their component rendered <Routes> <Route path=\"/*\" element={<Home/>} /> <Route path=\"/dash\" element={<Dashboard/>} /> <Route path=\"/user/:id\" element={<Profile/>} /> </Routes> ); } //Don't forget to export your newly create Router component export default Router; ``` NOTE: When using the * at the end of a path it means to match deeply or exactly. We can only use * at the end of a path, make sure to never use it at the start or middle of a path(security errors will occur). You'll only need the trailing * when there is another <Routes> somewhere in that route's descendant tree. In that case, the descendant <Routes> will match on the portion of the pathname that remains. The Routes component always wraps multiple Route 's, so it is the single parent container this component returns. The Route 's are relative and help with leaner and more predictable code. Route 's are chosen based on the best match, not in order. You can put your Route 's in any order you like, the router will detect the best route for the current URL automatically. For readability if you want to start with \"home\" thats fine but nothing to worry about if you don't. NOTE: As we customize the \"Router\" component, keep in mind the Routes component bares an obvious resemblance in appearance and functionality to the switch() { case: } . In summary, Routes is telling the application, \"hey, look at all of the paths in this section to see if the current path in the browser matches any of these. If so, return the route that's connected to it.\" The Route then, is a component which specifies a combination of the correct relationship of \"path\" and \"component\". If the URL in the browser matches the path, then the Route sends the application to the correct component. In this case, /dash will load up the Dashboard component. You see the <Route> is the case: statement that says to do this when this is the case. Remember to Import the Components You Want to Use 1 2 3 4 5 6 // You need to use the Home component in the Route component you must import the Home component first import Home from './Home' < Routes > < Route path = \"/\" element = { < Home /> } /> < /Routes> This might seem obvious but it's an important piece to remember. Each of the components you want to use in your Router have to be imported so they're available/registered with the Router component. Also, notice that we used the Home component as the default route. If we're using Router we have to create a default case for the <Routes> component to return, because ALL components in React must return something !!!","title":"Creating the Router"},{"location":"module-2/reactRouter/#rendering-what-comes-out-of-the-router","text":"Great, so we've created our Router file. Now what? Let's tell the application to use it! Remember, we created the file but haven't made the other parts of the application aware of it. The very first file of our app, the index.js file is our entry point into the app. Go to it and find the component it's currently using, which is most likely <App /> . We're going to make some renovations. Look below at the default setup of our app. Basic React index.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import React from 'react' ; import ReactDOM from 'react-dom/client' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; const root = ReactDOM . createRoot ( document . getElementById ( 'root' )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); NOTE: Don't worry about the reportWebVitals part. It is an API which we can learn to use later. Just focus on the steps ahead. As you probably guessed, we have to import things . . .The first (#1) is BrowserRouter . This, aptly named, package navigates the browser where we want it to. The second (#2) step we have to import is the Router component we just finished building. React index.js File with BrowserRouter & Our Router imported 1 2 3 4 5 6 7 8 9 10 11 import React from 'react' ; import ReactDOM from 'react-dom/client' ; // #1 import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; // #2 import Router from './Router' ; // ...more code below here... NOTE: The order in which packages and components are imported is not important to the app. The order is only important to you and your team, so find a style you like and develop it. In the example above you'll see package dependencies listed first, then styles, then components. Next, or #3 , we have to create a component to return this stuff for us. Let's call it Main and have it return <BrowserRouter> . Then stick our <Router /> component inside of it. This \"sticking\" inside is actually called \"wrapping\". We \"wrap\" the <BrowserRouter> around the <Router> so our entire application is encapsulated by the <BrowserRouter> . Newly Created Main Component in the index.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // ...more code above here... import Router from './Router' ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); // #3 const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ); root . render ( < App /> ); // ...more code about service worker blah blah below here... The fourth(#4) step is to use the \"wrap\". To do this we'll pass the Main component we just built to the root.render() method. Now our app's index.js file should look like this: Replaced <App /> with <Main /> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import React from 'react' ; // #1 import ReactDOM from 'react-dom' ; import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import reportWebVitals from \"./reportWebVitals\" ; // We no longer need our App component to be imported here... // #2 import Router from './Router' ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); // #3 const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ); // #4 root . render ( < Main /> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); We call this \"wrapping\" stuff Higher Order Components or HOCs because, just like the Higher Order functions ( .map , .reduce , .filter ) you learned in 211, they take functions as their arguments and sometimes return functions: root.render() takes in Main which returns BrowserRouter which returns Router with returns one of the Routes which returns its appropriate component which then returns the JSX so the render can plug it into the DOM inside an element with the id \"root\" . Get it? If not, walk through that again slowly. Draw it out.","title":"Rendering What Comes out of the Router"},{"location":"module-2/reactRouter/#notes-on-this-react-routerbrowserrouter-stuff","text":"Be sure to import { BrowserRouter } from 'react-router-dom' , Step 1 It is key that this { BrowserRouter } wraps our application because it is needed for the communication between our browser and our Router component. Additionally, when we take a look a the React Link component (coming up) we will learn that Link s can only be used inside of a \"router\" which BrowserRouter takes care of for us. Please note: You don't have to understand that right now, just start recognizing the pattern we are using above. Components return components that return components or, more simply, a function returns a function that returns a function. Functional programming! Remember to import your custom Router component, import Router from './Router' so it can be used in the index.js file, Step 2 . In Step 3 , we created a small component function called Main (you can call it something else if you like) and we wrapped our <Router /> inside the <BrowserRouter> </BrowserRouter> tags so the BrowserRouter component returns it. You may be thinking, \"couldn't we have just done that in the Router file?\". Yes, but this pattern will allow you to eventually add components around the router that you want to see on every page. For example, a Header and Footer component, like you see below: Example of Main Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const Main = () => ( < BrowserRouter > { /*You can use basic HTML elements to wrap your custom components so that you are in line with conventional semantic structural practices*/ } < header > < HeaderComponent /> < /header> < main > < Router /> { /* <-- See? Your different routes can be render here while still keeping the Header and Footer the same */ } < /main> < footer > < FooterComponent /> < /footer> < /BrowserRouter> ) But do NOTE that you may see slightly different patterns in other tutorials and that's perfectly fine. While you're learning, let's stick with this pattern. You can explore and diverge later on. Step 4 is simply replacing the call to App in root.render with the new Main function we just created. Once this step is done you should be able to load up your application and switch between the Home and Dashboard components by typing the corresponding URL in the browser. But of course, typing in that URL is annoying and you're definitely not asked to do that on anyone else's web site. To fix this let's learn how to use the Link part of React Router which is a programmatic way to switch the browser URL.","title":"Notes on this React Router/BrowserRouter stuff:"},{"location":"module-2/reactRouter/#know-your-docs","text":"w3S Docs - Switch Statement w3S Docs - React Router React Training Docs - React Router React Router Docs - Quick Start React Router Docs - React Router v6 React Router Docs - Upgrading from v5","title":"Know Your Docs"},{"location":"module-3/capstoneApp-planning-pt1/","text":"Capstone App Planning - Part 1 Push yourself, because no one else is going to do it for you. Overview For the past few classes we've talked about how to connect the client (frontend) to a server (back-end API). This connection is essential to providing the user with data. Often times the data provided to users comes from many APIs. Perhaps your app provides the user with good hunting land entrances from the database you control but you'd also like to give them relevant weather conditions. To do that it would be best to use another's weather API such as DarkSky , WeatherUnderground , or others . If you wanted other services like traffic, sunrise, water temps or water depth you'd need to bring in services from other APIs. Perhaps you can start to see how these relatively small apps can become very large projects. In the next few weeks you'll have class time dedicated to planning and building your Capstone App with the help of your instructor. It's important to understand that planning is more important than building/coding. Why? Because if you start coding your focus will be too narrow, just one line at a time. But if you start planning your focus is from higher up with an overview perspective of the app and you can make better decisions about what needs to done, when. Once you've planned from this higher perspective you can zoom into specific problems as you need to code them out but zoom back out when you need to see everything as a whole. It would be wise to think of this zooming in and zooming out process as a necessary skill you must practice to be successful at building not only your app for graduation but also when building software for a client or your company. System Design System design is the process of designing the elements of a system such as the architecture, modules and components, the different interfaces of those components and the data that goes through that system. System design is a high level view of what the application will look like, and how the application should work in the end. Read It - System Design System design can be broken up into 3 categories: the client, services, and database. The client is what we will focus on today as you've already built most of your database and server in 311. It should also be stated that system design is not React specific, it is for all applications and for any library or framework you choose to build in. These are some questions to consider when developing any client application. What does my app actually do? What core functions does my app perform to do this? How will the user interact with the app? How can I build the app so that it is scalable? This is to say, how can I plan to create variables to be referenced and reused by multiple parts of the system and how can I build components to be reused as much as possible? Also, how can I can make my app responsive? For a deeper understanding of System Design from a very high-level, read over this article on 10 Practical tips for Getting Your Clients Design System off to a Great Start . Practice It On a sheet of paper, design a login component to an application (maybe the one you've built already?). The app will need to have a: Sign-on page Service that checks if user is in database A home page after the user is authorized Seriously , take the time now to draw out on paper what the component looks like to the user. Then draw the services behind the component. Then draw the database. Now the server and the routes it will use to authorize the user. Then the logic of moving the user from the sign in to the home page. It doesn't matter what it looks like so long as you actually did it. The visualization of this process will help you build this in the future much, much faster!! And with less bugs and headaches Core Functionality Today will you be your first day to work with a teammate and your instructor to begin planning your Capstone App. Take the time now to WRITE your ideas, plan, functionalities, and diagrams out. Your teammate will do the same thing and you both can work much faster. In the next few classes and homeworks we'll work through steps for you to successfully and quickly build a Capstone App that demonstrates your programming abilities. Work through the first three now. Step 0: Pick an Idea, Pick a Partner By now you should have a reasonable idea of an app you\u2019d like to build for your Capstone Project. After all, you\u2019ve been pitching to your classmates what you\u2019d like to build and discussing with your instructors the app you\u2019d like to build, and building a database for it. For these last two weeks of your 400 level class, it would be best to partner with someone else, especially if you like frontend and they like backend or vice versa. Working with someone else will prove hugely beneficial for your first web app. Which brings us to the first and main point: This is your first web app! You\u2019re going to make mistakes. You\u2019re going to want to beat your head against the keyboard , you\u2019re going to struggle, and you may even cry. All of this is part of the process. After this app you\u2019ll have learned lessons you\u2019ll want to carry on with you to your next app and your next job. Good Coding Bad Coding No GIF What\u2019s important now is that you commit yourself to building, mentally and physically! Below you\u2019ll find a list of tasks for you to do that, if followed, will bring this figment of imagination in your mind to fruition, to the world, for all to see and use. You are about to embark on the truest gift of programmers: materializing previously unrealized ideas of solutions for the world to use. Step 1: List out the Core Functions of Your App Now that you\u2019ve decided on the app you want to build and the teammate you\u2019d like to have for this courageous adventure, let\u2019s list out the core features/functions of your app. To do this, think of the core functions of any app you use now like Twitter, Facebook, Reddit, SnapChat, YouTube, etc. For our sake, we\u2019ll use Reddit. Core Functions of Reddit users can create an account users can retrieve lost passwords users can change their passwords users can post new links users can comment on links users can upvote/downvote links users have a profile showing their history activity While we could name a few other functions, we are only naming CORE FUNCTIONALITY . Please don\u2019t stray away from these core functions. You are a beginner and all you need right now is to build your first app with simple CORE functionality. Once you\u2019ve built each of the functions you and your teammate list out in this step you can add new features on top. BUT NOT UNTIL AFTER YOU\u2019VE BUILT THE CORE FUNCTIONS. For an example of an actual Capstone Project, we\u2019ll use Budget App by Selena Solis and Nurzat Nijat. The purpose of this app was to easily translate and budget currency using the latest exchange rates for Nurzat, who just immigrated to the US and Selena who recently visited Iceland. At graduation, their app's functionality included: Users could create an account Users could sign in Users could create a budget Users could select the currency of their budget Users could enter an item and the cost in a specific currency The user\u2019s budget would be subtracted using the chosen currency I\u2019m sure after graduation they went on to add a few features like: multiple budgets, profiles, geolocation, password reset, and design. What\u2019s important here is that the app was functional at its core. So should yours. Step 2: Simplify Your Core Functionality s Please, please , please take time to look at your \u201ccore functionality\u201d and decide what you can cut. There are pieces that you\u2019ve listed that could easily be implemented later. Ask your teammate to take a serious look at the function you want your app to perform and decide what can wait for later. Capstone App Requirements Please refer to the Graduation Prerequisites for a complete list of requirements for your Graduation Presentation, Certification and Completion of this program.","title":"Capstone App pt.1"},{"location":"module-3/capstoneApp-planning-pt1/#capstone-app-planning-part-1","text":"Push yourself, because no one else is going to do it for you.","title":"Capstone App Planning - Part 1"},{"location":"module-3/capstoneApp-planning-pt1/#overview","text":"For the past few classes we've talked about how to connect the client (frontend) to a server (back-end API). This connection is essential to providing the user with data. Often times the data provided to users comes from many APIs. Perhaps your app provides the user with good hunting land entrances from the database you control but you'd also like to give them relevant weather conditions. To do that it would be best to use another's weather API such as DarkSky , WeatherUnderground , or others . If you wanted other services like traffic, sunrise, water temps or water depth you'd need to bring in services from other APIs. Perhaps you can start to see how these relatively small apps can become very large projects. In the next few weeks you'll have class time dedicated to planning and building your Capstone App with the help of your instructor. It's important to understand that planning is more important than building/coding. Why? Because if you start coding your focus will be too narrow, just one line at a time. But if you start planning your focus is from higher up with an overview perspective of the app and you can make better decisions about what needs to done, when. Once you've planned from this higher perspective you can zoom into specific problems as you need to code them out but zoom back out when you need to see everything as a whole. It would be wise to think of this zooming in and zooming out process as a necessary skill you must practice to be successful at building not only your app for graduation but also when building software for a client or your company.","title":"Overview"},{"location":"module-3/capstoneApp-planning-pt1/#system-design","text":"System design is the process of designing the elements of a system such as the architecture, modules and components, the different interfaces of those components and the data that goes through that system. System design is a high level view of what the application will look like, and how the application should work in the end.","title":"System Design"},{"location":"module-3/capstoneApp-planning-pt1/#read-it-system-design","text":"System design can be broken up into 3 categories: the client, services, and database. The client is what we will focus on today as you've already built most of your database and server in 311. It should also be stated that system design is not React specific, it is for all applications and for any library or framework you choose to build in. These are some questions to consider when developing any client application. What does my app actually do? What core functions does my app perform to do this? How will the user interact with the app? How can I build the app so that it is scalable? This is to say, how can I plan to create variables to be referenced and reused by multiple parts of the system and how can I build components to be reused as much as possible? Also, how can I can make my app responsive? For a deeper understanding of System Design from a very high-level, read over this article on 10 Practical tips for Getting Your Clients Design System off to a Great Start .","title":"Read It - System Design"},{"location":"module-3/capstoneApp-planning-pt1/#practice-it","text":"On a sheet of paper, design a login component to an application (maybe the one you've built already?). The app will need to have a: Sign-on page Service that checks if user is in database A home page after the user is authorized Seriously , take the time now to draw out on paper what the component looks like to the user. Then draw the services behind the component. Then draw the database. Now the server and the routes it will use to authorize the user. Then the logic of moving the user from the sign in to the home page. It doesn't matter what it looks like so long as you actually did it. The visualization of this process will help you build this in the future much, much faster!! And with less bugs and headaches","title":"Practice It"},{"location":"module-3/capstoneApp-planning-pt1/#core-functionality","text":"Today will you be your first day to work with a teammate and your instructor to begin planning your Capstone App. Take the time now to WRITE your ideas, plan, functionalities, and diagrams out. Your teammate will do the same thing and you both can work much faster. In the next few classes and homeworks we'll work through steps for you to successfully and quickly build a Capstone App that demonstrates your programming abilities. Work through the first three now.","title":"Core Functionality"},{"location":"module-3/capstoneApp-planning-pt1/#step-0-pick-an-idea-pick-a-partner","text":"By now you should have a reasonable idea of an app you\u2019d like to build for your Capstone Project. After all, you\u2019ve been pitching to your classmates what you\u2019d like to build and discussing with your instructors the app you\u2019d like to build, and building a database for it. For these last two weeks of your 400 level class, it would be best to partner with someone else, especially if you like frontend and they like backend or vice versa. Working with someone else will prove hugely beneficial for your first web app. Which brings us to the first and main point: This is your first web app! You\u2019re going to make mistakes. You\u2019re going to want to beat your head against the keyboard , you\u2019re going to struggle, and you may even cry. All of this is part of the process. After this app you\u2019ll have learned lessons you\u2019ll want to carry on with you to your next app and your next job. Good Coding Bad Coding No GIF What\u2019s important now is that you commit yourself to building, mentally and physically! Below you\u2019ll find a list of tasks for you to do that, if followed, will bring this figment of imagination in your mind to fruition, to the world, for all to see and use. You are about to embark on the truest gift of programmers: materializing previously unrealized ideas of solutions for the world to use.","title":"Step 0: Pick an Idea, Pick a Partner"},{"location":"module-3/capstoneApp-planning-pt1/#step-1-list-out-the-core-functions-of-your-app","text":"Now that you\u2019ve decided on the app you want to build and the teammate you\u2019d like to have for this courageous adventure, let\u2019s list out the core features/functions of your app. To do this, think of the core functions of any app you use now like Twitter, Facebook, Reddit, SnapChat, YouTube, etc. For our sake, we\u2019ll use Reddit.","title":"Step 1: List out the Core Functions of Your App"},{"location":"module-3/capstoneApp-planning-pt1/#core-functions-of-reddit","text":"users can create an account users can retrieve lost passwords users can change their passwords users can post new links users can comment on links users can upvote/downvote links users have a profile showing their history activity While we could name a few other functions, we are only naming CORE FUNCTIONALITY . Please don\u2019t stray away from these core functions. You are a beginner and all you need right now is to build your first app with simple CORE functionality. Once you\u2019ve built each of the functions you and your teammate list out in this step you can add new features on top. BUT NOT UNTIL AFTER YOU\u2019VE BUILT THE CORE FUNCTIONS. For an example of an actual Capstone Project, we\u2019ll use Budget App by Selena Solis and Nurzat Nijat. The purpose of this app was to easily translate and budget currency using the latest exchange rates for Nurzat, who just immigrated to the US and Selena who recently visited Iceland. At graduation, their app's functionality included: Users could create an account Users could sign in Users could create a budget Users could select the currency of their budget Users could enter an item and the cost in a specific currency The user\u2019s budget would be subtracted using the chosen currency I\u2019m sure after graduation they went on to add a few features like: multiple budgets, profiles, geolocation, password reset, and design. What\u2019s important here is that the app was functional at its core. So should yours.","title":"Core Functions of Reddit"},{"location":"module-3/capstoneApp-planning-pt1/#step-2-simplify-your-core-functionality","text":"s Please, please , please take time to look at your \u201ccore functionality\u201d and decide what you can cut. There are pieces that you\u2019ve listed that could easily be implemented later. Ask your teammate to take a serious look at the function you want your app to perform and decide what can wait for later.","title":"Step 2: Simplify Your Core Functionality"},{"location":"module-3/capstoneApp-planning-pt1/#capstone-app-requirements","text":"Please refer to the Graduation Prerequisites for a complete list of requirements for your Graduation Presentation, Certification and Completion of this program.","title":"Capstone App Requirements"},{"location":"module-3/class-10/","text":"Class 10: Redux, mapDispatchToProps Little things make big days. Greet, Outline, and Objectify OBJECTIVE - Today the student will learn and practice to understand: Managing global state of an application with Redux Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork & Clone the 411_wk5_day2_mapdispatchtoprops Repo Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we've learned with Redux Actions and mapDispatchToProps . We will use both of those to create a more interactive dashboard and watch as all the data on the site is related. Project Instructions Fork and clone the following repository: 411_wk5_day2_mapdispatchtoprops Follow the directions in the README to complete the project and upload the link to your GitHub repository to Zollege. The project directions are also summed up below: Getting Familiar with the Source Code (DON'T SKIP THIS) We're continuing to make make the Cars App more robust. This time we've added a pie chart, total, and the ability to add and remove cars. Take a minute to go through the following files (under the components folder): Dashboard.js Chart.js Total.js AddCar.js Also, make sure to run the app and go to the dashboard page to see these components in action. Keep in mind, there are things that aren't connected yet. That's what you've been hired to do! Project Work The first thing we need to do is create an actions.js file inside the redux/ folder. addCar Now, let's create an action creator called addCar that takes one parameter called car . Have it return an object who's type is ADD_CAR and its value: is the car parameter. Now we need to go to our reducers.js file and update the cars reducer. To start, give it a second parameter called action . This will represent whichever action is passed in on dispatch() . Now it's time to change this function and give it a switch/case statement. You can reference prior material for this but ultimately we want to switch on action.type , provide a case for ADD_CAR that returns a copy of the state array plus the new car ( [ ...state, action.value] ) and has a default case that simply returns the state for the mapsStateToProps function to use. We will be dispatching this action from the AddCar component so let's go hook that up now. Notice there is a Form that is collecting the Input data. It happens in a dialog box that appears when you click the \"Add Car\" button on the dashboard page. We need to create a smart container for this \"dumb\" component so that we can hook it up to Redux action creators. Create a file called AddCar.js inside the containers/ folder. Import the { connect } function at the top of the file like we have in the other containers. Then, import the AddCar component from the components/ folder. We also need to import the actions, so import { addCar } from the \"redux/actions\" file. Now we are going to write a mapDispatchToProps function. Remember, it takes one argument called dispatch and it returns an Object who's keys are the props you want to pass to the \"dumb\" component. It makes sense to create a key called addCar and we'll set its value to a function that dispatches our addCar action creator. It looks like this: (car) => dispatch(addCar(car)) . The car on the left will be passed from our component when we call this function during the Form submission. It will then be passed onto the inner addCar function. Remember to connect this function to the AddCar component and export it. A little tip this time, since there is no mapStateToProps function we need to pass null in its place. This is because the connect function expects the MSTP functions as the first parameter, ( see the docs ). So our export will look like this: export default connect(null, mapDispatchToProps)(AddCar) Now we will go to the Dashboard component and swap out the import at the top so that it calls the new AddCar smart \"container\" instead of the regular \"dumb\" component. Finally, go to the AddCar component and find the handleSubmit function. Pass that payload to our prop function. Basically, call this.props.addCar(payload) . Underneath that, call this.setState({ open: false }) to close the dialog box. The new car should be added to the bottom of the list. removeCar Ok we can add cars to our table but now we need to be able to remove them. There's a delete column on the table with a little \"trash can\" icon and when we click that we're going to want to remove an item from the list. The first step is adding a new action. Hopefully we're getting some of this repetition into our heads. Go to redux/actions.js and create a new function called removeCar . You can copy/paste ( Option + Shift + Down ) directly from the addUser function, however we want to change the parameter from car to index in both places. Also, (this may seem like a given) change the type to \"REMOVE_CAR\". Why are we changing car to index ? Because it's an easy way to remove an item from an array. If we know it's index , we can splice it. So this time we are going to pass an index value to the removeCar prop. Once that's done it's time to update our reducer again. Go to redux/reducers.js and make another case statement for REMOVE_CAR . In this one, create a copy of the state ( newState ) and then .splice() the index out of it. Finally, return the newState . If you forget, the \"splice\" function takes a starting index and a number of items to delete as its parameters so it will look like this: splice(action.value, 1) where action.value is the index we are passing. Ok, since the button we want to tie this to is in the Dashboard component and it already has a container . . . we don't need to create a new one. We do, however, need to go to containers/Dashboard.js and add the mapDispatchToProps function though. Do that right below that mapStateToProps one. This function should return an object with a key of removeCar and a value of (index) => dispatch(removeCar(index)) . Also, don't forget to import that { removeCar } action at the top of the file. We also need to ensure that we pass the mapDispatchToProps function to connect . Now that everything is hooked up we need to use our new action. In the Dashboard.js component, create an onClick method on the Icon (the last TableCell) that is a function. It should call props.removeCar with the index as the argument. The current index can be found in the beginning of the map function. Its value is idx . When you click the trash can icon the corresponding row should be removed. Is it working? If not, ask the your classmates to look over the code with you. Pie Chart & Total Now that we have that working we are going to practice what we learned last class and add containers and mapStateToProps functions for the Chart and Total components. Why? Because we want these to always have the current cars information. We'll see how this is useful in a second. Create a file called Total.js underneath the \"containers\" folder and create a mapStateToProps function. You can use the Car.js file as an example and simply change the component from Car to Total . Next, go to the Dashboard COMPONENT and change the import for Total to reference the container instead of the component. Ex. import Total from '../containers/Total' Finally, go to the Total.js file under the components folder and change the number 4 to {props.cars.length} . The total should now display \"20\". Go ahead and add and remove items from the table. Notice the total update in real time. This is something that wouldn't have been possible with normal React state because the information for Total lives in a different component. Components are meant to be re-usable so if we ever wanted to put this Total somewhere else in our application we could just import it and use it like in Dashboard and it will always have the correct cars data. Now we need to do the same thing for the Chart component. Create a file called Chart.js under containers and hook up the mapStateToProps function so that it has access to the cars prop. You can copy from Total and change the component names. Once again in Dashboard component, change the Chart import so that it points to the container. Finally, in components/Chart.js above the return statement, create two variables called over and under . Use the filter method to filter the props.cars for car s whose horsepower match the criteria. Then use those values in the corresponding Pie Chart. They will be over.length and under.length . You should see 4 (in red) over 200 and 16 (in orange) under 200. But wait . . . since this data is connected to Redux it will change according to our actions. So go ahead and delete 3 cars whose horsepower is under 200. Did you see the chart change? Again, since Dashboard, Chart and Total are all referencing the same data . . . they will always be in sync. The addition of the Pie Chart will always equal the total. One more thing, when you remove a car from the list you can also go to the homepage and notice that its card has also been removed. Pretty cool, huh? It's all tied together. Follow-Up Video: YT, Net Ninja - Redux: mapDispatchToProps Push Yourself Further Go back and finish this this tutorial from last class if you haven't already. You may have gotten stuck on some of the topics like mapDispatchToProps after last class but you shouldn't anymore. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Redux-Dashboard Assignment Create Class 10 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 10 Redux MDTP"},{"location":"module-3/class-10/#class-10-redux-mapdispatchtoprops","text":"Little things make big days.","title":"Class 10: Redux, mapDispatchToProps"},{"location":"module-3/class-10/#greet-outline-and-objectify","text":"OBJECTIVE - Today the student will learn and practice to understand: Managing global state of an application with Redux Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork & Clone the 411_wk5_day2_mapdispatchtoprops Repo Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-10/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-10/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-10/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-10/#creation-time-60-90-mins","text":"Today we are going to practice what we've learned with Redux Actions and mapDispatchToProps . We will use both of those to create a more interactive dashboard and watch as all the data on the site is related.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-10/#project-instructions","text":"Fork and clone the following repository: 411_wk5_day2_mapdispatchtoprops Follow the directions in the README to complete the project and upload the link to your GitHub repository to Zollege. The project directions are also summed up below:","title":"Project Instructions"},{"location":"module-3/class-10/#getting-familiar-with-the-source-code-dont-skip-this","text":"We're continuing to make make the Cars App more robust. This time we've added a pie chart, total, and the ability to add and remove cars. Take a minute to go through the following files (under the components folder): Dashboard.js Chart.js Total.js AddCar.js Also, make sure to run the app and go to the dashboard page to see these components in action. Keep in mind, there are things that aren't connected yet. That's what you've been hired to do!","title":"Getting Familiar with the Source Code (DON'T SKIP THIS)"},{"location":"module-3/class-10/#project-work","text":"The first thing we need to do is create an actions.js file inside the redux/ folder.","title":"Project Work"},{"location":"module-3/class-10/#addcar","text":"Now, let's create an action creator called addCar that takes one parameter called car . Have it return an object who's type is ADD_CAR and its value: is the car parameter. Now we need to go to our reducers.js file and update the cars reducer. To start, give it a second parameter called action . This will represent whichever action is passed in on dispatch() . Now it's time to change this function and give it a switch/case statement. You can reference prior material for this but ultimately we want to switch on action.type , provide a case for ADD_CAR that returns a copy of the state array plus the new car ( [ ...state, action.value] ) and has a default case that simply returns the state for the mapsStateToProps function to use. We will be dispatching this action from the AddCar component so let's go hook that up now. Notice there is a Form that is collecting the Input data. It happens in a dialog box that appears when you click the \"Add Car\" button on the dashboard page. We need to create a smart container for this \"dumb\" component so that we can hook it up to Redux action creators. Create a file called AddCar.js inside the containers/ folder. Import the { connect } function at the top of the file like we have in the other containers. Then, import the AddCar component from the components/ folder. We also need to import the actions, so import { addCar } from the \"redux/actions\" file. Now we are going to write a mapDispatchToProps function. Remember, it takes one argument called dispatch and it returns an Object who's keys are the props you want to pass to the \"dumb\" component. It makes sense to create a key called addCar and we'll set its value to a function that dispatches our addCar action creator. It looks like this: (car) => dispatch(addCar(car)) . The car on the left will be passed from our component when we call this function during the Form submission. It will then be passed onto the inner addCar function. Remember to connect this function to the AddCar component and export it. A little tip this time, since there is no mapStateToProps function we need to pass null in its place. This is because the connect function expects the MSTP functions as the first parameter, ( see the docs ). So our export will look like this: export default connect(null, mapDispatchToProps)(AddCar) Now we will go to the Dashboard component and swap out the import at the top so that it calls the new AddCar smart \"container\" instead of the regular \"dumb\" component. Finally, go to the AddCar component and find the handleSubmit function. Pass that payload to our prop function. Basically, call this.props.addCar(payload) . Underneath that, call this.setState({ open: false }) to close the dialog box. The new car should be added to the bottom of the list.","title":"addCar"},{"location":"module-3/class-10/#removecar","text":"Ok we can add cars to our table but now we need to be able to remove them. There's a delete column on the table with a little \"trash can\" icon and when we click that we're going to want to remove an item from the list. The first step is adding a new action. Hopefully we're getting some of this repetition into our heads. Go to redux/actions.js and create a new function called removeCar . You can copy/paste ( Option + Shift + Down ) directly from the addUser function, however we want to change the parameter from car to index in both places. Also, (this may seem like a given) change the type to \"REMOVE_CAR\". Why are we changing car to index ? Because it's an easy way to remove an item from an array. If we know it's index , we can splice it. So this time we are going to pass an index value to the removeCar prop. Once that's done it's time to update our reducer again. Go to redux/reducers.js and make another case statement for REMOVE_CAR . In this one, create a copy of the state ( newState ) and then .splice() the index out of it. Finally, return the newState . If you forget, the \"splice\" function takes a starting index and a number of items to delete as its parameters so it will look like this: splice(action.value, 1) where action.value is the index we are passing. Ok, since the button we want to tie this to is in the Dashboard component and it already has a container . . . we don't need to create a new one. We do, however, need to go to containers/Dashboard.js and add the mapDispatchToProps function though. Do that right below that mapStateToProps one. This function should return an object with a key of removeCar and a value of (index) => dispatch(removeCar(index)) . Also, don't forget to import that { removeCar } action at the top of the file. We also need to ensure that we pass the mapDispatchToProps function to connect . Now that everything is hooked up we need to use our new action. In the Dashboard.js component, create an onClick method on the Icon (the last TableCell) that is a function. It should call props.removeCar with the index as the argument. The current index can be found in the beginning of the map function. Its value is idx . When you click the trash can icon the corresponding row should be removed. Is it working? If not, ask the your classmates to look over the code with you.","title":"removeCar"},{"location":"module-3/class-10/#pie-chart-total","text":"Now that we have that working we are going to practice what we learned last class and add containers and mapStateToProps functions for the Chart and Total components. Why? Because we want these to always have the current cars information. We'll see how this is useful in a second. Create a file called Total.js underneath the \"containers\" folder and create a mapStateToProps function. You can use the Car.js file as an example and simply change the component from Car to Total . Next, go to the Dashboard COMPONENT and change the import for Total to reference the container instead of the component. Ex. import Total from '../containers/Total' Finally, go to the Total.js file under the components folder and change the number 4 to {props.cars.length} . The total should now display \"20\". Go ahead and add and remove items from the table. Notice the total update in real time. This is something that wouldn't have been possible with normal React state because the information for Total lives in a different component. Components are meant to be re-usable so if we ever wanted to put this Total somewhere else in our application we could just import it and use it like in Dashboard and it will always have the correct cars data. Now we need to do the same thing for the Chart component. Create a file called Chart.js under containers and hook up the mapStateToProps function so that it has access to the cars prop. You can copy from Total and change the component names. Once again in Dashboard component, change the Chart import so that it points to the container. Finally, in components/Chart.js above the return statement, create two variables called over and under . Use the filter method to filter the props.cars for car s whose horsepower match the criteria. Then use those values in the corresponding Pie Chart. They will be over.length and under.length . You should see 4 (in red) over 200 and 16 (in orange) under 200. But wait . . . since this data is connected to Redux it will change according to our actions. So go ahead and delete 3 cars whose horsepower is under 200. Did you see the chart change? Again, since Dashboard, Chart and Total are all referencing the same data . . . they will always be in sync. The addition of the Pie Chart will always equal the total. One more thing, when you remove a car from the list you can also go to the homepage and notice that its card has also been removed. Pretty cool, huh? It's all tied together. Follow-Up Video: YT, Net Ninja - Redux: mapDispatchToProps","title":"Pie Chart &amp; Total"},{"location":"module-3/class-10/#push-yourself-further","text":"Go back and finish this this tutorial from last class if you haven't already. You may have gotten stuck on some of the topics like mapDispatchToProps after last class but you shouldn't anymore.","title":"Push Yourself Further"},{"location":"module-3/class-10/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-10/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-10/#exit-recap-attendance-and-reminders-5-mins","text":"Create Redux-Dashboard Assignment Create Class 10 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-11/","text":"Class 11: Redux Thunk Do something today that your future self will thank you for. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Asynchronous calls with Redux-Thunk Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Redux-Thunk Repo Push Yourself Further - Material UI Practice w/ Pagination Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to create a mock-import utility that we can use in our cars application. We will use Redux Thunk to hit an API that brings back cars data. We will then allow the user to delete each import. We also want to keep a current count of the imported cars. Some images below will show what the webpage should look like. Examples One Two Three Project Instructions Fork and clone the Redux-Thunk Repo Follow the directions in the README.md to complete the project. The project directions are also summed up below: A lot of the Material UI documentation has been updated to support the new React feature called Hooks. We will not dive deep into the topic in this class but watch this video to understand what's going on because you likely ran across some documentation regarding hooks while building out your table for the import page, and as you move forward in your new career you will very likely see hooks. Follow-Up Video: YT, TraversyMedia - React Hooks Intro Push Yourself Further When you've finished the project for this class you'll notice that the table is very long and you have to scroll for a bit before you get to the bottom of it. Imagine if it were 2 or 3 times that size. Imagine if there were 1000 rows. This provides a bad user experience. Reference the documentation from Material UI below and see if you can add pagination to the import table. Material UI Pagination Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Redux-Thunk Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 11 Redux-Thunk"},{"location":"module-3/class-11/#class-11-redux-thunk","text":"Do something today that your future self will thank you for.","title":"Class 11: Redux Thunk"},{"location":"module-3/class-11/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Asynchronous calls with Redux-Thunk Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Redux-Thunk Repo Push Yourself Further - Material UI Practice w/ Pagination Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-11/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-11/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-11/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-11/#creation-time-60-90-mins","text":"Today we are going to create a mock-import utility that we can use in our cars application. We will use Redux Thunk to hit an API that brings back cars data. We will then allow the user to delete each import. We also want to keep a current count of the imported cars. Some images below will show what the webpage should look like.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-11/#examples","text":"One Two Three","title":"Examples"},{"location":"module-3/class-11/#project-instructions","text":"Fork and clone the Redux-Thunk Repo Follow the directions in the README.md to complete the project. The project directions are also summed up below: A lot of the Material UI documentation has been updated to support the new React feature called Hooks. We will not dive deep into the topic in this class but watch this video to understand what's going on because you likely ran across some documentation regarding hooks while building out your table for the import page, and as you move forward in your new career you will very likely see hooks. Follow-Up Video: YT, TraversyMedia - React Hooks Intro","title":"Project Instructions"},{"location":"module-3/class-11/#push-yourself-further","text":"When you've finished the project for this class you'll notice that the table is very long and you have to scroll for a bit before you get to the bottom of it. Imagine if it were 2 or 3 times that size. Imagine if there were 1000 rows. This provides a bad user experience. Reference the documentation from Material UI below and see if you can add pagination to the import table. Material UI Pagination","title":"Push Yourself Further"},{"location":"module-3/class-11/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-11/#exit-recap-attendance-and-reminders-5-mins","text":"Create Redux-Thunk Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-12/","text":"Class 12: React Hooks + Capstone Project Planning Far and way, ther is no greater gift life offers than the chance to work hard at work worth doing. - Teddy Roosevelt Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: s Planning an app's needs using their Capstone Project Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Complete the 3 steps from the pre-homework with your teammate. Create a CapstonePlanning branch for the assignment due after class. Look ahead and work on Day 13 if you have time. Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins While you might not code much today it is not a simple, boring, or free day. You should use the time you have today with your teammates and instructor to plan out your Capstone Project App. Today is a day for you to think more about the frontend of your Capstone App. You should already have some ideas and preferably something started but if you don't, please do that today. There are no examples, project instructions or follow-up in today's lesson. Just use this time wisely and ask the instructor if you have any questions on the implementation of your project. With your teammate: List out the core functions of your Capstone App Compare lists and trim out unnecessary functions Agree upon the core functions together. Next, draw out the look of your app. What components will you need? Build a Trello Board for both of you to thoughtfully build your app Begin adding to the Trello board the steps you KNOW you have to do. YOU SHOULD NOT BE CODING YET. Here are few quotes to inspire your work today: A computer program does what you tell it to do, not what you want it to do. First, solve the problem. Then, write the code. \u2014John Johnson Measuring programming progress by lines of code is like measuring aircraft building progress by weight. \u2014Bill Gates When debugging, novices insert corrective code; experts remove defective code. \u2014Richard Pattis Without requirements or design, programming is the art of adding bugs to an empty \"text\" file. \u2014Louis Srygley and finally... Weeks of coding can save you hours of planning. Project Instructions 30 minutes in pairs, writing and drawing system requirements for each student's app. 30 minutes of volunteers at the board working with the instructor to design and plan their app. Rest of class dedicated to students back in pairs writing and drawing their plans together. Go to the blank sign-in component that's connected to your 311 Server and make a new branch called CapstonePlanning . Be sure you're only using one repo and not both of your teammates' repos! Take pictures of your drawings and add them to a folder in that repo called planningImages Next add the list Core Functions to a README.md file. Turn in the pull request as your CapstonePlanning assignment for today. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 12 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 12"},{"location":"module-3/class-12/#class-12-react-hooks-capstone-project-planning","text":"Far and way, ther is no greater gift life offers than the chance to work hard at work worth doing. - Teddy Roosevelt","title":"Class 12: React Hooks + Capstone Project Planning"},{"location":"module-3/class-12/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: s Planning an app's needs using their Capstone Project Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Complete the 3 steps from the pre-homework with your teammate. Create a CapstonePlanning branch for the assignment due after class. Look ahead and work on Day 13 if you have time. Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-12/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-12/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-12/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-12/#creation-time-60-90-mins","text":"While you might not code much today it is not a simple, boring, or free day. You should use the time you have today with your teammates and instructor to plan out your Capstone Project App. Today is a day for you to think more about the frontend of your Capstone App. You should already have some ideas and preferably something started but if you don't, please do that today. There are no examples, project instructions or follow-up in today's lesson. Just use this time wisely and ask the instructor if you have any questions on the implementation of your project. With your teammate: List out the core functions of your Capstone App Compare lists and trim out unnecessary functions Agree upon the core functions together. Next, draw out the look of your app. What components will you need? Build a Trello Board for both of you to thoughtfully build your app Begin adding to the Trello board the steps you KNOW you have to do. YOU SHOULD NOT BE CODING YET. Here are few quotes to inspire your work today: A computer program does what you tell it to do, not what you want it to do. First, solve the problem. Then, write the code. \u2014John Johnson Measuring programming progress by lines of code is like measuring aircraft building progress by weight. \u2014Bill Gates When debugging, novices insert corrective code; experts remove defective code. \u2014Richard Pattis Without requirements or design, programming is the art of adding bugs to an empty \"text\" file. \u2014Louis Srygley and finally... Weeks of coding can save you hours of planning.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-12/#project-instructions","text":"30 minutes in pairs, writing and drawing system requirements for each student's app. 30 minutes of volunteers at the board working with the instructor to design and plan their app. Rest of class dedicated to students back in pairs writing and drawing their plans together. Go to the blank sign-in component that's connected to your 311 Server and make a new branch called CapstonePlanning . Be sure you're only using one repo and not both of your teammates' repos! Take pictures of your drawings and add them to a folder in that repo called planningImages Next add the list Core Functions to a README.md file. Turn in the pull request as your CapstonePlanning assignment for today.","title":"Project Instructions"},{"location":"module-3/class-12/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-12/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-12/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 12 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-9/","text":"Class 9: Redux, mapStateToProps Success doesn\u2019t just find you. You have to go out and get it. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Global state over an application using Redux Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork & Clone the Wk5 Day1 Repo Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we learned with Redux and mapStateToProps. We will use mapStateToProps functions to create containers and then reference the global state in our components. Fork and clone the following repository: 411_wk5_day1_mapstatetoprops . Follow the directions in the README to complete the project and upload the link to your GitHub repository to the appropriate assignment. The project directions are also summed up below: Follow-Up Two things before you watch this video: This guy is writing the component and container is the same file. He explains it. We aren't following that pattern you might see code organized this way in the future. We don't need bindActionCreators . You'll see him import it. YT, Thenewboston, ReactJS/Redux Tutorial Push Yourself Further Follow along and build with this Medium tutorial about React with Redux Thunk . He is introducing a couple topics we haven't talked about yet (in relation to Redux) like thunk but don't worry we will get to that stuff soon. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 9 Redux MSTP"},{"location":"module-3/class-9/#class-9-redux-mapstatetoprops","text":"Success doesn\u2019t just find you. You have to go out and get it.","title":"Class 9: Redux, mapStateToProps"},{"location":"module-3/class-9/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Global state over an application using Redux Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork & Clone the Wk5 Day1 Repo Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-9/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-9/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-9/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-9/#creation-time-60-90-mins","text":"Today we are going to practice what we learned with Redux and mapStateToProps. We will use mapStateToProps functions to create containers and then reference the global state in our components. Fork and clone the following repository: 411_wk5_day1_mapstatetoprops . Follow the directions in the README to complete the project and upload the link to your GitHub repository to the appropriate assignment. The project directions are also summed up below:","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-9/#follow-up","text":"Two things before you watch this video: This guy is writing the component and container is the same file. He explains it. We aren't following that pattern you might see code organized this way in the future. We don't need bindActionCreators . You'll see him import it. YT, Thenewboston, ReactJS/Redux Tutorial","title":"Follow-Up"},{"location":"module-3/class-9/#push-yourself-further","text":"Follow along and build with this Medium tutorial about React with Redux Thunk . He is introducing a couple topics we haven't talked about yet (in relation to Redux) like thunk but don't worry we will get to that stuff soon.","title":"Push Yourself Further"},{"location":"module-3/class-9/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-9/#exit-recap-attendance-and-reminders-5-mins","text":"Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/reactHooks-intro/","text":"Capstone Time Happiness is not something you postpone for the future; it is something you design for the present.\u2003\u2014Jim Rohn Your Responsibility We've learned so much about front-end development with React over the course of the last six weeks. Next class will be a day to work on your final projects,There will not be an assignment on it. Take the time to work on your Capstone Project before tomorrow's class. You're very near completion of this course and of this program. you only have a few weeks left then you'll be graduating. This is where many students stumble, getting lost in the learning and not putting energy toward the building. Don't be that student! You will have a few class days to work with your instructor but most of the time you have will be on you to block out. Start planning now on when you will complete your Capstone App during and after this class until graduation. Remember, when you sign a contract with a company you're only making a deal to exchange your skills and time for money. So you're employer will want to know you can build during that time. Your Capstone project is your first piece of original work that proves you can do this work. Talk to yourself, calm yourself, focus yourself and go get some.","title":"React Hooks"},{"location":"module-3/reactHooks-intro/#capstone-time","text":"Happiness is not something you postpone for the future; it is something you design for the present.\u2003\u2014Jim Rohn","title":"Capstone Time"},{"location":"module-3/reactHooks-intro/#your-responsibility","text":"We've learned so much about front-end development with React over the course of the last six weeks. Next class will be a day to work on your final projects,There will not be an assignment on it. Take the time to work on your Capstone Project before tomorrow's class. You're very near completion of this course and of this program. you only have a few weeks left then you'll be graduating. This is where many students stumble, getting lost in the learning and not putting energy toward the building. Don't be that student! You will have a few class days to work with your instructor but most of the time you have will be on you to block out. Start planning now on when you will complete your Capstone App during and after this class until graduation. Remember, when you sign a contract with a company you're only making a deal to exchange your skills and time for money. So you're employer will want to know you can build during that time. Your Capstone project is your first piece of original work that proves you can do this work. Talk to yourself, calm yourself, focus yourself and go get some.","title":"Your Responsibility"},{"location":"module-3/redux-actions/","text":"Redux Actions All you need is the plan, the road map, and the courage to press on to your destination.\u2003\u2014Earl Nightingale Review and Recap Last week we learned how to use a plain object in a state.js file, functions in a reducer.js file and the Redux tools combineReducers and <Provider /> to create a global state for our application that acts as a central data storage, or a single source of truth , for all of our app's components. Then we learned how to the data in in this global state to each component by wrapping them with another component/function with mapStateToProps . This process keeps all components in the app in sync with the same set of data so there is no confusion. But now, we wonder how me might change the global state from a local component. How does a component get access to update a global state? The solution is a function called: mapDispatchToProps . Notice the similarity to mapStateToProps ? Overview We're continuing our learning of Redux because it's a great way to make sure all of our components share the same state. Remember, Redux doesn't actually do anything visually for the user of the application. This is all for the developer right now. Redux is strictly for data management. It will eventually allow you to do cool things like update charts instantaneously when data changes. Remember in your music controller app? If your volume component changed the global state of your app you might be able to create another component at the bottom of the dashboard that represented the amount of volume the user selected in a graph. If you're controlling data with Redux you can keep that data in one place but trigger the alert to your user that \"loud volume may cause hearing loss\" while also updating the chart to represent the level they chose. Again, Redux is a data management system for us developers to do cool things across the application using one source of truth. So any direct benefit to the user comes with the fact that Redux allows us to develop more complex applications. Also, keep this in mind . . . Redux is not completely replacing local state . If you want a component to be able to toggle between two states, for example on/off, you can still use: 1 2 3 4 5 state = { on : true } // ...more code...this.setState({ on: !this.state.on }) In the above code, this component, and only this component, will have access to this.state.on . Redux is for when you want to share a central state data across multiple components. It's important that we are clear on the difference there. See It - ActionCreators & mapDispatchToProps Actions The first thing we need to build so our components can update/mutate state is create something called Redux Actions . Actions are simply JavaScript Objects. They typically have two properties (although you may see others), a type and a value . They look like this: A Redux Action 1 2 3 4 const addCar = { type : 'ADD_CAR' , value : 'Tesla Model Y' } Spelling the value of type in capital letters, like 'ADD_CAR' is a Redux convention. It lets other developers on your application know that you are using Redux. The value of value is whatever you want to update your state with. NOTE: Another common practice is to use the key name payload instead of value for the simple verbalization trickery. \"What is the value of payload ?\" is easier to say than \"What is the value of value ?\" Nevertheless, we'll use value for this lesson... Furthermore, it has become less common to use plain actions (seen above, a simple JS Object). Instead, we build Action Creators . Action creators are simply functions that return an action. That means, its just a JS Function that returns and JS Object. So instead of the syntax above, we change it to: Action Creator function 1 2 3 4 5 6 const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } As you can see, it's just a function that returns an object. But why? Well. . . take a look at the action creator above and notice that it has an argument, newCar . With action creators we can pass options to our action creating functions and have them return different things each time they're called. This is more powerful than plain action objects because it can dynamically respond to user's input. We will be using Action Creators going forward. Finally, the last thing you need to know about actions is that they correspond to a certain piece of the global state. Only you, the developer, get to decide what corresponds to what. So for example, we have an action called ADD_CAR above. It makes sense that we would use this action to update the cars property in state. Remember this example from our last pre-work: Global State - redux/state.js 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] } We want to make actions that make sense for our data model. Since cars is an array, two common operations would be add to and remove a car from the array. So cars might have the following actions: ADD_CAR - push a new car value on to the array. REMOVE_CAR - delete a particular car from the array. Likewise for the user property. It's null right now but it could probably represent an Object or maybe just a plain String. Either way, actions that make sense for this property would be: SET_USER - set which user is signed in right now. UNSET_USER - remove the user at sign-out. Again, the CAPITALIZED_UNDERSCORE naming convention is a Redux convention. You get to name these as you like, so make sure they make sense to you and other developers. Remember, code is NOT what a computer reads. Code is what humans read. Final note about action creators: they all go in a single file called redux/actions.js (inside of the \"redux\" folder) like below. redux/actions.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 export const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } export const setUser = ( newUser ) => { return { type : 'SET_USER' , value : newUser } } export const unsetUser = ( index ) => { return { type : 'UNSET_USER' , value : index } } The next step is to update our Reducer functions to accept and respond to these incoming Action Objects.","title":"Redux Actions"},{"location":"module-3/redux-actions/#redux-actions","text":"All you need is the plan, the road map, and the courage to press on to your destination.\u2003\u2014Earl Nightingale","title":"Redux Actions"},{"location":"module-3/redux-actions/#review-and-recap","text":"Last week we learned how to use a plain object in a state.js file, functions in a reducer.js file and the Redux tools combineReducers and <Provider /> to create a global state for our application that acts as a central data storage, or a single source of truth , for all of our app's components. Then we learned how to the data in in this global state to each component by wrapping them with another component/function with mapStateToProps . This process keeps all components in the app in sync with the same set of data so there is no confusion. But now, we wonder how me might change the global state from a local component. How does a component get access to update a global state? The solution is a function called: mapDispatchToProps . Notice the similarity to mapStateToProps ?","title":"Review and Recap"},{"location":"module-3/redux-actions/#overview","text":"We're continuing our learning of Redux because it's a great way to make sure all of our components share the same state. Remember, Redux doesn't actually do anything visually for the user of the application. This is all for the developer right now. Redux is strictly for data management. It will eventually allow you to do cool things like update charts instantaneously when data changes. Remember in your music controller app? If your volume component changed the global state of your app you might be able to create another component at the bottom of the dashboard that represented the amount of volume the user selected in a graph. If you're controlling data with Redux you can keep that data in one place but trigger the alert to your user that \"loud volume may cause hearing loss\" while also updating the chart to represent the level they chose. Again, Redux is a data management system for us developers to do cool things across the application using one source of truth. So any direct benefit to the user comes with the fact that Redux allows us to develop more complex applications. Also, keep this in mind . . . Redux is not completely replacing local state . If you want a component to be able to toggle between two states, for example on/off, you can still use: 1 2 3 4 5 state = { on : true } // ...more code...this.setState({ on: !this.state.on }) In the above code, this component, and only this component, will have access to this.state.on . Redux is for when you want to share a central state data across multiple components. It's important that we are clear on the difference there.","title":"Overview"},{"location":"module-3/redux-actions/#see-it-actioncreators-mapdispatchtoprops","text":"","title":"See It - ActionCreators &amp; mapDispatchToProps"},{"location":"module-3/redux-actions/#actions","text":"The first thing we need to build so our components can update/mutate state is create something called Redux Actions . Actions are simply JavaScript Objects. They typically have two properties (although you may see others), a type and a value . They look like this: A Redux Action 1 2 3 4 const addCar = { type : 'ADD_CAR' , value : 'Tesla Model Y' } Spelling the value of type in capital letters, like 'ADD_CAR' is a Redux convention. It lets other developers on your application know that you are using Redux. The value of value is whatever you want to update your state with. NOTE: Another common practice is to use the key name payload instead of value for the simple verbalization trickery. \"What is the value of payload ?\" is easier to say than \"What is the value of value ?\" Nevertheless, we'll use value for this lesson... Furthermore, it has become less common to use plain actions (seen above, a simple JS Object). Instead, we build Action Creators . Action creators are simply functions that return an action. That means, its just a JS Function that returns and JS Object. So instead of the syntax above, we change it to: Action Creator function 1 2 3 4 5 6 const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } As you can see, it's just a function that returns an object. But why? Well. . . take a look at the action creator above and notice that it has an argument, newCar . With action creators we can pass options to our action creating functions and have them return different things each time they're called. This is more powerful than plain action objects because it can dynamically respond to user's input. We will be using Action Creators going forward. Finally, the last thing you need to know about actions is that they correspond to a certain piece of the global state. Only you, the developer, get to decide what corresponds to what. So for example, we have an action called ADD_CAR above. It makes sense that we would use this action to update the cars property in state. Remember this example from our last pre-work: Global State - redux/state.js 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] } We want to make actions that make sense for our data model. Since cars is an array, two common operations would be add to and remove a car from the array. So cars might have the following actions: ADD_CAR - push a new car value on to the array. REMOVE_CAR - delete a particular car from the array. Likewise for the user property. It's null right now but it could probably represent an Object or maybe just a plain String. Either way, actions that make sense for this property would be: SET_USER - set which user is signed in right now. UNSET_USER - remove the user at sign-out. Again, the CAPITALIZED_UNDERSCORE naming convention is a Redux convention. You get to name these as you like, so make sure they make sense to you and other developers. Remember, code is NOT what a computer reads. Code is what humans read. Final note about action creators: they all go in a single file called redux/actions.js (inside of the \"redux\" folder) like below. redux/actions.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 export const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } export const setUser = ( newUser ) => { return { type : 'SET_USER' , value : newUser } } export const unsetUser = ( index ) => { return { type : 'UNSET_USER' , value : index } } The next step is to update our Reducer functions to accept and respond to these incoming Action Objects.","title":"Actions"},{"location":"module-3/redux-connect/","text":"Containers, Connect() & mapStateToProps() A Container is simply a higher-order component that's connected to our Redux Store and returns a React Component but provides data from the Store to it first. For organizational sake, we'll create a new folder called containers/ to hold these container component. In the cars example, we've been working on, we used a component called Home to list all of our cars. Let's create a new file with the same name ( Home.js ) in our containers folder and connect it to Redux. Redux works by taking the state variables we want and mapping them to props in our component. So if we want to connect Home to the value of cars from our state.js file, the value will be mapped to a prop that we specify (likely as cars ) and then we will access it in the component by calling props.cars . Redux provides a function for doing that called mapStateToProps and we connect it to our component using the connect function. Let's see an example: containers/Home.js File 1 2 3 4 5 6 7 8 9 10 11 12 import { connect } from 'react-redux' // import the visual React component \"Home\" import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } // wrap the visual React Component \"Home\" with the Redux Container Component Home export default connect ( mapStateToProps )( Home ) We first import the connect function from Redux and our \"dumb\"/visual component . Then we build a mapStateToProps function that builds an object with a key, cars to be set to state.cars . Remember, state.cars is what exists in our state.js file. From there, we can export the Higher-Order Component( HOC ) which will make state.cars (now cars available to our \"dumb\" component, <Home /> as props.cars using the IIFE (Home) . Now we just need to reference it in a couple of places to make full use of it. In our Router.js file where we're used to importing: import Home from '../components/Home' we now import: import Home from '../containers/Home' . This change is how we can start understanding why the term \"dumb component\" was coined. See, a regular React component just returns what it's told to return via its props . But now we're introducing this HOC, which calls the regular React component and provides the props to be rendered. So, in a sort of colloquial jargon, we say a regular React component is a Dumb component and a redux component is a Smart Component/Container . Rude, right? Back in our dumb Home component where we had imported cars.json and did cars.map ... it's now props.cars.map and we no longer need the cars.json file because that data is now in state.js . Additionally, this can now be done on any other component we want and all of them would have access to cars ! You might be thinking . . . we could have just imported cars.json everywhere we wanted to use cars and you're right, but it wouldn't be dynamic . It wouldn't act like state is supposed to act. In this manner, (with Redux), eventually, when we update \"cars\" from one component, all other components that are using the data will be notified automatically. That is the real power of Redux and we will explore that in the next lesson. Review Connect() + Practice It Push Yourself Further Open the sandbox above. Notice the two components ( MyComponent , MySecondComponent ) Notice the way the data is currently passed. That is, if we want two components to have the same data we currently have to define that data on the parent component ( App ) and then pass it to the two components with props: items={items} NOTE: most of the Redux set up has been done for you in this example In index.js import the Provider and the store . (Uncomment line 5 & 6) Wrap the <div className=\"App\"> with the <Provider> and pass the store as a prop named store to the Provider Go to the containers/ folder. In each file, write a mapStateToProps function (it will be the same for both). Remember to connect it and export it Then, go back to index.js and replace the imports at the top so that they reference the containers instead of the components directly. Ex. ../containers/MyComponent . Delete the const items and the passing of props to MyComponent and MySecondComponent Is the app still working? It should work exactly the same as before. Try adding a third item in redux/state.js . Did both components receive the update? If not, reload and rework through these steps again Additional Resources YT, PentaCode - How To Add Redux To Create React App (1/3) Know Your Docs Redux Docs - Getting Started","title":"Redux Connect"},{"location":"module-3/redux-connect/#containers-connect-mapstatetoprops","text":"A Container is simply a higher-order component that's connected to our Redux Store and returns a React Component but provides data from the Store to it first. For organizational sake, we'll create a new folder called containers/ to hold these container component. In the cars example, we've been working on, we used a component called Home to list all of our cars. Let's create a new file with the same name ( Home.js ) in our containers folder and connect it to Redux. Redux works by taking the state variables we want and mapping them to props in our component. So if we want to connect Home to the value of cars from our state.js file, the value will be mapped to a prop that we specify (likely as cars ) and then we will access it in the component by calling props.cars . Redux provides a function for doing that called mapStateToProps and we connect it to our component using the connect function. Let's see an example: containers/Home.js File 1 2 3 4 5 6 7 8 9 10 11 12 import { connect } from 'react-redux' // import the visual React component \"Home\" import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } // wrap the visual React Component \"Home\" with the Redux Container Component Home export default connect ( mapStateToProps )( Home ) We first import the connect function from Redux and our \"dumb\"/visual component . Then we build a mapStateToProps function that builds an object with a key, cars to be set to state.cars . Remember, state.cars is what exists in our state.js file. From there, we can export the Higher-Order Component( HOC ) which will make state.cars (now cars available to our \"dumb\" component, <Home /> as props.cars using the IIFE (Home) . Now we just need to reference it in a couple of places to make full use of it. In our Router.js file where we're used to importing: import Home from '../components/Home' we now import: import Home from '../containers/Home' . This change is how we can start understanding why the term \"dumb component\" was coined. See, a regular React component just returns what it's told to return via its props . But now we're introducing this HOC, which calls the regular React component and provides the props to be rendered. So, in a sort of colloquial jargon, we say a regular React component is a Dumb component and a redux component is a Smart Component/Container . Rude, right? Back in our dumb Home component where we had imported cars.json and did cars.map ... it's now props.cars.map and we no longer need the cars.json file because that data is now in state.js . Additionally, this can now be done on any other component we want and all of them would have access to cars ! You might be thinking . . . we could have just imported cars.json everywhere we wanted to use cars and you're right, but it wouldn't be dynamic . It wouldn't act like state is supposed to act. In this manner, (with Redux), eventually, when we update \"cars\" from one component, all other components that are using the data will be notified automatically. That is the real power of Redux and we will explore that in the next lesson.","title":"Containers, Connect() &amp; mapStateToProps()"},{"location":"module-3/redux-connect/#review-connect-practice-it","text":"","title":"Review Connect() + Practice It"},{"location":"module-3/redux-connect/#push-yourself-further","text":"Open the sandbox above. Notice the two components ( MyComponent , MySecondComponent ) Notice the way the data is currently passed. That is, if we want two components to have the same data we currently have to define that data on the parent component ( App ) and then pass it to the two components with props: items={items} NOTE: most of the Redux set up has been done for you in this example In index.js import the Provider and the store . (Uncomment line 5 & 6) Wrap the <div className=\"App\"> with the <Provider> and pass the store as a prop named store to the Provider Go to the containers/ folder. In each file, write a mapStateToProps function (it will be the same for both). Remember to connect it and export it Then, go back to index.js and replace the imports at the top so that they reference the containers instead of the components directly. Ex. ../containers/MyComponent . Delete the const items and the passing of props to MyComponent and MySecondComponent Is the app still working? It should work exactly the same as before. Try adding a third item in redux/state.js . Did both components receive the update? If not, reload and rework through these steps again","title":"Push Yourself Further"},{"location":"module-3/redux-connect/#additional-resources","text":"YT, PentaCode - How To Add Redux To Create React App (1/3)","title":"Additional Resources"},{"location":"module-3/redux-connect/#know-your-docs","text":"Redux Docs - Getting Started","title":"Know Your Docs"},{"location":"module-3/redux-mapStateToProps/","text":"App State with Redux Try to be a rainbow in someone\u2019s cloud.\u2003\u2014Maya Angelou Review and Recap We've integrated routing into our application and even learned how we can protect some of our routes from being accessed if a user isn't logged in. What if now we need to get the logged-in user's information to be used in any component? That would be very expensive to make a network request( ajax , fetch , or axios ) for every component...every time it loaded. Let's introduce a global state management system called Redux to keep up with an App State so we can store that data. Remember, with a class-based component we have local state : this.state = { /* some key/value pairs */ } . But for a more managing an app's global state , that is, a single source of truth our entire app can access, we'll need to create it in another place. Redux happens to be the gold standard for something like this. Here goes!! Redux: the High Overview What is Redux? This is a definition from the Redux website . Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available. Let's talk about it in more layman's terms and provide some examples. We're used to seeing something like this to build a simple React component that is showing a status (on/off) based on the state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { Component } from 'react' class MyComponent extends Component { state = { on : true } render () { return ( < div > < p > The status is : $ { this . state . on ? 'On' : 'Off' } < /p> < /div> ) } } export default MyComponent What if we make a new component called MySecondComponent : 1 2 3 4 5 6 7 8 9 10 11 12 13 import React , { Component } from 'react' class MySecondComponent extends Component { render () { return ( < div > < p > This is my second component < /p> < /div> ) } } export default MySecondComponent Does MySecondComponent have access to the state ( on ) of the original MyComponent ? Of course not. Normal React state only works within the component in which it's defined. So MySecondComponent doesn't have any idea what state MyComponent is in unless we pass the state down as props , but as you've probably already seen, passing props down, to only pass more props down becomes tedious, ugly, and unmanageable. Like filling a cup to pour into another cup and then to only pour into yet another cup. But we can change that process with Redux. But first. . . why would we want to do that? Well . . . the previous example might be too specific. MySecondComponent and MyComponent might not need to know about each other or each other's state, but what about if instead of on , MyComponent had the user data for the logged-in user? Then MySecondComponent might want to know about it because it may want to access it at some point in the future. We will eventually handle this by moving the state out of MyComponent and into a global Redux state that both components will have access to. Whenever one component changes the state , i.e. user , the other one will know about it. That's the power of Redux! Before we dive into some examples, let's briefly talk about what Redux is doing and what it isn't doing . What is Redux doing? Redux is helping the DEVELOPER structure the app in a way that makes it simpler for cross-component communication. It helps us limit the passing of props to many different components that need the same information. Simply put, Redux helps define a single source of truth that can be shared with all components simultaneously without passing props. What is Redux NOT doing? Redux is not providing any new styling or logic that the end-user is aware of. The site will look exactly the same. The user will see no difference, but the developer will be able to add advanced functionality more rapidly. Redux: Visualize the Global State(App State)","title":"Redux Intro"},{"location":"module-3/redux-mapStateToProps/#app-state-with-redux","text":"Try to be a rainbow in someone\u2019s cloud.\u2003\u2014Maya Angelou","title":"App State with Redux"},{"location":"module-3/redux-mapStateToProps/#review-and-recap","text":"We've integrated routing into our application and even learned how we can protect some of our routes from being accessed if a user isn't logged in. What if now we need to get the logged-in user's information to be used in any component? That would be very expensive to make a network request( ajax , fetch , or axios ) for every component...every time it loaded. Let's introduce a global state management system called Redux to keep up with an App State so we can store that data. Remember, with a class-based component we have local state : this.state = { /* some key/value pairs */ } . But for a more managing an app's global state , that is, a single source of truth our entire app can access, we'll need to create it in another place. Redux happens to be the gold standard for something like this. Here goes!!","title":"Review and Recap"},{"location":"module-3/redux-mapStateToProps/#redux-the-high-overview","text":"","title":"Redux: the High Overview"},{"location":"module-3/redux-mapStateToProps/#what-is-redux","text":"This is a definition from the Redux website . Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available. Let's talk about it in more layman's terms and provide some examples. We're used to seeing something like this to build a simple React component that is showing a status (on/off) based on the state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { Component } from 'react' class MyComponent extends Component { state = { on : true } render () { return ( < div > < p > The status is : $ { this . state . on ? 'On' : 'Off' } < /p> < /div> ) } } export default MyComponent What if we make a new component called MySecondComponent : 1 2 3 4 5 6 7 8 9 10 11 12 13 import React , { Component } from 'react' class MySecondComponent extends Component { render () { return ( < div > < p > This is my second component < /p> < /div> ) } } export default MySecondComponent Does MySecondComponent have access to the state ( on ) of the original MyComponent ? Of course not. Normal React state only works within the component in which it's defined. So MySecondComponent doesn't have any idea what state MyComponent is in unless we pass the state down as props , but as you've probably already seen, passing props down, to only pass more props down becomes tedious, ugly, and unmanageable. Like filling a cup to pour into another cup and then to only pour into yet another cup. But we can change that process with Redux. But first. . . why would we want to do that? Well . . . the previous example might be too specific. MySecondComponent and MyComponent might not need to know about each other or each other's state, but what about if instead of on , MyComponent had the user data for the logged-in user? Then MySecondComponent might want to know about it because it may want to access it at some point in the future. We will eventually handle this by moving the state out of MyComponent and into a global Redux state that both components will have access to. Whenever one component changes the state , i.e. user , the other one will know about it. That's the power of Redux! Before we dive into some examples, let's briefly talk about what Redux is doing and what it isn't doing .","title":"What is Redux?"},{"location":"module-3/redux-mapStateToProps/#what-is-redux-doing","text":"Redux is helping the DEVELOPER structure the app in a way that makes it simpler for cross-component communication. It helps us limit the passing of props to many different components that need the same information. Simply put, Redux helps define a single source of truth that can be shared with all components simultaneously without passing props.","title":"What is Redux doing?"},{"location":"module-3/redux-mapStateToProps/#what-is-redux-not-doing","text":"Redux is not providing any new styling or logic that the end-user is aware of. The site will look exactly the same. The user will see no difference, but the developer will be able to add advanced functionality more rapidly.","title":"What is Redux NOT doing?"},{"location":"module-3/redux-mapStateToProps/#redux-visualize-the-global-stateapp-state","text":"","title":"Redux: Visualize the Global State(App State)"},{"location":"module-3/redux-mdtp/","text":"Redux mapDispatchToProps Ok, it's time to hook up our actions to our components so that they work when we click a button, submit a form, etc. Right? We got this reducer with new case s and an action creator returning an actions object but now we need the components to have the ability to call or dispatch those actions! To do that, we need to introduce a new tool called mapDispatchToProps . It's very much like the mapStateToProps tool we we've already learned to use. Let's look again at our Home Container in the containers/ folder: Our Current containers/Home.js File 1 2 3 4 5 6 7 8 9 10 import { connect } from 'react-redux' import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } export default connect ( mapStateToProps )( Home ) Let's import the addCar & removeCar function from actions.js file and add the mapDispatchToProps function tool so that we can bind/provide these actions to our component: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { connect } from 'react-redux' import Home from '../components/Home' // import the two actions we want to provide to the component import { addCar , removeCar } from './actions' // we've already covered this but notice how this function returns an object with the key `cars` which is the name of the `prop` we use in the component: `props.cars` const mapStateToProps = ( state ) => { return { cars : state . cars } } // this function ALSO returns an Object with keys: `addCar` and `removeCar`...these will be accessed through `props` in the component as `props.addCar` and `props.??` Can you guess? const mapDispatchToProps = ( dispatch ) => { // return an object with keys that represent the `props` you'll want to use in the component. return { // we've passed in a parameter called `dispatch` which is just a name Redux's `connect` function is looking for. Then we use that `dispatch` function to create a value for each of the keys, see that? addCar : ( car ) => dispatch ( addCar ( car )), // we pass in the value to the anonymous function which then calls the `dispatch` function who then calls the actions creator we want it to use and gives it the value: `car` or `index`, in this case. removeCar : ( index ) => dispatch ( removeCar ( index )) } } The mapDispatchToProps ( MDTP for short) function accepts a parameter called dispatch . Remember to always include it there. Then the MDTP function returns an object with keys that match the prop names you want to use in the \"dumb\" component. The value of each of these keys will be a function that returns/calls the dispatch function. Since you've already imported the actions you need( { addCar, removeCar } from './actions' ) you can call them inside the dispatch invocation and pass to it the value it will need to carry out it's action ( car or index ). After you add the mapDispatchToProps to the connect() function, your \"dumb\" component will have access to the actions you've already built in actions.js through the prop names: props.addCar and props.removeCar (see below) . When these props are called, your reducers will be called and evaluate which action was created and return the new state back to the \"dumb\" component as props via mapStateToProps . It all comes full circle! Connect MDTP Now, all that's left to do is connect this function to the component. It actually just comes right after the mapStateToProps argument which means the whole container file looks like this: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } // pass in the two functions as arguments to the `connect` function. export default connect ( mapStateToProps , mapDispatchToProps )( Home ) Now the Home component has a prop called cars to receive the cars data from state and two props called addCar & removeCar which update the global state by adding the new car or the index to delete a car. They can be accessed anywhere in the component by referencing props.cars , props.addCar , or props.removeCar . The way it works: when we pass these functions to the connect function then immediately invoke the Home function we are creating a context around Home that gives it access to the two objects returned from each of the MSTP and MDTP functions. The Events in Order At app start up, the HomeContainer is called --> This will call the connect function which calls the MSTP & the MDTP functions who create objects with keys that point to the action functions in actions.js file --> Then the \"dumb\" component function is called and created within this context so it has access to the state data and actions via props --> From the \"dumb\" component, a form submit will call props.addCar() with a value: \"2008 Toyota Prius\" --> Then the anonymous function, sitting at the addCar property on the object returned from the MDTP function, is called with the argument: \"2008 Toyota Prius\" --> This calls the dispatch() function --> Which then calls the addCar() action and passes the argument: \"2008 Toyota Prius\" --> This fires the addCar() Action Creator function --> Which returns an Action Object that will look like: {type: ADD_CAR, value: \"2008 Toyota Prius\"} to the reducer: cars() --> The cars() reducer stop at the case: ADD_CAR and then creates a new array object using the current state plus the value : \"2008 Toyota Prius\" --> Once state is updated the connect function will be called which calls the MSTP function who provides the new state to the \"dumb\" component --> And the user sees the update on the screen. --> Repeat. --> Repeat. --> Repeat. --> MSTP & MDTP are just abbreviations for the functions mapStateToProps and mapDispatchToProps Summary We create Redux Action Creators (again, these are just plain JS functions) that return Actions (just a plain ol' JS object) with the properties: type and value . Those Action objects are passed to the Reducers (just plain switch/case statements) that do and return different things based on action.type case. The container uses Redux's tools: mapStateToProps , mapDispatchToProps , and connect to give the component access to the global state properties and action creators to change that state via props . We tie all of that together in the container file so that the \"dumb\" component only manages visual representation presentation to the user. This follows right along with the Single Responsibility Principle of SOLID programming.","title":"Redux MDTP"},{"location":"module-3/redux-mdtp/#redux-mapdispatchtoprops","text":"Ok, it's time to hook up our actions to our components so that they work when we click a button, submit a form, etc. Right? We got this reducer with new case s and an action creator returning an actions object but now we need the components to have the ability to call or dispatch those actions! To do that, we need to introduce a new tool called mapDispatchToProps . It's very much like the mapStateToProps tool we we've already learned to use. Let's look again at our Home Container in the containers/ folder: Our Current containers/Home.js File 1 2 3 4 5 6 7 8 9 10 import { connect } from 'react-redux' import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } export default connect ( mapStateToProps )( Home ) Let's import the addCar & removeCar function from actions.js file and add the mapDispatchToProps function tool so that we can bind/provide these actions to our component: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { connect } from 'react-redux' import Home from '../components/Home' // import the two actions we want to provide to the component import { addCar , removeCar } from './actions' // we've already covered this but notice how this function returns an object with the key `cars` which is the name of the `prop` we use in the component: `props.cars` const mapStateToProps = ( state ) => { return { cars : state . cars } } // this function ALSO returns an Object with keys: `addCar` and `removeCar`...these will be accessed through `props` in the component as `props.addCar` and `props.??` Can you guess? const mapDispatchToProps = ( dispatch ) => { // return an object with keys that represent the `props` you'll want to use in the component. return { // we've passed in a parameter called `dispatch` which is just a name Redux's `connect` function is looking for. Then we use that `dispatch` function to create a value for each of the keys, see that? addCar : ( car ) => dispatch ( addCar ( car )), // we pass in the value to the anonymous function which then calls the `dispatch` function who then calls the actions creator we want it to use and gives it the value: `car` or `index`, in this case. removeCar : ( index ) => dispatch ( removeCar ( index )) } } The mapDispatchToProps ( MDTP for short) function accepts a parameter called dispatch . Remember to always include it there. Then the MDTP function returns an object with keys that match the prop names you want to use in the \"dumb\" component. The value of each of these keys will be a function that returns/calls the dispatch function. Since you've already imported the actions you need( { addCar, removeCar } from './actions' ) you can call them inside the dispatch invocation and pass to it the value it will need to carry out it's action ( car or index ). After you add the mapDispatchToProps to the connect() function, your \"dumb\" component will have access to the actions you've already built in actions.js through the prop names: props.addCar and props.removeCar (see below) . When these props are called, your reducers will be called and evaluate which action was created and return the new state back to the \"dumb\" component as props via mapStateToProps . It all comes full circle!","title":"Redux mapDispatchToProps"},{"location":"module-3/redux-mdtp/#connect-mdtp","text":"Now, all that's left to do is connect this function to the component. It actually just comes right after the mapStateToProps argument which means the whole container file looks like this: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } // pass in the two functions as arguments to the `connect` function. export default connect ( mapStateToProps , mapDispatchToProps )( Home ) Now the Home component has a prop called cars to receive the cars data from state and two props called addCar & removeCar which update the global state by adding the new car or the index to delete a car. They can be accessed anywhere in the component by referencing props.cars , props.addCar , or props.removeCar . The way it works: when we pass these functions to the connect function then immediately invoke the Home function we are creating a context around Home that gives it access to the two objects returned from each of the MSTP and MDTP functions.","title":"Connect MDTP"},{"location":"module-3/redux-mdtp/#the-events-in-order","text":"At app start up, the HomeContainer is called --> This will call the connect function which calls the MSTP & the MDTP functions who create objects with keys that point to the action functions in actions.js file --> Then the \"dumb\" component function is called and created within this context so it has access to the state data and actions via props --> From the \"dumb\" component, a form submit will call props.addCar() with a value: \"2008 Toyota Prius\" --> Then the anonymous function, sitting at the addCar property on the object returned from the MDTP function, is called with the argument: \"2008 Toyota Prius\" --> This calls the dispatch() function --> Which then calls the addCar() action and passes the argument: \"2008 Toyota Prius\" --> This fires the addCar() Action Creator function --> Which returns an Action Object that will look like: {type: ADD_CAR, value: \"2008 Toyota Prius\"} to the reducer: cars() --> The cars() reducer stop at the case: ADD_CAR and then creates a new array object using the current state plus the value : \"2008 Toyota Prius\" --> Once state is updated the connect function will be called which calls the MSTP function who provides the new state to the \"dumb\" component --> And the user sees the update on the screen. --> Repeat. --> Repeat. --> Repeat. --> MSTP & MDTP are just abbreviations for the functions mapStateToProps and mapDispatchToProps","title":"The Events in Order"},{"location":"module-3/redux-mdtp/#summary","text":"We create Redux Action Creators (again, these are just plain JS functions) that return Actions (just a plain ol' JS object) with the properties: type and value . Those Action objects are passed to the Reducers (just plain switch/case statements) that do and return different things based on action.type case. The container uses Redux's tools: mapStateToProps , mapDispatchToProps , and connect to give the component access to the global state properties and action creators to change that state via props . We tie all of that together in the container file so that the \"dumb\" component only manages visual representation presentation to the user. This follows right along with the Single Responsibility Principle of SOLID programming.","title":"Summary"},{"location":"module-3/redux-reducers/","text":"Update Reducers Now that we have our actions it's time to update the functions in our reducers.js file. Actions communicate directly with the reducer responsible for a certain piece of state. That's the only way your Redux state gets updated. Each reducer is responsible for a specific piece of the state; it returns it in mapStateToProps and handles updates when called by mapDispatchToProp and given an Action to carry out. Again let's look at examples. Reducers as If/Else Statements Before looking at these reducers assume the action creators we defined above are the actions being imported into this reducer file. When we started, the reducer file looked like this: Our current redux/reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) We're only focused on the cars part of these reducers right now so we'll update that reducer first. As be rebuild this reducer, think of them as a large if/else statement, that is determining what it's supposed to do, based on the type : passed through it from the action creator. If action.type === ADD_CAR then the switch statement should stop at the ADD_CAR case and add the car to state . If it gets REMOVE_CAR it will stop there and remove the car from state. And the default case is to return the current state which is what we're already doing and passing to mapStateToProps . Let's add those first two cases into the cars reducer: Updated redux/reducers.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = [], action ) => { switch ( action . type ) { case 'ADD_CAR' : return [ ... state , action . value ] case 'REMOVE_CAR' : const newState = [ ... state ] newState . splice ( action . value , 1 ) return newState default : return state } } export default combineReducers ({ user , cars }) with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // you know this, import the `combineReducers` tool from Redux import { combineReducers } from 'redux' // same as before, no changes made; just return the state so it can be `map`ped to `props` const user = ( state = null ) => state // still a reducers, which is just a JS function but with a second parameter now: `action` const cars = ( state = [], action ) => { // create `switch` statement based on the `type` property switch ( action . type ) { case 'ADD_CAR' : // if the `type` is `ADD_CAR` then create a new array by spreading (...) `state` into it // then add the `value` that came in with the action object return [ ... state , action . value ] case 'REMOVE_CAR' : // if `type` is `REMOVE_CAR` then create a copy of the array by spreading `state` into it const newState = [ ... state ] // then `splice` our the car we want to remove but not directly on `state` instead using the copy we made newState . splice ( action . value , 1 ) // finally, return the copy so it becomes the \"new\" `state` return newState default : // if there is no `type` to be evaluated just return `state` as is so it can be used my `mapStateToProps` as normal. return state } } // make these reducers available to the rest of the app with the `combineReducers` tool export default combineReducers ({ user , cars }) Notice how we added the action argument as the second parameter to the cars reducer (which is just a Function). It represents the action that we're taking on this state and will have the two keys type and value in it. In the switch statement, every case represents a possible type of action . LOL, get it? \"type of action\"? We then program the cars reducer to perform some operation on the state that corresponds with the action.type matches. So the cars reducer is saying, if action.type === \"ADD_CAR\" add the new car ( action.value ) to the end of the state which represents the cars array in the state.js file (seen near the top of this page) and return the new state. If action.type === \"REMOVE_CAR\" resolves to true, then we want to splice the array based on the index we passed in with action.value . A very important note about handling logic in the reducers: You always return a copy of the state. Not mutating the state itself. That's why we didn't write state.push(action.value) underneath the \"ADD_CAR\" case \u2014 because push doesn't return a new object, IT MUTATES THE ARRAY! Using the spread operator [ ... ] returns a COPY of the array. You should be familiar with these JavaScript operations from your 211 course. If not, spend some time brushing up on it. We do this because of Pass By Reference issues that could/will occur if multiple things are updating the state at one time. Don't worry about that too much, just understand that we ALWAYS pass a new object back from the reducer so Redux handles the actual updating of state.js and not our reducer functions. Summary Each action type needs to have a corresponding case in the reducer otherwise the action will not be able to be carried out when dispatched . Next up, we connect our actions to the \"dumb\" component's props with mapDispatchToProps (MDTP).","title":"Redux Reducers"},{"location":"module-3/redux-reducers/#update-reducers","text":"Now that we have our actions it's time to update the functions in our reducers.js file. Actions communicate directly with the reducer responsible for a certain piece of state. That's the only way your Redux state gets updated. Each reducer is responsible for a specific piece of the state; it returns it in mapStateToProps and handles updates when called by mapDispatchToProp and given an Action to carry out. Again let's look at examples.","title":"Update Reducers"},{"location":"module-3/redux-reducers/#reducers-as-ifelse-statements","text":"Before looking at these reducers assume the action creators we defined above are the actions being imported into this reducer file. When we started, the reducer file looked like this: Our current redux/reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) We're only focused on the cars part of these reducers right now so we'll update that reducer first. As be rebuild this reducer, think of them as a large if/else statement, that is determining what it's supposed to do, based on the type : passed through it from the action creator. If action.type === ADD_CAR then the switch statement should stop at the ADD_CAR case and add the car to state . If it gets REMOVE_CAR it will stop there and remove the car from state. And the default case is to return the current state which is what we're already doing and passing to mapStateToProps . Let's add those first two cases into the cars reducer: Updated redux/reducers.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = [], action ) => { switch ( action . type ) { case 'ADD_CAR' : return [ ... state , action . value ] case 'REMOVE_CAR' : const newState = [ ... state ] newState . splice ( action . value , 1 ) return newState default : return state } } export default combineReducers ({ user , cars }) with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // you know this, import the `combineReducers` tool from Redux import { combineReducers } from 'redux' // same as before, no changes made; just return the state so it can be `map`ped to `props` const user = ( state = null ) => state // still a reducers, which is just a JS function but with a second parameter now: `action` const cars = ( state = [], action ) => { // create `switch` statement based on the `type` property switch ( action . type ) { case 'ADD_CAR' : // if the `type` is `ADD_CAR` then create a new array by spreading (...) `state` into it // then add the `value` that came in with the action object return [ ... state , action . value ] case 'REMOVE_CAR' : // if `type` is `REMOVE_CAR` then create a copy of the array by spreading `state` into it const newState = [ ... state ] // then `splice` our the car we want to remove but not directly on `state` instead using the copy we made newState . splice ( action . value , 1 ) // finally, return the copy so it becomes the \"new\" `state` return newState default : // if there is no `type` to be evaluated just return `state` as is so it can be used my `mapStateToProps` as normal. return state } } // make these reducers available to the rest of the app with the `combineReducers` tool export default combineReducers ({ user , cars }) Notice how we added the action argument as the second parameter to the cars reducer (which is just a Function). It represents the action that we're taking on this state and will have the two keys type and value in it. In the switch statement, every case represents a possible type of action . LOL, get it? \"type of action\"? We then program the cars reducer to perform some operation on the state that corresponds with the action.type matches. So the cars reducer is saying, if action.type === \"ADD_CAR\" add the new car ( action.value ) to the end of the state which represents the cars array in the state.js file (seen near the top of this page) and return the new state. If action.type === \"REMOVE_CAR\" resolves to true, then we want to splice the array based on the index we passed in with action.value . A very important note about handling logic in the reducers: You always return a copy of the state. Not mutating the state itself. That's why we didn't write state.push(action.value) underneath the \"ADD_CAR\" case \u2014 because push doesn't return a new object, IT MUTATES THE ARRAY! Using the spread operator [ ... ] returns a COPY of the array. You should be familiar with these JavaScript operations from your 211 course. If not, spend some time brushing up on it. We do this because of Pass By Reference issues that could/will occur if multiple things are updating the state at one time. Don't worry about that too much, just understand that we ALWAYS pass a new object back from the reducer so Redux handles the actual updating of state.js and not our reducer functions.","title":"Reducers as If/Else Statements"},{"location":"module-3/redux-reducers/#summary","text":"Each action type needs to have a corresponding case in the reducer otherwise the action will not be able to be carried out when dispatched . Next up, we connect our actions to the \"dumb\" component's props with mapDispatchToProps (MDTP).","title":"Summary"},{"location":"module-3/redux-theSetup/","text":"Redux: the Set Up Ok. It's time to discuss how Redux works and how to set it up for any project. Yes, the setup is a bit tedious but the good thing is you only have to do it once per app. In the video below we breakdown the 4 major steps of setting up global state with Redux. You're asked to create a new repo but creating a new branch on your cars repo will be just fine: Redux: The First Four Steps Create new repo or open your Cars assignment from a last class and create another branch called implement-redux-global-state Install Packages - The first thing we need to do is install two more npm packages into your project. They are redux and react-redux . To do so, run the following command: npm i redux react-redux . Setting Up State, Reducers, Store, And Provider Setup the State Object - Next, we create a redux folder underneath/inside src/ and add a state.js file to it. Inside that file is where we will put the default values for everything we want our entire application to be able to access in one big JavaScript object. We will also make sure it is exported. For example, a state.js file for our cars application will look like this: state.js File 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] }; We'll keep it fairly simple for now with just two properties: user and cars . Build a Reducer - A reducer is a function that returns a representation of a specific piece of the state. Think of the reducer functions as a reducing valve . It reduces all of the state object down to smaller, very particular pieces of data so it can be easily consumed in any part of your application. Let's say you have an array of dogs and an array of cats but you only want the dog data in one component and the cat data in another but both data sets in a third component. We can do this easily by building two reducers: one for cats and one for dogs . These functions will REDUCE the state object {dogs : [ ... ], cats: [ ... ]} into two smaller bits of data: dogs: [ ... ] & cats: [ ... ] . See, the reducer functions reduces the larger state object into smaller much easier to use sets of data. To start, we need to create a reducers.js file underneath/inside the redux folder to tell Redux what state to send back to the application. This file will contain a function for each of the keys/value pairs of your state. If our state has two properties, user and cars we need two functions called user and cars that each take a default parameter named state = [] or state = null . We use a default parameter because reducers must never return undefined . For now, the functions will only return state , we'll change this tomorrow when we added actions to change state . Until then.... ...let's bring-in/import another function from Redux called, combineReducer , that, as you might expect, combines your reducers into one usable reducer object. NOTE: This by the way is creating an object-thing with keys to methods that are pointing to the value of your reducer functions. ...this is mostly unimportant to remember unless it helps you visualize what's going on here. At the bottom of the file we will export the combined reducers. NOTE: Don't worry too much about this step now. It's necessary for the setup of Redux but we'll talk about it more in the next class because it's used for mutating the global state. In this lesson, we are just learning how to read the global state. Anyway, based on our state.js file our reducers.js file will look like this: reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) Create the Store - The next part is creating the Redux store . The \"store\" is our global application state. We will eventually connect it to the top of our application and that top component, <App/> or <Main /> , and everything underneath it will have access to the \"store\". A \"store\" is created using the state.js file we just created and some additional Redux components. We will create a store.js file underneath/inside in the redux/ folder and it will look like this: store.js File 1 2 3 4 5 import { createStore } from 'redux' import reducers from './reducers' import state from './state' export default createStore ( reducers , state ) Simply put, we use the createStore method from redux to create a store with the given reducers and state . Wrap the Provider around the app - To tie in the store , state , and reducers together with our React app(function) we need to import and use the { Provider } component from 'react-redux' and provide our store in the App.js file. To do all of this, we will then \"wrap\" our application with the Provider component and pass the store as a prop called store . App.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // import BrowserRouter and Router and Navigation from '../pathnameHere' import { Provider } from 'react-redux' import store from './store' function App () { return ( < Provider store = { store } > < BrowserRouter > < Navigation /> < Router /> < /BrowserRouter> < /Provider> ); } Note the BrowserRouter , Navigation and Router from last week. Setup Complete!!! Ok . . . that sounds like a lot of set up (and it is) but we only have to do this once . Whenever we add new properties to your global state we simply need to put the new key/value in the correct places - which we will practice in the coming homework . For now, it's time to talk about our components being able to read from this global state we've so deftly created.","title":"Redux Setup"},{"location":"module-3/redux-theSetup/#redux-the-set-up","text":"Ok. It's time to discuss how Redux works and how to set it up for any project. Yes, the setup is a bit tedious but the good thing is you only have to do it once per app. In the video below we breakdown the 4 major steps of setting up global state with Redux. You're asked to create a new repo but creating a new branch on your cars repo will be just fine:","title":"Redux: the Set Up"},{"location":"module-3/redux-theSetup/#redux-the-first-four-steps","text":"Create new repo or open your Cars assignment from a last class and create another branch called implement-redux-global-state Install Packages - The first thing we need to do is install two more npm packages into your project. They are redux and react-redux . To do so, run the following command: npm i redux react-redux .","title":"Redux: The First Four Steps"},{"location":"module-3/redux-theSetup/#setting-up-state-reducers-store-and-provider","text":"Setup the State Object - Next, we create a redux folder underneath/inside src/ and add a state.js file to it. Inside that file is where we will put the default values for everything we want our entire application to be able to access in one big JavaScript object. We will also make sure it is exported. For example, a state.js file for our cars application will look like this: state.js File 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] }; We'll keep it fairly simple for now with just two properties: user and cars . Build a Reducer - A reducer is a function that returns a representation of a specific piece of the state. Think of the reducer functions as a reducing valve . It reduces all of the state object down to smaller, very particular pieces of data so it can be easily consumed in any part of your application. Let's say you have an array of dogs and an array of cats but you only want the dog data in one component and the cat data in another but both data sets in a third component. We can do this easily by building two reducers: one for cats and one for dogs . These functions will REDUCE the state object {dogs : [ ... ], cats: [ ... ]} into two smaller bits of data: dogs: [ ... ] & cats: [ ... ] . See, the reducer functions reduces the larger state object into smaller much easier to use sets of data. To start, we need to create a reducers.js file underneath/inside the redux folder to tell Redux what state to send back to the application. This file will contain a function for each of the keys/value pairs of your state. If our state has two properties, user and cars we need two functions called user and cars that each take a default parameter named state = [] or state = null . We use a default parameter because reducers must never return undefined . For now, the functions will only return state , we'll change this tomorrow when we added actions to change state . Until then.... ...let's bring-in/import another function from Redux called, combineReducer , that, as you might expect, combines your reducers into one usable reducer object. NOTE: This by the way is creating an object-thing with keys to methods that are pointing to the value of your reducer functions. ...this is mostly unimportant to remember unless it helps you visualize what's going on here. At the bottom of the file we will export the combined reducers. NOTE: Don't worry too much about this step now. It's necessary for the setup of Redux but we'll talk about it more in the next class because it's used for mutating the global state. In this lesson, we are just learning how to read the global state. Anyway, based on our state.js file our reducers.js file will look like this: reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) Create the Store - The next part is creating the Redux store . The \"store\" is our global application state. We will eventually connect it to the top of our application and that top component, <App/> or <Main /> , and everything underneath it will have access to the \"store\". A \"store\" is created using the state.js file we just created and some additional Redux components. We will create a store.js file underneath/inside in the redux/ folder and it will look like this: store.js File 1 2 3 4 5 import { createStore } from 'redux' import reducers from './reducers' import state from './state' export default createStore ( reducers , state ) Simply put, we use the createStore method from redux to create a store with the given reducers and state . Wrap the Provider around the app - To tie in the store , state , and reducers together with our React app(function) we need to import and use the { Provider } component from 'react-redux' and provide our store in the App.js file. To do all of this, we will then \"wrap\" our application with the Provider component and pass the store as a prop called store . App.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // import BrowserRouter and Router and Navigation from '../pathnameHere' import { Provider } from 'react-redux' import store from './store' function App () { return ( < Provider store = { store } > < BrowserRouter > < Navigation /> < Router /> < /BrowserRouter> < /Provider> ); } Note the BrowserRouter , Navigation and Router from last week. Setup Complete!!! Ok . . . that sounds like a lot of set up (and it is) but we only have to do this once . Whenever we add new properties to your global state we simply need to put the new key/value in the correct places - which we will practice in the coming homework . For now, it's time to talk about our components being able to read from this global state we've so deftly created.","title":"Setting Up State, Reducers, Store, And Provider"},{"location":"module-3/redux-thunk/","text":"Redux Thunk Light tomorrow with today.\u2003\u2014Elizabeth Barrett Browning Review and Recap After last week, you should have a fair grasp over Redux and its few functions that make all the magic of global app state happen. This, of course, allows us to view and mutate a global state from any component we so choose. We've also learned about actions, or action creators, and reducers and how they interact with each other. Our action creators so far have been fairly simple, but what if they need to be more complex in that they could make a fetch to a remote api, wait for the response, set the state to fetching: true while doing it, then set the state to fetching: false, success: true and set the state with the data it returned? In other words, what if they needed to be asynchronous? Enter Redux Thunk. Overview Why are we using Thunk? As we mentioned briefly above, our action creators currently don't support asynchronous actions (they can make a request to an API, wait for a response, then do things during and after the response does come in). What's asynchronous mean again? It means a function that doesn't have a determinate and sequential runtime. It may go out and call an API or make a connection with a database and while those functions are waiting to resolve it can move ahead and load up the screen with other functionality. These types of functions need to be handled differently from normal functions in JavaScript and so far haven't built an action creator that can handle these callbacks or promises (Remember, we've used these fetch and axios in 211 to do async calls). We are going to do the same thing inside our action creators, but in order for Redux to understand these async function we need to add the thunk middleware. What is Thunk? Thunk is middleware that allows action creators to return a Function instead of an Object. What is Middleware? Middleware is a function (or multiple functions) that you want to run every time a certain action happens. We've seen middleware in the last course (JS311) to handle authentication workflows in Express. Thunk works in the same way except that it happens when we call our action creators. Examples Let's get into some examples. First, let's talk about how we set up Thunk. It's incredibly easy. All you do is import thunk from \"redux-thunk\" . Since this is another package you may have also guessed that we need to install \"redux-thunk\" into our application with the following command: npm i redux-thunk. To use redux-thunk we also need to import the applyMiddleware tool from Redux so we can tie the thunk into the createStore function call. All of this happens in the store.js file. Here's what it looks like: redux/store.js 1 2 3 4 5 6 7 8 9 // import the `applyMiddlware` tool import { createStore , applyMiddleware } from 'redux' // import the `thunk` tool import thunk from 'redux-thunk' import reducers from './reducers' import state from './state' // pass them as a third argument to the `createStore` call export default createStore ( reducers , state , applyMiddleware ( thunk )) As we can see, there are only three small changes between this store.js file and the one we used last class. They involve the introduction of applyMiddleware , thunk and the application of thunk as the third parameter in createStore() , applyMiddleware(thunk) . Ok that's it, we are set up to use Thunk. So now how do we use it? Well . . . we need create a new property on state, a new action, and a new reducer - just like we're used to! State In the example below we've updated the state for our cars application to include a property called makes to store the available makes of cars. Its default value will be an empty array. It looks like this: makes: [] redux/state.js 1 2 3 4 5 export default { user : null , cars : [ '1' , '2' , '3' , '4' ], makes : [] // <-- Just a place to hold new data } Action The new action creators we add will return a function instead of an object. They will look like this: redux/actions.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Remember what our previous action creators looked like: export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } // ...more action creators here... export const fetchMakes = () => { return ( dispatch ) => { fetch ( 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json' ) . then ( res => res . json ()) . then ( response => { const action = { type : 'FETCH_MAKES' , value : response . Results } dispatch ( action ) }) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // ...more action creators here... export const fetchMakes = () => { // returning a function that has `dispatch` as its only parameter return ( dispatch ) => { // making an asynchronous API call fetch ( 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json' ) . then ( res => res . json ()) . then ( response => { // create a variable to hold an Object for the results const action = { type : 'FETCH_MAKES' , value : response . Results } // call `dispatch` to send the action Object to the reducer dispatch ( action ) }) } } So what's happening here? We're returning a function that has dispatch as its only parameter. We can write dispatch there because thunk will inject into our action creator automatically. Inside of that function, we are making an asynchronous API call to a government API with fetch . Then we create a variable to hold an Object to store the results of that API call. Lastly, we call dispatch at the end to send our action Object to our reducer. Speaking of . . . let's set that up. Reducer Since we have a new property called makes in our state, we need a new reducer called makes to match. Here's what it looks like: redux/reducers.js 1 2 3 4 5 6 7 8 9 10 const makes = ( state = [], action ) => { switch ( action . type ) { case 'FETCH_MAKES' : return action . value default : return state } } // ... more reducers here ... The Switch/Case statement handles the FETCH_MAKES action that we specified above. Since we know the results of our API is an array, we're able to simply return the action.value (the array of makes in reducers/state.js ). Wrapping Up Now that we've added this action into one of our components using the mapDispatchToProps function like normal, we can call it. When we do, the function will go out and make an API call and then add the results to our global state. The result would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 makes : [ { Make_ID : 440 , Make_Name : \"Aston Martin\" }, { Make_ID : 441 , Make_Name : \"Tesla\" }, { Make_ID : 442 , Make_Name : \"Jaguar\" }, { Make_ID : 443 , Make_Name : \"Maserati\" }, { Make_ID : 444 , Make_Name : \"Land Rover\" }, { Make_ID : 445 , Make_Name : \"Rolls Royce\" }, { Make_ID : 446 , Make_Name : \"Buell (EBR)\" } // ...etc... ] This is how we would generally start our application if we are fetching data from a database. We would have a state with an empty value and then we would use Redux Thunk to make the call to our database and return the results to it. NOTE: The biggest change here is just getting used to what the new action creator look like. See It - Redux Thunk Practice It Clone the following repo: https://github.com/AustinCodingAcademy/411_news_articles Call the News API to populate a list of news articles using Redux Thunk Look at the state.js file under the redux folder. You should see just one property called articles with an empty array present. We will populate (or replace) the array with data from the News API. In the reducers.js file you should see the current reducer function for articles . Add a case for FETCH_ARTICLES that simply returns action.value In the store.js file you need to do three things: import applyMiddleware import thunk pass applyMiddleware(thunk) to the createStore function Finally (for the redux/ folder), in actions.js , fill the fetchArticles function so that it calls the API endpoint (with fetch ) and then dispatch es the articleAction action creator. You will need to pass response.articles (the result of the fetch call) to that action creator can fulfill the articles parameter. The API endpoint to call is at the top of the file. Now, in our List container we should see that there is already a mapStateToProps function that is sending in the articles array. We need to make a mapDispatchToProps function that returns a property with key: fetchArticles and value: () => dispatch(fetchArticles()) . Remember to import the fetchArticles action at the top of the page. In the List component we simply need to create a componentDidMount function and call this.props.fetchArticles , which is the redux action we just connected. You should see a list of news articles appear on the page. Additional Resources YT, TechSith - React Redux Series Pt.7 Article, FreeCodeCamp - Understanding Redux Know Your Docs Be sure to reference the Redux documentation on GitHub Redux-Thunk Docs - Home","title":"Redux-Thunk"},{"location":"module-3/redux-thunk/#redux-thunk","text":"Light tomorrow with today.\u2003\u2014Elizabeth Barrett Browning","title":"Redux Thunk"},{"location":"module-3/redux-thunk/#review-and-recap","text":"After last week, you should have a fair grasp over Redux and its few functions that make all the magic of global app state happen. This, of course, allows us to view and mutate a global state from any component we so choose. We've also learned about actions, or action creators, and reducers and how they interact with each other. Our action creators so far have been fairly simple, but what if they need to be more complex in that they could make a fetch to a remote api, wait for the response, set the state to fetching: true while doing it, then set the state to fetching: false, success: true and set the state with the data it returned? In other words, what if they needed to be asynchronous? Enter Redux Thunk.","title":"Review and Recap"},{"location":"module-3/redux-thunk/#overview","text":"Why are we using Thunk? As we mentioned briefly above, our action creators currently don't support asynchronous actions (they can make a request to an API, wait for a response, then do things during and after the response does come in). What's asynchronous mean again? It means a function that doesn't have a determinate and sequential runtime. It may go out and call an API or make a connection with a database and while those functions are waiting to resolve it can move ahead and load up the screen with other functionality. These types of functions need to be handled differently from normal functions in JavaScript and so far haven't built an action creator that can handle these callbacks or promises (Remember, we've used these fetch and axios in 211 to do async calls). We are going to do the same thing inside our action creators, but in order for Redux to understand these async function we need to add the thunk middleware.","title":"Overview"},{"location":"module-3/redux-thunk/#what-is-thunk","text":"Thunk is middleware that allows action creators to return a Function instead of an Object.","title":"What is Thunk?"},{"location":"module-3/redux-thunk/#what-is-middleware","text":"Middleware is a function (or multiple functions) that you want to run every time a certain action happens. We've seen middleware in the last course (JS311) to handle authentication workflows in Express. Thunk works in the same way except that it happens when we call our action creators.","title":"What is Middleware?"},{"location":"module-3/redux-thunk/#examples","text":"Let's get into some examples. First, let's talk about how we set up Thunk. It's incredibly easy. All you do is import thunk from \"redux-thunk\" . Since this is another package you may have also guessed that we need to install \"redux-thunk\" into our application with the following command: npm i redux-thunk. To use redux-thunk we also need to import the applyMiddleware tool from Redux so we can tie the thunk into the createStore function call. All of this happens in the store.js file. Here's what it looks like: redux/store.js 1 2 3 4 5 6 7 8 9 // import the `applyMiddlware` tool import { createStore , applyMiddleware } from 'redux' // import the `thunk` tool import thunk from 'redux-thunk' import reducers from './reducers' import state from './state' // pass them as a third argument to the `createStore` call export default createStore ( reducers , state , applyMiddleware ( thunk )) As we can see, there are only three small changes between this store.js file and the one we used last class. They involve the introduction of applyMiddleware , thunk and the application of thunk as the third parameter in createStore() , applyMiddleware(thunk) . Ok that's it, we are set up to use Thunk. So now how do we use it? Well . . . we need create a new property on state, a new action, and a new reducer - just like we're used to!","title":"Examples"},{"location":"module-3/redux-thunk/#state","text":"In the example below we've updated the state for our cars application to include a property called makes to store the available makes of cars. Its default value will be an empty array. It looks like this: makes: [] redux/state.js 1 2 3 4 5 export default { user : null , cars : [ '1' , '2' , '3' , '4' ], makes : [] // <-- Just a place to hold new data }","title":"State"},{"location":"module-3/redux-thunk/#action","text":"The new action creators we add will return a function instead of an object. They will look like this: redux/actions.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Remember what our previous action creators looked like: export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } // ...more action creators here... export const fetchMakes = () => { return ( dispatch ) => { fetch ( 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json' ) . then ( res => res . json ()) . then ( response => { const action = { type : 'FETCH_MAKES' , value : response . Results } dispatch ( action ) }) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // ...more action creators here... export const fetchMakes = () => { // returning a function that has `dispatch` as its only parameter return ( dispatch ) => { // making an asynchronous API call fetch ( 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json' ) . then ( res => res . json ()) . then ( response => { // create a variable to hold an Object for the results const action = { type : 'FETCH_MAKES' , value : response . Results } // call `dispatch` to send the action Object to the reducer dispatch ( action ) }) } } So what's happening here? We're returning a function that has dispatch as its only parameter. We can write dispatch there because thunk will inject into our action creator automatically. Inside of that function, we are making an asynchronous API call to a government API with fetch . Then we create a variable to hold an Object to store the results of that API call. Lastly, we call dispatch at the end to send our action Object to our reducer. Speaking of . . . let's set that up.","title":"Action"},{"location":"module-3/redux-thunk/#reducer","text":"Since we have a new property called makes in our state, we need a new reducer called makes to match. Here's what it looks like: redux/reducers.js 1 2 3 4 5 6 7 8 9 10 const makes = ( state = [], action ) => { switch ( action . type ) { case 'FETCH_MAKES' : return action . value default : return state } } // ... more reducers here ... The Switch/Case statement handles the FETCH_MAKES action that we specified above. Since we know the results of our API is an array, we're able to simply return the action.value (the array of makes in reducers/state.js ).","title":"Reducer"},{"location":"module-3/redux-thunk/#wrapping-up","text":"Now that we've added this action into one of our components using the mapDispatchToProps function like normal, we can call it. When we do, the function will go out and make an API call and then add the results to our global state. The result would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 makes : [ { Make_ID : 440 , Make_Name : \"Aston Martin\" }, { Make_ID : 441 , Make_Name : \"Tesla\" }, { Make_ID : 442 , Make_Name : \"Jaguar\" }, { Make_ID : 443 , Make_Name : \"Maserati\" }, { Make_ID : 444 , Make_Name : \"Land Rover\" }, { Make_ID : 445 , Make_Name : \"Rolls Royce\" }, { Make_ID : 446 , Make_Name : \"Buell (EBR)\" } // ...etc... ] This is how we would generally start our application if we are fetching data from a database. We would have a state with an empty value and then we would use Redux Thunk to make the call to our database and return the results to it. NOTE: The biggest change here is just getting used to what the new action creator look like.","title":"Wrapping Up"},{"location":"module-3/redux-thunk/#see-it-redux-thunk","text":"","title":"See It - Redux Thunk"},{"location":"module-3/redux-thunk/#practice-it","text":"Clone the following repo: https://github.com/AustinCodingAcademy/411_news_articles Call the News API to populate a list of news articles using Redux Thunk Look at the state.js file under the redux folder. You should see just one property called articles with an empty array present. We will populate (or replace) the array with data from the News API. In the reducers.js file you should see the current reducer function for articles . Add a case for FETCH_ARTICLES that simply returns action.value In the store.js file you need to do three things: import applyMiddleware import thunk pass applyMiddleware(thunk) to the createStore function Finally (for the redux/ folder), in actions.js , fill the fetchArticles function so that it calls the API endpoint (with fetch ) and then dispatch es the articleAction action creator. You will need to pass response.articles (the result of the fetch call) to that action creator can fulfill the articles parameter. The API endpoint to call is at the top of the file. Now, in our List container we should see that there is already a mapStateToProps function that is sending in the articles array. We need to make a mapDispatchToProps function that returns a property with key: fetchArticles and value: () => dispatch(fetchArticles()) . Remember to import the fetchArticles action at the top of the page. In the List component we simply need to create a componentDidMount function and call this.props.fetchArticles , which is the redux action we just connected. You should see a list of news articles appear on the page.","title":"Practice It"},{"location":"module-3/redux-thunk/#additional-resources","text":"YT, TechSith - React Redux Series Pt.7 Article, FreeCodeCamp - Understanding Redux","title":"Additional Resources"},{"location":"module-3/redux-thunk/#know-your-docs","text":"Be sure to reference the Redux documentation on GitHub Redux-Thunk Docs - Home","title":"Know Your Docs"},{"location":"module-3/redux-usingActions/","text":"Using Action Creators + Challenge Practice It Open the sandbox above. Take a look around and see the file setup that we currently have. Notice that Redux files have been completely set up for you. Your job is to add actions, update the reducer and add the mapDispatchToProps function to the connect . Just like what you've just finished learning... Create an actions.js file underneath the \"redux\" folder. Inside this file, export a function called addUser with a type property: \"ADD_USER\" and a value property that points to the parameter: user . It should look like this: 1 2 3 4 5 6 export const addUser = user => { return { type : \"ADD_USER\" , value : user } } Go to the reducers.js file. Update the reducer with a switch/case statement. It should add a user to the array if the type is \"ADD_USER\" . On the default option, simply return state . Go to the UserList CONTAINER and import your action addUser at the top of the file. Now create a mapDispatchToProps function that returns and object with a property called addUser which points to the value of the addUser action creator you just imported. Don't forget to wrap it in dispatch() . Once that is set up, go to the UserList COMPONENT and add an onClick method to the button. It should reference props.addUser and it should send along the newUser variable like this: ( ) => props.addUser(newUser) Click the button. See how the new user gets added to the list? Additionally, see how every time a new user is added, the UserCount component automatically gets updated and knows how many users exist in the UserList component? We are starting to see some of the power of Redux. Know Your Docs Redux Docs - Getting Started Additional Resources YT, thenewboston - Actions and Action Creators Article, linuk@Medium - Pass By Reference Article, severinperez@Medium - Single Responsibility Principle Wikipedia, SOLID Programming Redux Docs - bindActionCreators() Optional, bindActionCreators If you're feeling confident and comfortable with this process, you may use the bindActionCreators method from redux to simplify your code a little bit. But this is very optional!! containers/Home.js using bindActionCreators 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return bindActionCreators ({ addCar , removeCar }, dispatch ) } export default connect ( mapStateToProps , mapDispatchToProps )( Home ) containers/Home.js as before 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } export default connect ( mapStateToProps , mapDispatchToProps )( Home )","title":"Redux Using Actions"},{"location":"module-3/redux-usingActions/#using-action-creators-challenge","text":"","title":"Using Action Creators + Challenge"},{"location":"module-3/redux-usingActions/#practice-it","text":"Open the sandbox above. Take a look around and see the file setup that we currently have. Notice that Redux files have been completely set up for you. Your job is to add actions, update the reducer and add the mapDispatchToProps function to the connect . Just like what you've just finished learning... Create an actions.js file underneath the \"redux\" folder. Inside this file, export a function called addUser with a type property: \"ADD_USER\" and a value property that points to the parameter: user . It should look like this: 1 2 3 4 5 6 export const addUser = user => { return { type : \"ADD_USER\" , value : user } } Go to the reducers.js file. Update the reducer with a switch/case statement. It should add a user to the array if the type is \"ADD_USER\" . On the default option, simply return state . Go to the UserList CONTAINER and import your action addUser at the top of the file. Now create a mapDispatchToProps function that returns and object with a property called addUser which points to the value of the addUser action creator you just imported. Don't forget to wrap it in dispatch() . Once that is set up, go to the UserList COMPONENT and add an onClick method to the button. It should reference props.addUser and it should send along the newUser variable like this: ( ) => props.addUser(newUser) Click the button. See how the new user gets added to the list? Additionally, see how every time a new user is added, the UserCount component automatically gets updated and knows how many users exist in the UserList component? We are starting to see some of the power of Redux.","title":"Practice It"},{"location":"module-3/redux-usingActions/#know-your-docs","text":"Redux Docs - Getting Started","title":"Know Your Docs"},{"location":"module-3/redux-usingActions/#additional-resources","text":"YT, thenewboston - Actions and Action Creators Article, linuk@Medium - Pass By Reference Article, severinperez@Medium - Single Responsibility Principle Wikipedia, SOLID Programming Redux Docs - bindActionCreators()","title":"Additional Resources"},{"location":"module-3/redux-usingActions/#optional-bindactioncreators","text":"If you're feeling confident and comfortable with this process, you may use the bindActionCreators method from redux to simplify your code a little bit. But this is very optional!! containers/Home.js using bindActionCreators 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return bindActionCreators ({ addCar , removeCar }, dispatch ) } export default connect ( mapStateToProps , mapDispatchToProps )( Home ) containers/Home.js as before 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } export default connect ( mapStateToProps , mapDispatchToProps )( Home )","title":"Optional, bindActionCreators"},{"location":"module-4/aGuideToDeployingYourApp/","text":"A Guide To Deploying Your App After all of the training, project, practice problems and resources given to you you may still feel overwhelmed with the prospect of building and deploying an application on your own. That's okay, this is a daunting task and can be very scary but I promise you, many have felt this way before but faced their fears and are not working their dream job because of it. Have a little faith in yourself because you're worth it! In addition, we've put together a detailed follow-along video series showing you how to deploy your application and database use Vercel and AWS, two cheaper options than GCP. While these videos walk you through the whole process you must keep in mind that you are build an application of your own that's original in idea and design. The simple todo list in these videos is only here to show how to deploy your app and connect the database and server. Use them as a reference when you're lost and confused. But most importantly, don't give up. You got this and we got you!! The Reference Repos Client Repo Server Repo The Videos NOTE: for now these videos will be hosted in Google Drive. Through the current technical transition we'll get them all over to Vimeo like the rest of our videos. 1. Intro 2. The Project 3. Create the Database 4. Create Express Server 5. Connect Server to DB with MYSQL.js 6. Prettier & User CRUD, pt.1 7. User CRUD, pt.2 8. User Controllers & Routers 9. Todo CRUD 10. DOTENV 11. Authentication - Sign-up 12. Authentication - Sign-in 13. Deploy to Vercel 14. Initial Client Setup 15. CORS Fix & Render Todos 16. Todo Component 17. Sign-in Component, pt. 1 18. Sign-in Component, pt. 2 19. Sign-in Component, pt. 3 20. Sign-up Component 21. React-Router 22. Styles 23. Create Todo, pt. 1 24. Create Todo, pt. 2 25. Deploy Front-End","title":"Deploying Your App"},{"location":"module-4/aGuideToDeployingYourApp/#a-guide-to-deploying-your-app","text":"After all of the training, project, practice problems and resources given to you you may still feel overwhelmed with the prospect of building and deploying an application on your own. That's okay, this is a daunting task and can be very scary but I promise you, many have felt this way before but faced their fears and are not working their dream job because of it. Have a little faith in yourself because you're worth it! In addition, we've put together a detailed follow-along video series showing you how to deploy your application and database use Vercel and AWS, two cheaper options than GCP. While these videos walk you through the whole process you must keep in mind that you are build an application of your own that's original in idea and design. The simple todo list in these videos is only here to show how to deploy your app and connect the database and server. Use them as a reference when you're lost and confused. But most importantly, don't give up. You got this and we got you!!","title":"A Guide To Deploying Your App"},{"location":"module-4/aGuideToDeployingYourApp/#the-reference-repos","text":"Client Repo Server Repo","title":"The Reference Repos"},{"location":"module-4/aGuideToDeployingYourApp/#the-videos","text":"NOTE: for now these videos will be hosted in Google Drive. Through the current technical transition we'll get them all over to Vimeo like the rest of our videos. 1. Intro 2. The Project 3. Create the Database 4. Create Express Server 5. Connect Server to DB with MYSQL.js 6. Prettier & User CRUD, pt.1 7. User CRUD, pt.2 8. User Controllers & Routers 9. Todo CRUD 10. DOTENV 11. Authentication - Sign-up 12. Authentication - Sign-in 13. Deploy to Vercel 14. Initial Client Setup 15. CORS Fix & Render Todos 16. Todo Component 17. Sign-in Component, pt. 1 18. Sign-in Component, pt. 2 19. Sign-in Component, pt. 3 20. Sign-up Component 21. React-Router 22. Styles 23. Create Todo, pt. 1 24. Create Todo, pt. 2 25. Deploy Front-End","title":"The Videos"},{"location":"module-4/capstoneApp-checkpoint-3/","text":"The Capstone App The purpose of the Capstone Project is to celebrate the student's accomplishments while demonstrating their mastery of the skills they set forth to learn. The completion of the Capstone Project is a requirement for graduation, receipt of certificate, as well as a pre-requisite to employment. (An employer wants to know you know how to build and figure problems out. Show them with this!) The Rubric 40pts - App is hosted 40pts - Is Full-stack (Database, Server, and Client) 20pts - Authorization and Authentication Bonus +20pts - Utilizes another API ## To Graduate For specific requirements refer to the Graduation Prerequisites for a complete list of requirements for your Graduation Presentation, Certification and Completion of this program. To Present at Graduation Ceremony To qualify for presenting your App to the public at graduation ceremony please see Presentations Qualifications Example Graduate Project Austin Currents by Nathan Simmons Tie It All Together Big Picture So far We\u2019ve shown you the little pieces of building a full stack application. Today let\u2019s take a look at putting everything together and understanding the big picture of our fullstack application. Since the first week of this course we presented you with a problem: Build a fullstack application. You have presented your ideas and as we\u2019ve gone further and further you have started drawing out your ideas, created your database but maybe we don\u2019t understand how it all fits together. Let\u2019s try to fix that and give you the big picture overview you\u2019ve been asking for. Fork and clone the github repo down below. Follow along using the repo to maximize the effect. Each section is detailed and gives you all the tools you need to finish your final capstone. The three big picture ideas are broken down and should help you understand how it all fits together. tie it all together Fullstack Check List Ideation & MVP Database and Server Front-end Overview video Each one of these steps are crucial to finish your applications and now let\u2019s break down each step to help you understand how they all work together. Ideation & MVP When you started in course 101 you\u2019ve been planning and writing down all of your ideas, building on them as you've gone through this course. It\u2019s extremely important that every time we start a new project we plan as detailed as possible, so when we start typing our code we already know what we\u2019re doing. While going through this course we made blogs, ER diagrams, and presented our ideas so that in the end we have a solid foundation. We then took the time to understand our data needs and what kind of data we want to store or be able to access. Finally we started drawing what our front end looks like or what the user will see when they access our projects. Hopefully all of this was stored and organized in our Trello boards and if you used Trello you now will see why its a great tool and one that puts you ahead of the curve with planning. Now that we understand this first step take the time to go over your notes and re-read everything. Refresh yourself and then come back for the next step. Database and Server Alright so we\u2019ve planned and planned we did our first step and we have a solid understanding of what were creating. Its time to run through our backend and create our database and server. Remember the backend is the bones and spine of our capstone. To succeed in your final project we need to understand how it all works and then implement this in our own repo. Back-End checklist Create GoogleCloud Database Connect and seed using MySQL workbench Create Github Repo for the source code of your server CI/CD with App Engine, Codeship, Github Okay so we\u2019ve gone through our checklist, watched the video, and really understand how our backend is working. Again take the time to reflect and read everything we just did before moving on to the final step. Front-end We have a solid foundation of what our app does and created our backend to reflect the data we need to use and store. Now it\u2019s time to Create our Client side so we have something unique to show our users. The backend of applications can be overwhelming sometimes, so give yourself a pat on the back finishing it and completing 2/3rds of your capstone! Now it\u2019s time to take all that creativity you have and make something beautiful with it. We learned html, css, and react and now it\u2019s time to use those new react skills. Congratulations! You now have the big picture of everything we've done. Remember to reference back here as you put the finishing touches on your capstone.","title":"Checkpoint Three"},{"location":"module-4/capstoneApp-checkpoint-3/#the-capstone-app","text":"The purpose of the Capstone Project is to celebrate the student's accomplishments while demonstrating their mastery of the skills they set forth to learn. The completion of the Capstone Project is a requirement for graduation, receipt of certificate, as well as a pre-requisite to employment. (An employer wants to know you know how to build and figure problems out. Show them with this!)","title":"The Capstone App"},{"location":"module-4/capstoneApp-checkpoint-3/#the-rubric","text":"40pts - App is hosted 40pts - Is Full-stack (Database, Server, and Client) 20pts - Authorization and Authentication Bonus +20pts - Utilizes another API ## To Graduate For specific requirements refer to the Graduation Prerequisites for a complete list of requirements for your Graduation Presentation, Certification and Completion of this program.","title":"The Rubric"},{"location":"module-4/capstoneApp-checkpoint-3/#to-present-at-graduation-ceremony","text":"To qualify for presenting your App to the public at graduation ceremony please see Presentations Qualifications","title":"To Present at Graduation Ceremony"},{"location":"module-4/capstoneApp-checkpoint-3/#example-graduate-project","text":"Austin Currents by Nathan Simmons","title":"Example Graduate Project"},{"location":"module-4/capstoneApp-checkpoint-3/#tie-it-all-together","text":"","title":"Tie It All Together"},{"location":"module-4/capstoneApp-checkpoint-3/#big-picture","text":"So far We\u2019ve shown you the little pieces of building a full stack application. Today let\u2019s take a look at putting everything together and understanding the big picture of our fullstack application. Since the first week of this course we presented you with a problem: Build a fullstack application. You have presented your ideas and as we\u2019ve gone further and further you have started drawing out your ideas, created your database but maybe we don\u2019t understand how it all fits together. Let\u2019s try to fix that and give you the big picture overview you\u2019ve been asking for. Fork and clone the github repo down below. Follow along using the repo to maximize the effect. Each section is detailed and gives you all the tools you need to finish your final capstone. The three big picture ideas are broken down and should help you understand how it all fits together. tie it all together","title":"Big Picture"},{"location":"module-4/capstoneApp-checkpoint-3/#fullstack-check-list","text":"Ideation & MVP Database and Server Front-end Overview video Each one of these steps are crucial to finish your applications and now let\u2019s break down each step to help you understand how they all work together.","title":"Fullstack Check List"},{"location":"module-4/capstoneApp-checkpoint-3/#ideation-mvp","text":"When you started in course 101 you\u2019ve been planning and writing down all of your ideas, building on them as you've gone through this course. It\u2019s extremely important that every time we start a new project we plan as detailed as possible, so when we start typing our code we already know what we\u2019re doing. While going through this course we made blogs, ER diagrams, and presented our ideas so that in the end we have a solid foundation. We then took the time to understand our data needs and what kind of data we want to store or be able to access. Finally we started drawing what our front end looks like or what the user will see when they access our projects. Hopefully all of this was stored and organized in our Trello boards and if you used Trello you now will see why its a great tool and one that puts you ahead of the curve with planning. Now that we understand this first step take the time to go over your notes and re-read everything. Refresh yourself and then come back for the next step.","title":"Ideation &amp; MVP"},{"location":"module-4/capstoneApp-checkpoint-3/#database-and-server","text":"Alright so we\u2019ve planned and planned we did our first step and we have a solid understanding of what were creating. Its time to run through our backend and create our database and server. Remember the backend is the bones and spine of our capstone. To succeed in your final project we need to understand how it all works and then implement this in our own repo.","title":"Database and Server"},{"location":"module-4/capstoneApp-checkpoint-3/#back-end-checklist","text":"Create GoogleCloud Database Connect and seed using MySQL workbench Create Github Repo for the source code of your server CI/CD with App Engine, Codeship, Github Okay so we\u2019ve gone through our checklist, watched the video, and really understand how our backend is working. Again take the time to reflect and read everything we just did before moving on to the final step.","title":"Back-End checklist"},{"location":"module-4/capstoneApp-checkpoint-3/#front-end","text":"We have a solid foundation of what our app does and created our backend to reflect the data we need to use and store. Now it\u2019s time to Create our Client side so we have something unique to show our users. The backend of applications can be overwhelming sometimes, so give yourself a pat on the back finishing it and completing 2/3rds of your capstone! Now it\u2019s time to take all that creativity you have and make something beautiful with it. We learned html, css, and react and now it\u2019s time to use those new react skills. Congratulations! You now have the big picture of everything we've done. Remember to reference back here as you put the finishing touches on your capstone.","title":"Front-end"},{"location":"module-4/capstoneApp-planning-pt2/","text":"Capstone App Planning - Part 2 Weeks of coding can save you hours of planning. Overview Last week you started planning and laying out the look and functionality of your app. Hopefully you didn't skip any of those steps and you exchanged contact info with your teammate(s) because we have some more planning practices to teach you. Continuing on... Step 3: Check Your Backend Does it match up with the True Core Functionality of Your App? NOTE: Don\u2019t skip this step. Building your front-end depends on your backend. At the end of your 300 level class, you built a database and server for the start of your Capstone Project. Hopefully, you followed along with the directions to have a solid beginning to your app. However, your ideas have probably changed and maybe your data needs have too. You must draw out the data you\u2019ll need for each component of your app so that you can plan your backend. When signing in, you\u2019ll need access to your users and a POST route to take a username and password for verification. When editing a profile you\u2019ll need a PUT route that takes in user info and updates the user\u2019s data. This is what you\u2019re really learning in this course, how to program, which is to say, you think about the steps a user will take from opening your app to closing your app and all of the data that\u2019s needed to complete those tasks. More on this in Step 5: User Flow Chart . Remember, back-ends come before front-ends. Why? Because the front-end depends on the data coming from the back-end (your server and any third-party APIs you choose to use). Your front-end only serves as an interface for your users to interact with the data you store in the database. Quite simply put, make sure your backend matches your front-end\u2019s needs, first . Take the time to consider what your back-end has now and what may need to change. Work with your partner to clear this up, list it out on your Trello board, and make a plan of action to solve it! Remember: small steps lead to long journeys! Step 4: Sketch out What it Should Look Like, Visually Let\u2019s get out of backend country for a minute and think about what the app looks like to the user. This will build up into Step 5, so don\u2019t skip this one either! What does your app look like when a user arrives at your app\u2019s URL? Do they click \u201cSign-Up\u201d or start typing their information immediately? Draw it. Seriously, go steal your kids paper and map pencils and get to drawing! After the sign-up do they go straight to their profile or do they get a prompt to first enter data related to your app, i.e. in the Budget App mentioned above you might be prompted to enter a budget amount. Draw it. Each time you answer these questions, draw it! Seriously, nothing comes from nothing. So start drawing something, even if it\u2019s horrendously ugly, draw it. You\u2019ll figure it out and make it look better as you build it up. But now is the time to get these ideas into a more solid form; from ethereal/gaseous ideation to moldable jello on paper and eventually to code that tells a browser to do these specific tasks with the UI you envision. Practice Problem In class we'll work on solving problems while communicating to a group. To get better at this (and you will), you'll have to practice on your own every day. YES, the first few times you work on this you're going to get stuck, frustrated, and want to give up. That's okay. Just take a breathe and take some time away from it. Ten minutes later, come back to it. Then look at the answer. Understand how it was solved and try to repeat it for yourself. In this way you can learn from REALLY smart people. Slowly, but surely, you will pick up the patterns. We want you to succeed! To make sure our students are doing the right practice, every day, for themselves we're going to give you a problem to work on here. But if you're wanting more to work on try these sites: HackerRank Geeks4Geeks LeetCode Pramp In fact, you'll want to get on HackerRank and LeetCode sooner rather than later because they actually track your progress and your profile is searchable by hiring managers and recruiters! Remember to follow the rules to whiteboarding success: Restate, rewrite, and clarify the question Write the expected return given an input Make a code plan and speak aloud with your interviewers/team/self Test and come up with edge case scenarios Revise if you can for efficiency Prompt: Collatz Conjecture - Start with a number n > 1. Find the number of steps it takes to reach one using the following process: If n is even, divide it by 2. If n is odd, multiply it by 3 and add 1. Don't worry about code on this one, get it down on paper first!!","title":"Capstone App pt.2"},{"location":"module-4/capstoneApp-planning-pt2/#capstone-app-planning-part-2","text":"Weeks of coding can save you hours of planning.","title":"Capstone App Planning - Part 2"},{"location":"module-4/capstoneApp-planning-pt2/#overview","text":"Last week you started planning and laying out the look and functionality of your app. Hopefully you didn't skip any of those steps and you exchanged contact info with your teammate(s) because we have some more planning practices to teach you. Continuing on...","title":"Overview"},{"location":"module-4/capstoneApp-planning-pt2/#step-3-check-your-backend","text":"Does it match up with the True Core Functionality of Your App? NOTE: Don\u2019t skip this step. Building your front-end depends on your backend. At the end of your 300 level class, you built a database and server for the start of your Capstone Project. Hopefully, you followed along with the directions to have a solid beginning to your app. However, your ideas have probably changed and maybe your data needs have too. You must draw out the data you\u2019ll need for each component of your app so that you can plan your backend. When signing in, you\u2019ll need access to your users and a POST route to take a username and password for verification. When editing a profile you\u2019ll need a PUT route that takes in user info and updates the user\u2019s data. This is what you\u2019re really learning in this course, how to program, which is to say, you think about the steps a user will take from opening your app to closing your app and all of the data that\u2019s needed to complete those tasks. More on this in Step 5: User Flow Chart . Remember, back-ends come before front-ends. Why? Because the front-end depends on the data coming from the back-end (your server and any third-party APIs you choose to use). Your front-end only serves as an interface for your users to interact with the data you store in the database. Quite simply put, make sure your backend matches your front-end\u2019s needs, first . Take the time to consider what your back-end has now and what may need to change. Work with your partner to clear this up, list it out on your Trello board, and make a plan of action to solve it! Remember: small steps lead to long journeys!","title":"Step 3: Check Your Backend"},{"location":"module-4/capstoneApp-planning-pt2/#step-4-sketch-out-what-it-should-look-like-visually","text":"Let\u2019s get out of backend country for a minute and think about what the app looks like to the user. This will build up into Step 5, so don\u2019t skip this one either! What does your app look like when a user arrives at your app\u2019s URL? Do they click \u201cSign-Up\u201d or start typing their information immediately? Draw it. Seriously, go steal your kids paper and map pencils and get to drawing! After the sign-up do they go straight to their profile or do they get a prompt to first enter data related to your app, i.e. in the Budget App mentioned above you might be prompted to enter a budget amount. Draw it. Each time you answer these questions, draw it! Seriously, nothing comes from nothing. So start drawing something, even if it\u2019s horrendously ugly, draw it. You\u2019ll figure it out and make it look better as you build it up. But now is the time to get these ideas into a more solid form; from ethereal/gaseous ideation to moldable jello on paper and eventually to code that tells a browser to do these specific tasks with the UI you envision.","title":"Step 4: Sketch out What it Should Look Like, Visually"},{"location":"module-4/capstoneApp-planning-pt2/#practice-problem","text":"In class we'll work on solving problems while communicating to a group. To get better at this (and you will), you'll have to practice on your own every day. YES, the first few times you work on this you're going to get stuck, frustrated, and want to give up. That's okay. Just take a breathe and take some time away from it. Ten minutes later, come back to it. Then look at the answer. Understand how it was solved and try to repeat it for yourself. In this way you can learn from REALLY smart people. Slowly, but surely, you will pick up the patterns. We want you to succeed! To make sure our students are doing the right practice, every day, for themselves we're going to give you a problem to work on here. But if you're wanting more to work on try these sites: HackerRank Geeks4Geeks LeetCode Pramp In fact, you'll want to get on HackerRank and LeetCode sooner rather than later because they actually track your progress and your profile is searchable by hiring managers and recruiters! Remember to follow the rules to whiteboarding success: Restate, rewrite, and clarify the question Write the expected return given an input Make a code plan and speak aloud with your interviewers/team/self Test and come up with edge case scenarios Revise if you can for efficiency Prompt: Collatz Conjecture - Start with a number n > 1. Find the number of steps it takes to reach one using the following process: If n is even, divide it by 2. If n is odd, multiply it by 3 and add 1. Don't worry about code on this one, get it down on paper first!!","title":"Practice Problem"},{"location":"module-4/capstoneApp-planning-pt3/","text":"Capstone App Planning - Part 3 Overview By this point you\u2019ve put quite a bit of energy into this app and you\u2019re thinking you\u2019d like to \"start coding by now\". If you\u2019re thinking that already, that\u2019s okay, you\u2019re still a young programmer. Step 5: User Flow Chart Don\u2019t start coding now, instead use those crude drawings you made in the last step and think about which one comes before which. Draw yourself and your team a chart that shows the flow of your app. It will start looking like a large if/else statement actually. Let\u2019s say a user arrives at your app\u2019s URL. If they choose \u201cSign-Up\u201d they\u2019ll be routed to the \u201cSign-Up\u201d component, else they\u2019re routed to the \u201cSign-In\u201d component. Check out this User Flow Chart for an idea of how to start. This is actually an easy step that means SO much to how long it will take you to build your app. Please stop coding and draw this out on paper with your teammate. Then, work over it again. Draw it again. Draft it over and over until you both are sure this is what you want. Think of it as a contract, because in fact, your next job will know it as a contract. See It - User Flow Charts Practice It Begin with a piece of paper and pencil to draw out how you think a user will navigate through your app and all the possibilities. Translate this over to a Google Drawing Meet with your teammate and discuss this. Work together and build an incredible app!","title":"Capstone App pt.3"},{"location":"module-4/capstoneApp-planning-pt3/#capstone-app-planning-part-3","text":"","title":"Capstone App Planning - Part 3"},{"location":"module-4/capstoneApp-planning-pt3/#overview","text":"By this point you\u2019ve put quite a bit of energy into this app and you\u2019re thinking you\u2019d like to \"start coding by now\". If you\u2019re thinking that already, that\u2019s okay, you\u2019re still a young programmer.","title":"Overview"},{"location":"module-4/capstoneApp-planning-pt3/#step-5-user-flow-chart","text":"Don\u2019t start coding now, instead use those crude drawings you made in the last step and think about which one comes before which. Draw yourself and your team a chart that shows the flow of your app. It will start looking like a large if/else statement actually. Let\u2019s say a user arrives at your app\u2019s URL. If they choose \u201cSign-Up\u201d they\u2019ll be routed to the \u201cSign-Up\u201d component, else they\u2019re routed to the \u201cSign-In\u201d component. Check out this User Flow Chart for an idea of how to start. This is actually an easy step that means SO much to how long it will take you to build your app. Please stop coding and draw this out on paper with your teammate. Then, work over it again. Draw it again. Draft it over and over until you both are sure this is what you want. Think of it as a contract, because in fact, your next job will know it as a contract.","title":"Step 5: User Flow Chart"},{"location":"module-4/capstoneApp-planning-pt3/#see-it-user-flow-charts","text":"","title":"See It - User Flow Charts"},{"location":"module-4/capstoneApp-planning-pt3/#practice-it","text":"Begin with a piece of paper and pencil to draw out how you think a user will navigate through your app and all the possibilities. Translate this over to a Google Drawing Meet with your teammate and discuss this. Work together and build an incredible app!","title":"Practice It"},{"location":"module-4/capstoneApp-planning-pt4/","text":"Capstone App Planning- Part 4 Follow your bliss and the Universe will open doors where there were only walls.\u2003\u2014Joseph Campbell Step 6: Create Wireframes So You Know What to Code Okay, you\u2019ve planned and drawn, thought and discussed and you\u2019re starting to think you\u2019ll never get to coding. That\u2019s okay. Coding without planning is like ... dumb. Take each of these steps seriously, including this one. The more concrete you have your app in your mind, the easier it will be to create. Plus, this is how real development teams work. To start, watch this How To Video on MockFlow then go to MockFlow and use the free version to start building the wireframes of your app. Practice It Tomorrow you'll be working with your teammate to finalize the look of your app. Make sure you have some things to bring to them. Maybe you can coordinate with which views you'll do and which one's they'll do... Think about which elements can be repeated: header footer buttons forms navigation All of these elements can be built once and called in place. Think about how to do this so you don't have to build these components multiple times AND so you can become a better programmer.","title":"Capstone App pt.4"},{"location":"module-4/capstoneApp-planning-pt4/#capstone-app-planning-part-4","text":"Follow your bliss and the Universe will open doors where there were only walls.\u2003\u2014Joseph Campbell","title":"Capstone App Planning- Part 4"},{"location":"module-4/capstoneApp-planning-pt4/#step-6-create-wireframes-so-you-know-what-to-code","text":"Okay, you\u2019ve planned and drawn, thought and discussed and you\u2019re starting to think you\u2019ll never get to coding. That\u2019s okay. Coding without planning is like ... dumb. Take each of these steps seriously, including this one. The more concrete you have your app in your mind, the easier it will be to create. Plus, this is how real development teams work. To start, watch this How To Video on MockFlow then go to MockFlow and use the free version to start building the wireframes of your app.","title":"Step 6: Create Wireframes So You Know What to Code"},{"location":"module-4/capstoneApp-planning-pt4/#practice-it","text":"Tomorrow you'll be working with your teammate to finalize the look of your app. Make sure you have some things to bring to them. Maybe you can coordinate with which views you'll do and which one's they'll do... Think about which elements can be repeated: header footer buttons forms navigation All of these elements can be built once and called in place. Think about how to do this so you don't have to build these components multiple times AND so you can become a better programmer.","title":"Practice It"},{"location":"module-4/capstoneApp-planning-pt5/","text":"Capstone Planning - Part 5 Success is not an activity but a process. Step 7: Predict your Problems and Search GitHub for Solutions This step is going to be harder than you think and that\u2019s okay. You can circle back to it as you need. But attempting to predict your problems now will pay huge dividends later. Start by asking your instructor for guidance on specific parts of your app you think will be more difficult. Also use GitHub. Remember, this is a social media for developers and many people post the code for free to the public here. Simply search: \u201cAngular sign-in component\u201d or \u201cReact drag-and-drop\u201d. Many times you can find solutions to problems you have. Over the past two weeks you've been led through the following steps as a way of guiding your thinking and helping you to create a visualized organization for your thoughts. We want you to be successful and one of the things we must teach our students is how to think like programmer, a good programmer. Let's review the steps we've worked through. Step 0: Pick an idea, Pick a partner Step 1: List Core Functions of your app Step 2: Simplify your core functionality Step 3: Prepare your database and server first! Step 4: Sketch Out the Visuals of the App (the UI) Step 5: Plan User Flow Step 6: Create a Wireframe Step 7: Predict your Problems and Research Get on the Hire Page Step 1 - Fill out the profile template: On your local machine, create a new file firstname-lastname.md . In the file, copy and paste this profile template content . Replace the content with your information but don't change the syntax. Example Markdown File for Hire Page Profile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 --- layout: resume #don 't touch categories: [ hire, graduation, austincodingacademy ] # don't touch fullname: Clayton Berger jobtitle: JavaScript Developer location: Austin, TX blurb: \"A brief statement about you and the role you're seeking. Similar to your LinkedIn headline.\" # lines starting with `#` are comments and are not read by the compiler # first item must be JavaScript or C# or .NET or C#/.NET # the first 3 will display on your profile card on the main page. but list as many as you want, they will be all be visible on your individual profile page skills: - JavaScript - Node.js - React - Redux - Express.js - HTML - CSS - Testing - Git/GitHub - REST APIs github: https://github.com/hipperger linkedin: https://www.linkedin.com/in/claytonberger email: clayton@austincodingacademy.com phone: 555-555-5555 website: mydevwebsite.com workexperience: - company: Coca-Cola dates: October 2014 - March 2018 title: Logistics Manager location: Austin, TX - company: Coca-Cola dates: June 2014 - February 2016 title: Project Manager location: Austin, TX - company: Dominos Pizza dates: April 2008 - May 2014 title: Delivery Driver location: Austin, TX education: - name: Austin Coding Academy dates: June 2020 - April 2021 degree: Web Development projects: - name: Smart Shop desc: grocery shopping list assistant url: # link to your deployed project --- blank Step 2 - Create a Gravatar (automatic profile photo): On the Gravatar home page , click the blue button \"Create Your Own Gravatar\". When signing up, use the same email address you included in your profile (this is important!). Upload a profile photo and you're all set! We'll use your email address to automatically find your Gravatar photo and set it as your profile's headshot. Watch the Video on Creating a Gravatar Step 3 - Attend Job Placement class In Job Placement you get the chance to make a pull request to AustinCodingAcademy.com to add your profile! We'll see you there.","title":"Capstone App pt.5"},{"location":"module-4/capstoneApp-planning-pt5/#capstone-planning-part-5","text":"Success is not an activity but a process.","title":"Capstone Planning - Part 5"},{"location":"module-4/capstoneApp-planning-pt5/#step-7-predict-your-problems-and-search-github-for-solutions","text":"This step is going to be harder than you think and that\u2019s okay. You can circle back to it as you need. But attempting to predict your problems now will pay huge dividends later. Start by asking your instructor for guidance on specific parts of your app you think will be more difficult. Also use GitHub. Remember, this is a social media for developers and many people post the code for free to the public here. Simply search: \u201cAngular sign-in component\u201d or \u201cReact drag-and-drop\u201d. Many times you can find solutions to problems you have. Over the past two weeks you've been led through the following steps as a way of guiding your thinking and helping you to create a visualized organization for your thoughts. We want you to be successful and one of the things we must teach our students is how to think like programmer, a good programmer. Let's review the steps we've worked through. Step 0: Pick an idea, Pick a partner Step 1: List Core Functions of your app Step 2: Simplify your core functionality Step 3: Prepare your database and server first! Step 4: Sketch Out the Visuals of the App (the UI) Step 5: Plan User Flow Step 6: Create a Wireframe Step 7: Predict your Problems and Research","title":"Step 7: Predict your Problems and Search GitHub for Solutions"},{"location":"module-4/capstoneApp-planning-pt5/#get-on-the-hire-page","text":"","title":"Get on the Hire Page"},{"location":"module-4/capstoneApp-planning-pt5/#step-1-fill-out-the-profile-template","text":"On your local machine, create a new file firstname-lastname.md . In the file, copy and paste this profile template content . Replace the content with your information but don't change the syntax. Example Markdown File for Hire Page Profile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 --- layout: resume #don 't touch categories: [ hire, graduation, austincodingacademy ] # don't touch fullname: Clayton Berger jobtitle: JavaScript Developer location: Austin, TX blurb: \"A brief statement about you and the role you're seeking. Similar to your LinkedIn headline.\" # lines starting with `#` are comments and are not read by the compiler # first item must be JavaScript or C# or .NET or C#/.NET # the first 3 will display on your profile card on the main page. but list as many as you want, they will be all be visible on your individual profile page skills: - JavaScript - Node.js - React - Redux - Express.js - HTML - CSS - Testing - Git/GitHub - REST APIs github: https://github.com/hipperger linkedin: https://www.linkedin.com/in/claytonberger email: clayton@austincodingacademy.com phone: 555-555-5555 website: mydevwebsite.com workexperience: - company: Coca-Cola dates: October 2014 - March 2018 title: Logistics Manager location: Austin, TX - company: Coca-Cola dates: June 2014 - February 2016 title: Project Manager location: Austin, TX - company: Dominos Pizza dates: April 2008 - May 2014 title: Delivery Driver location: Austin, TX education: - name: Austin Coding Academy dates: June 2020 - April 2021 degree: Web Development projects: - name: Smart Shop desc: grocery shopping list assistant url: # link to your deployed project --- blank","title":"Step 1 - Fill out the profile template:"},{"location":"module-4/capstoneApp-planning-pt5/#step-2-create-a-gravatar-automatic-profile-photo","text":"On the Gravatar home page , click the blue button \"Create Your Own Gravatar\". When signing up, use the same email address you included in your profile (this is important!). Upload a profile photo and you're all set! We'll use your email address to automatically find your Gravatar photo and set it as your profile's headshot. Watch the Video on Creating a Gravatar","title":"Step 2 - Create a Gravatar (automatic profile photo):"},{"location":"module-4/capstoneApp-planning-pt5/#step-3-attend-job-placement-class","text":"In Job Placement you get the chance to make a pull request to AustinCodingAcademy.com to add your profile! We'll see you there.","title":"Step 3 - Attend Job Placement class"},{"location":"module-4/checkpointTwo-smallBizApp/","text":"Checkpoint Two: Small Biz App This week we will build our second and final application from scratch. It will be a small business app that integrates everything we've learned up until now. During the creation of this app we will make use of state , props , life cycle methods, conditional rendering, Material UI, React Router, authentication (with cookies) and Redux ( mapStateToProps , mapDispatchToProps , thunk ). We are going to create an App that shows a list of small businesses and their details when you click on the them. Additionally, a user can log in and if they are logged in they can add or delete a listing. You will also use thunk, likely to hit an external API, as we integrate the Google Maps API into this project. You will have both class days this week to complete the project and upload your github URL turn it in. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the following example images. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Just like last time, do your best and have fun! Examples Listings Biz Details Sign-In Admin View Add New Listing Setup Run create-react-app small-business in the folder of your choice to create a project called small-business that will house your application. We will be working from scratch so you will need to create your own github repository for this project. Do that now. Once your project is created (with create-react-app) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY> to connect your local application to your remote repository. 1. Initializing Once your app is set up, navigate to the folder and npm install the following dependencies: Checklist of Dependencies @material-ui/core @material-ui/icons cookie google-map-react (optional) react-redux react-router react-router-dom redux redux-thunk All-in-One 1 npm i @material-ui/core @material-ui/icons cookie google-map-react react-redux react-router react-router-dom redux redux-thunk 2. Description of Parts The app will consist of two parts. Parts that are accessible to the public and parts that require a login. Accessible to the Public This will include the Listing component and the Details component. Note that you can call these whatever you like. These correspond to examples 1 and 2. Require a Login Certain functionality on the website should require the user to log in. A login screen is shown in example 3. You'll also want to use some conditional rendering to change the navbar so that if a user is logged in it no longer shows the \"login\" link and instead shows \"logout\". Other things a user can do when logged in are delete a listing and navigate to the \"/add\" page which should be protected by a private route. 3. Parts Breakdown Listing Screen - Example 1 The listing screen should show a table of the small businesses you selected. Please list 4 or 5. Try to take some data from real businesses in town or from another town of your choice. At minimum, the data that is required are: business name description address operating hours It is not a requirement that this table is paginated. You may do so if you like if you intend to add numerous businesses and you think it will degrade the user experience. Details Screen - Example 2 This screen should rearrange the data that is presented in the listing table. It should present it in a user-friendly way and incorporate an outside API to go along with it. We will incorporate the Google Maps API for this. Reference the Google Maps API documentation for this but you will need a Google Cloud account. You should already have this from the JS311 course. I will provide more details about the Google Maps API below. Login Screen - Example 3 This is a simple login form with two fields, a username and a password. Make sure that you use a type of password on the \"password\" input so that we cannot see which characters we are typing. On submit, the form should set a user cookie and possibly store the user in the Redux state. That's up to you. Once logged in, add a small bar below the navbar (it should exist on every page) that notifies the user they are logged in and shows their username. Logged In Listing - Example 4 Conditionally render a \"delete\" column on the table with an icon so that the user can delete a given row. Add Listing Page - Example 5 Provide a form with which the logged-in user can enter data about a new small business and save it. Once saved, it should be added to the Redux store and should automatically be populated in the Listing table when you navigate back to that page. This \"Add\" page should be protected by a private route which means a user can't navigate to it if they are not logged in. Also, it would be cool if you update the Google Map as you fill out the address field so that the user gets a preview regarding the address. You would do something like that using the componentDidUpdate functionality of a class component. Logout When a user clicks the logout button, remove the cookie and reset the \"user\" state in Redux. 4. More Technical Redux State You will probably want at least three properties in your Redux state: user listings map NOTE: You do not have to name these the same way. Redux Actions You'll want actions that delete a listing, add a listing, login/logout, and fetch coordinates for your map given a certain address. You may have more or less depending on how you structure your app. React Router As far as React Router goes, find an example on the web of using private routes. You can search \"Private Routes React\" in Google or look at your previous homework assignments. Your \"isAuthenticated\" function that complements the private route may use the \"cookie\" npm package to parse the cookie. Remember you can set a cookie by writing document.cookie = \"user=<USERNAME>;max-age=60*1000*5; Google Maps Make sure to reference the Google Maps Documentation . You will need to get an API key. Here's a URL example that will retrieve the coordinates for your map given a certain address: https://maps.google.com/maps/api/geocode/json?key=<API_KEY>&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA . You will want to follow the instructions closely on setting up credentials for your API key. Finally on Google Maps, you can use the sample code they provided or use an NPM package that helps incorporate Maps into React. An example of such an NPM package can be found at google-map-react . Login On the login page, you do not actually have to validate the login. Using any username and password combination is fine for this project. Add Listing If you use componentDidUpdate you'll know when certain properties of state have changed. You'll probably be changing these properties as you type in the Text field. If the address has changed, you can use this to call your getCoordinates action (or whatever you named it) and get the lat/lng for your map. This will allow you to update your map in real time. Rubric 20pts - Without logging in a user can: view a list of small businesses view details of each small business 25pts - After a user logs in they can: delete a business listing add a business listing logout 25pts - Redux properly use action creators properly use reducers properly use Redux app state 30pts - Google Maps API is integrated to show small business location","title":"Checkpoint Two"},{"location":"module-4/checkpointTwo-smallBizApp/#checkpoint-two-small-biz-app","text":"This week we will build our second and final application from scratch. It will be a small business app that integrates everything we've learned up until now. During the creation of this app we will make use of state , props , life cycle methods, conditional rendering, Material UI, React Router, authentication (with cookies) and Redux ( mapStateToProps , mapDispatchToProps , thunk ). We are going to create an App that shows a list of small businesses and their details when you click on the them. Additionally, a user can log in and if they are logged in they can add or delete a listing. You will also use thunk, likely to hit an external API, as we integrate the Google Maps API into this project. You will have both class days this week to complete the project and upload your github URL turn it in. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the following example images. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Just like last time, do your best and have fun!","title":"Checkpoint Two: Small Biz App"},{"location":"module-4/checkpointTwo-smallBizApp/#examples","text":"Listings Biz Details Sign-In Admin View Add New Listing","title":"Examples"},{"location":"module-4/checkpointTwo-smallBizApp/#setup","text":"Run create-react-app small-business in the folder of your choice to create a project called small-business that will house your application. We will be working from scratch so you will need to create your own github repository for this project. Do that now. Once your project is created (with create-react-app) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY> to connect your local application to your remote repository.","title":"Setup"},{"location":"module-4/checkpointTwo-smallBizApp/#1-initializing","text":"Once your app is set up, navigate to the folder and npm install the following dependencies: Checklist of Dependencies @material-ui/core @material-ui/icons cookie google-map-react (optional) react-redux react-router react-router-dom redux redux-thunk All-in-One 1 npm i @material-ui/core @material-ui/icons cookie google-map-react react-redux react-router react-router-dom redux redux-thunk","title":"1. Initializing"},{"location":"module-4/checkpointTwo-smallBizApp/#2-description-of-parts","text":"The app will consist of two parts. Parts that are accessible to the public and parts that require a login.","title":"2. Description of Parts"},{"location":"module-4/checkpointTwo-smallBizApp/#accessible-to-the-public","text":"This will include the Listing component and the Details component. Note that you can call these whatever you like. These correspond to examples 1 and 2.","title":"Accessible to the Public"},{"location":"module-4/checkpointTwo-smallBizApp/#require-a-login","text":"Certain functionality on the website should require the user to log in. A login screen is shown in example 3. You'll also want to use some conditional rendering to change the navbar so that if a user is logged in it no longer shows the \"login\" link and instead shows \"logout\". Other things a user can do when logged in are delete a listing and navigate to the \"/add\" page which should be protected by a private route.","title":"Require a Login"},{"location":"module-4/checkpointTwo-smallBizApp/#3-parts-breakdown","text":"","title":"3. Parts Breakdown"},{"location":"module-4/checkpointTwo-smallBizApp/#listing-screen-example-1","text":"The listing screen should show a table of the small businesses you selected. Please list 4 or 5. Try to take some data from real businesses in town or from another town of your choice. At minimum, the data that is required are: business name description address operating hours It is not a requirement that this table is paginated. You may do so if you like if you intend to add numerous businesses and you think it will degrade the user experience.","title":"Listing Screen - Example 1"},{"location":"module-4/checkpointTwo-smallBizApp/#details-screen-example-2","text":"This screen should rearrange the data that is presented in the listing table. It should present it in a user-friendly way and incorporate an outside API to go along with it. We will incorporate the Google Maps API for this. Reference the Google Maps API documentation for this but you will need a Google Cloud account. You should already have this from the JS311 course. I will provide more details about the Google Maps API below.","title":"Details Screen - Example 2"},{"location":"module-4/checkpointTwo-smallBizApp/#login-screen-example-3","text":"This is a simple login form with two fields, a username and a password. Make sure that you use a type of password on the \"password\" input so that we cannot see which characters we are typing. On submit, the form should set a user cookie and possibly store the user in the Redux state. That's up to you. Once logged in, add a small bar below the navbar (it should exist on every page) that notifies the user they are logged in and shows their username.","title":"Login Screen - Example 3"},{"location":"module-4/checkpointTwo-smallBizApp/#logged-in-listing-example-4","text":"Conditionally render a \"delete\" column on the table with an icon so that the user can delete a given row.","title":"Logged In Listing - Example 4"},{"location":"module-4/checkpointTwo-smallBizApp/#add-listing-page-example-5","text":"Provide a form with which the logged-in user can enter data about a new small business and save it. Once saved, it should be added to the Redux store and should automatically be populated in the Listing table when you navigate back to that page. This \"Add\" page should be protected by a private route which means a user can't navigate to it if they are not logged in. Also, it would be cool if you update the Google Map as you fill out the address field so that the user gets a preview regarding the address. You would do something like that using the componentDidUpdate functionality of a class component.","title":"Add Listing Page - Example 5"},{"location":"module-4/checkpointTwo-smallBizApp/#logout","text":"When a user clicks the logout button, remove the cookie and reset the \"user\" state in Redux.","title":"Logout"},{"location":"module-4/checkpointTwo-smallBizApp/#4-more-technical","text":"Redux State You will probably want at least three properties in your Redux state: user listings map NOTE: You do not have to name these the same way. Redux Actions You'll want actions that delete a listing, add a listing, login/logout, and fetch coordinates for your map given a certain address. You may have more or less depending on how you structure your app. React Router As far as React Router goes, find an example on the web of using private routes. You can search \"Private Routes React\" in Google or look at your previous homework assignments. Your \"isAuthenticated\" function that complements the private route may use the \"cookie\" npm package to parse the cookie. Remember you can set a cookie by writing document.cookie = \"user=<USERNAME>;max-age=60*1000*5; Google Maps Make sure to reference the Google Maps Documentation . You will need to get an API key. Here's a URL example that will retrieve the coordinates for your map given a certain address: https://maps.google.com/maps/api/geocode/json?key=<API_KEY>&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA . You will want to follow the instructions closely on setting up credentials for your API key. Finally on Google Maps, you can use the sample code they provided or use an NPM package that helps incorporate Maps into React. An example of such an NPM package can be found at google-map-react . Login On the login page, you do not actually have to validate the login. Using any username and password combination is fine for this project. Add Listing If you use componentDidUpdate you'll know when certain properties of state have changed. You'll probably be changing these properties as you type in the Text field. If the address has changed, you can use this to call your getCoordinates action (or whatever you named it) and get the lat/lng for your map. This will allow you to update your map in real time.","title":"4. More Technical"},{"location":"module-4/checkpointTwo-smallBizApp/#rubric","text":"20pts - Without logging in a user can: view a list of small businesses view details of each small business 25pts - After a user logs in they can: delete a business listing add a business listing logout 25pts - Redux properly use action creators properly use reducers properly use Redux app state 30pts - Google Maps API is integrated to show small business location","title":"Rubric"},{"location":"module-4/class-13/","text":"Class 13: Planning and Checkpoint Two Sometimes we\u2019re tested not to show our weaknesses, but to discover our strengths. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Collaborating with a partner in App Design Data management Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone Planning with Teammates - 30 mins Checkpoint 2 Project time - 60 mins Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today is a very BIG day! Please come in prepared and ready to hit the ground running. We'll spend 30 minutes after Whiteboarding and Discussion to plan our Capstone Project with your teammates then we'll move on to discussion, planning, and the building of your Checkpoint 2 Project . Instructions Part 1 Instructions In your pre-class lesson, you read about the importance of your back-end providing the data your front-end needs to share with users. Get with your partner now and: Take a look at the core functions of your app. Look at the routes and database your server from 311 currently have. What needs to be added? What needs to be changed? Write it out, plan it into tasks, and add it to your Trello board. Bring out the drawings you did last night. Compare and consider. Do you two have the same vision? Are you able to agree? Make re-drawings and plan together what it will look like. Consider too that you've been using Material UI. Should you use the components offered with it? Take pictures of your drawings and add them to your blank sign-in repo in a folder called: planningImages List anything important and link your Trello board to your README.md file so you have a place to gather all of your needed materials. Part 2 Instructions Now that you've got some plans laid out for your Capstone app let's look at your Checkpoint 2 Project . All of the information and instruction you'll need is on that page. Remember, you also have the next class to work on the checkpoint. Spend time researching any material you feel uncomfortable with. Student Feedback Loading\u2026 - Exit Recap, Attendance, and Reminders, 5 mins Create Checkpoint-2 Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 13"},{"location":"module-4/class-13/#class-13-planning-and-checkpoint-two","text":"Sometimes we\u2019re tested not to show our weaknesses, but to discover our strengths.","title":"Class 13: Planning and Checkpoint Two"},{"location":"module-4/class-13/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Collaborating with a partner in App Design Data management Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone Planning with Teammates - 30 mins Checkpoint 2 Project time - 60 mins Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-13/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-4/class-13/#interview-challenge-15-mins","text":"Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-13/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-13/#creation-time-60-90-mins","text":"Today is a very BIG day! Please come in prepared and ready to hit the ground running. We'll spend 30 minutes after Whiteboarding and Discussion to plan our Capstone Project with your teammates then we'll move on to discussion, planning, and the building of your Checkpoint 2 Project .","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-13/#instructions","text":"","title":"Instructions"},{"location":"module-4/class-13/#part-1-instructions","text":"In your pre-class lesson, you read about the importance of your back-end providing the data your front-end needs to share with users. Get with your partner now and: Take a look at the core functions of your app. Look at the routes and database your server from 311 currently have. What needs to be added? What needs to be changed? Write it out, plan it into tasks, and add it to your Trello board. Bring out the drawings you did last night. Compare and consider. Do you two have the same vision? Are you able to agree? Make re-drawings and plan together what it will look like. Consider too that you've been using Material UI. Should you use the components offered with it? Take pictures of your drawings and add them to your blank sign-in repo in a folder called: planningImages List anything important and link your Trello board to your README.md file so you have a place to gather all of your needed materials.","title":"Part 1 Instructions"},{"location":"module-4/class-13/#part-2-instructions","text":"Now that you've got some plans laid out for your Capstone app let's look at your Checkpoint 2 Project . All of the information and instruction you'll need is on that page. Remember, you also have the next class to work on the checkpoint. Spend time researching any material you feel uncomfortable with.","title":"Part 2 Instructions"},{"location":"module-4/class-13/#student-feedback","text":"Loading\u2026 -","title":"Student Feedback"},{"location":"module-4/class-13/#exit-recap-attendance-and-reminders-5-mins","text":"Create Checkpoint-2 Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-14/","text":"Class 14: Checkpoint Two - Small Biz App Great things never come from comfort zones. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Critically thinking through the flow of user with conditional paths Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone User Flow Planning - 45 mins Checkpoint 2 Work-time - 45 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Compare your Google Drawings to your teammate's and decide what tweaks need to be made. Agree upon one diagram that clearly represents your app. Take the flow to another group and ask them to walk through it for themselves without your help. Did it make sense to them? Repeat the last step. What tasks are on your Trello board that you think you can start doing today? Finish today? Go do it. Try to time box your tasks. Set a timer for 15 minutes and see what you can get done in that time. When the timer goes off, stand up, stretch, walk around, breathe, count to 30, then return. Rinse and repeat. Continue working on the Small Business App from last class. If you finish this exercise early, help a friend! Again, one of the best ways to learn is to teach. You will need to have this assignment submitted in Zollege by this weekend. Project Examples & Instructions Refer to the Small Business App examples and instructions . Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 14 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 14 Sm. Biz App"},{"location":"module-4/class-14/#class-14-checkpoint-two-small-biz-app","text":"Great things never come from comfort zones.","title":"Class 14: Checkpoint Two - Small Biz App"},{"location":"module-4/class-14/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Critically thinking through the flow of user with conditional paths Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone User Flow Planning - 45 mins Checkpoint 2 Work-time - 45 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-14/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-4/class-14/#interview-challenge-15-mins","text":"Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-14/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-14/#creation-time-60-90-mins","text":"Compare your Google Drawings to your teammate's and decide what tweaks need to be made. Agree upon one diagram that clearly represents your app. Take the flow to another group and ask them to walk through it for themselves without your help. Did it make sense to them? Repeat the last step. What tasks are on your Trello board that you think you can start doing today? Finish today? Go do it. Try to time box your tasks. Set a timer for 15 minutes and see what you can get done in that time. When the timer goes off, stand up, stretch, walk around, breathe, count to 30, then return. Rinse and repeat. Continue working on the Small Business App from last class. If you finish this exercise early, help a friend! Again, one of the best ways to learn is to teach. You will need to have this assignment submitted in Zollege by this weekend.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-14/#project-examples-instructions","text":"Refer to the Small Business App examples and instructions .","title":"Project Examples &amp; Instructions"},{"location":"module-4/class-14/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-14/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-14/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 14 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-15/","text":"Class 15: Final Project There is no magic to achievement. It is really about hard work, choices, and persistence.\" - Michelle Obama Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Reusability, as it relates to programming Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone Project Time Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins This week is dedicated entirely to your final projects. However please make sure you read the pre-homework for both days. The pre-homework will discuss debugging and deployment. Ask you instructor if you have any questions surrounding your final project, technical or otherwise and he/she will assist you. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Capstone App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 15"},{"location":"module-4/class-15/#class-15-final-project","text":"There is no magic to achievement. It is really about hard work, choices, and persistence.\" - Michelle Obama","title":"Class 15: Final Project"},{"location":"module-4/class-15/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Reusability, as it relates to programming Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Capstone Project Time Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-15/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-4/class-15/#interview-challenge-15-mins","text":"Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-15/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-15/#creation-time-60-90-mins","text":"This week is dedicated entirely to your final projects. However please make sure you read the pre-homework for both days. The pre-homework will discuss debugging and deployment. Ask you instructor if you have any questions surrounding your final project, technical or otherwise and he/she will assist you.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-15/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-15/#exit-recap-attendance-and-reminders-5-mins","text":"Create Capstone App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-16/","text":"Class 16: Capstone App Presentation Sometimes later becomes never. Do it now! Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Thinking ahead to solve potential problems Questions for Student-Led Discussion Interview Challenge Student Presentations End of Course Evaluation Creation Time Research Solutions for Potential Problems Work on your Capstone Project Finish the file and Gravatar to later get on the Hire Page Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here Student Presentations, 15 mins See Student Presentations List End of Course Feedback Please take 5 - 10 minutes now to complete the End of Course Evaluation . This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community. Creation Time, 60-90 mins After all pitches have been made use this time very wisely to ask your instructor for suggestions to solve specific problems you foresee, research, plan with your teammate, and tackle any tasks you can during class time. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create/Assign Class 16 Blog Assignment Create/Assign Capstone App Checkpoint Assignment Review due date for Capstone App with instructor (recommended 2 weeks after course ends) Complete the End of Course Evaluation","title":"Class 16"},{"location":"module-4/class-16/#class-16-capstone-app-presentation","text":"Sometimes later becomes never. Do it now!","title":"Class 16: Capstone App Presentation"},{"location":"module-4/class-16/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Thinking ahead to solve potential problems Questions for Student-Led Discussion Interview Challenge Student Presentations End of Course Evaluation Creation Time Research Solutions for Potential Problems Work on your Capstone Project Finish the file and Gravatar to later get on the Hire Page Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-16/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-4/class-16/#interview-challenge-15-mins","text":"Restate , rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-16/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-16/#end-of-course-feedback","text":"Please take 5 - 10 minutes now to complete the End of Course Evaluation . This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community.","title":"End of Course Feedback"},{"location":"module-4/class-16/#creation-time-60-90-mins","text":"After all pitches have been made use this time very wisely to ask your instructor for suggestions to solve specific problems you foresee, research, plan with your teammate, and tackle any tasks you can during class time.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-16/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-16/#exit-recap-attendance-and-reminders-5-mins","text":"Create/Assign Class 16 Blog Assignment Create/Assign Capstone App Checkpoint Assignment Review due date for Capstone App with instructor (recommended 2 weeks after course ends) Complete the End of Course Evaluation","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/debugging-intro/","text":"Intro to Debugging In a gentle way, you can shake the world.\u2003\u2014Mahatma Gandhi Recap and Review Remember to stay on task! All of this planning is not for naught! It's intended to teach you actual professional practices which are intended to keep you focused and mentally organized. Any time you're feeling overwhelmed it's because you're thinking of all the things to do after what you need to do next. Overview Sometimes our applications are doing what we want them to do and we can't figure out why. The process of figuring out what's wrong with our code and fixing it is called \"debugging\". There are various ways to debug things depending on if you are working on the frontend or the backend. Additionally, some debugging tools even tie into your IDE/text editor (VS Code) and allow you to step through your code line by line. For our purposes we will keep this debugging session focused on the frontend. The Debugger Statement You may have already picked this up along the way but if you want to stop the execution of your code on a certain line you can simply type debugger anywhere in your code. For example: Debugger Statement Example 1 2 3 4 5 6 7 8 9 10 const App = ( props ) => { const count = props . count debugger // <-- JavaScript keyword return ( < div > < h1 > Here ' s our App < /h1> < /div> ) } The debugger will stop your code after the `count variable is initialized. You might put a debugger there to analyze your props if the count is not what you expect. An important thing to note however is that you cannot place the debugger statement inside of HTML code. It needs to be in the JavaScript logic. So that means you can't do something like this: Broken Debugger Statement Example 1 2 3 4 5 6 7 8 9 10 const App = ( props ) => { const count = props . count return ( < div > debugger // <-- JavaScript keyword < h1 > Here ' s our App < /h1> < /div> ) } However, there are still a lot of options for places to use this especially when you are using class components with multiple methods. For example: Another user of the debugger Keyword 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class App extends Component { state = { text : '' } submit = ( e ) => { e . preventDefault () // check text const text = this . state . text debugger // make an api call with a redux action: submitForm this . props . submitForm ( text ) } render () { return ( < div > < form onSubmit = { this . submit } > < TextField value = { this . text } /> < Button type = \"submit\" > Submit < /Button> < /form> < /div> ) } } And yes it also means you can use the debugger statement in your Redux actions or reducers. debugger used in Redux Action 1 2 3 4 5 6 7 8 9 10 const users = ( state = [], action ) => { switch ( action . type ) { case 'ADD_USER' : // check value debugger return [ ... state , action . value ] default : return state } } Once the debugger stops, you can then \"step over\", \"step into\" or \"step out of\" different functions and lines of code. These are shown by the buttons on the bottom left. The \"play\" button will resume execution and take you either to the next debugger statement or simply stop debugging if there's nothing left to do. The most common operation is the \"step over\" button indicated by the circular arrow. Clicking that button will take you to the next line of code. Console Log Another way of debugging is to make use of console.log statements. This is another thing you've already seen but we can brush up on where to use it and how to see it in the browser. In your JS311 class, when you console.log ged something it showed up in the terminal. That's not how it works with code on the front-end. When you use the console.log statement in React the items that you logged appear in the browser's console just like in 101. Again, just like the debugger statement, this can be placed anywhere in the JavaScript context of your code. So for example in our reducer: Log Statement in a Redux Reducer 1 2 3 4 5 6 7 8 9 const users = ( state = [], action ) => { switch ( action . type ) { case 'ADD_USER' : console . log ( 'The user: ' , action . value ) return [ ... state , action . value ] default : return state } } And now the user will be logged to the console window. See It - Debugging in VS Code Know Your Docs MDN Docs - Debugger Statement VS Code Docs - Debugging","title":"Debugging"},{"location":"module-4/debugging-intro/#intro-to-debugging","text":"In a gentle way, you can shake the world.\u2003\u2014Mahatma Gandhi","title":"Intro to Debugging"},{"location":"module-4/debugging-intro/#recap-and-review","text":"Remember to stay on task! All of this planning is not for naught! It's intended to teach you actual professional practices which are intended to keep you focused and mentally organized. Any time you're feeling overwhelmed it's because you're thinking of all the things to do after what you need to do next.","title":"Recap and Review"},{"location":"module-4/debugging-intro/#overview","text":"Sometimes our applications are doing what we want them to do and we can't figure out why. The process of figuring out what's wrong with our code and fixing it is called \"debugging\". There are various ways to debug things depending on if you are working on the frontend or the backend. Additionally, some debugging tools even tie into your IDE/text editor (VS Code) and allow you to step through your code line by line. For our purposes we will keep this debugging session focused on the frontend.","title":"Overview"},{"location":"module-4/debugging-intro/#the-debugger-statement","text":"You may have already picked this up along the way but if you want to stop the execution of your code on a certain line you can simply type debugger anywhere in your code. For example: Debugger Statement Example 1 2 3 4 5 6 7 8 9 10 const App = ( props ) => { const count = props . count debugger // <-- JavaScript keyword return ( < div > < h1 > Here ' s our App < /h1> < /div> ) } The debugger will stop your code after the `count variable is initialized. You might put a debugger there to analyze your props if the count is not what you expect. An important thing to note however is that you cannot place the debugger statement inside of HTML code. It needs to be in the JavaScript logic. So that means you can't do something like this: Broken Debugger Statement Example 1 2 3 4 5 6 7 8 9 10 const App = ( props ) => { const count = props . count return ( < div > debugger // <-- JavaScript keyword < h1 > Here ' s our App < /h1> < /div> ) } However, there are still a lot of options for places to use this especially when you are using class components with multiple methods. For example: Another user of the debugger Keyword 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class App extends Component { state = { text : '' } submit = ( e ) => { e . preventDefault () // check text const text = this . state . text debugger // make an api call with a redux action: submitForm this . props . submitForm ( text ) } render () { return ( < div > < form onSubmit = { this . submit } > < TextField value = { this . text } /> < Button type = \"submit\" > Submit < /Button> < /form> < /div> ) } } And yes it also means you can use the debugger statement in your Redux actions or reducers. debugger used in Redux Action 1 2 3 4 5 6 7 8 9 10 const users = ( state = [], action ) => { switch ( action . type ) { case 'ADD_USER' : // check value debugger return [ ... state , action . value ] default : return state } } Once the debugger stops, you can then \"step over\", \"step into\" or \"step out of\" different functions and lines of code. These are shown by the buttons on the bottom left. The \"play\" button will resume execution and take you either to the next debugger statement or simply stop debugging if there's nothing left to do. The most common operation is the \"step over\" button indicated by the circular arrow. Clicking that button will take you to the next line of code.","title":"The Debugger Statement"},{"location":"module-4/debugging-intro/#console-log","text":"Another way of debugging is to make use of console.log statements. This is another thing you've already seen but we can brush up on where to use it and how to see it in the browser. In your JS311 class, when you console.log ged something it showed up in the terminal. That's not how it works with code on the front-end. When you use the console.log statement in React the items that you logged appear in the browser's console just like in 101. Again, just like the debugger statement, this can be placed anywhere in the JavaScript context of your code. So for example in our reducer: Log Statement in a Redux Reducer 1 2 3 4 5 6 7 8 9 const users = ( state = [], action ) => { switch ( action . type ) { case 'ADD_USER' : console . log ( 'The user: ' , action . value ) return [ ... state , action . value ] default : return state } } And now the user will be logged to the console window.","title":"Console Log"},{"location":"module-4/debugging-intro/#see-it-debugging-in-vs-code","text":"","title":"See It - Debugging in VS Code"},{"location":"module-4/debugging-intro/#know-your-docs","text":"MDN Docs - Debugger Statement VS Code Docs - Debugging","title":"Know Your Docs"},{"location":"module-4/deployment/","text":"App Deployment Happiness is a butterfly, which when pursued, is always just beyond your grasp, but which, if you will sit down quietly, may alight upon you.\u2003\u2014Nathaniel Hawthorne Recap In JS311 we deployed Express apps to Google App Engine. We are going to do something very similar for our React apps. This pre-homework will show you how to combine your frontend and your backend into one working app. Overview We learned in the last class why deploying our apps is a necessity. We want everyone on the internet to be able to access what we've created right? Now we also want to combine our frontend and backends and have both projects from JS311 and JS411 working in tandem. Deploying with GCP Basically what we are going to do is make use of the knowledge we gained last time about what the build process does in create-react-app , and combine that with Express's use.static functionality to serve the built files. We've created a simple repo for you to get started with. Let's practice these steps and then you will practice again by combining your app with your project from JS311. Clone the following express repo Copy your entire folder from your current React app into the gcloud-express/ folder and rename the app: client/ Hint: You might want to delete the node_modules/ folder inside of your React app to make the copying quicker Navigate to the new client/ folder inside of gcloud-express/ If you removed the node_modules/ folder you will want to re-install the dependencies by running npm i in the client/ folder. After that's done, run npm run build to generate the static files. Now run npm start inside of gcloud-express/ and you should see your app running in the browser The setup is complete and now it's time to deploy your application: First, let's create a new project under the GCloud account that we set up in JS311. To do that, click on the project button as shown. It will display a modal that looks like this: Click \"New Project\" in the upper right-hand corner and name the project ACA-express . If you have any trouble with that name try adding a random number after it. Once the project has been created there's only one thing left to do. Go to the terminal where the gcloud-express repo is and run the command gcloud app deploy . --project=aca-express . Important: If you added a random number after your project name you will want to add it to this command as well If this is the first time you are running the command you will be asked to specify a region. Choose \"us-east-1\" which should be number 13. Then continue the upload process. Navigate to the dashboard page of \"App Engine\" (you can search for App Engine on the main Google Cloud page) and find your app's url. For example, aca-express.appspot.com . Open the app and you should see your project running. for creating a new project and then specify that project id in the gcloud app deploy command. Working with APIs During your time at ACA you've learned how to use fetch and also axios to make API requests. At some point, you probably already tried to hit your JS311 APIs from your JS411 React app, but if you didn't we'll talk about it. Prior to combining the two apps, if you wanted to hit your API from JS311 you needed the full gcloud url of that app engine project. It may have looked something like this: my-project.appspot.com . So if you wanted to hit an API you created to get users for example you would do a fetch like this: Example API Request 1 2 3 4 5 fetch ( 'https://my-project.appspot.com/users' ) . then ( res => res . json ()) . then ( data => { // do something with users data }) Note: You may not have a users endpoint, that was just an example The only change here is that when the two Apps are combined, so you no longer need the whole URL and can simply run: Example API Request in same folder 1 2 3 4 5 fetch ( '/users' ) . then ( res => res . json ()) . then ( data => { // do something with users data }) Since the frontend and backend are being served from the same place, Express knows how to handle this. The only situation that could arise is if you named a route the same thing in Express and React Router. For example if you had a page called /users on the frontend. Try to avoid that situation by calling it /listusers or something like that. After this you should be good to go! If you have any issues deploying your app talk to the instructor. The hardest part is making sure your app runs locally. If it runs locally, deployment is fairly simple. Practice It We are going to follow the previous steps to include our React projects into our apps from JS311. There will be a couple small changes. Follow the previous steps to copy your JS411 React app into your JS311 Express app You will need to make two changes to your JS311 project. Include app.use(express.static('./client/build')) in the express/index.js file Add \"homepage\": \".\" to your JS311 package.json file Now run npm start in your JS311 project and it should serve up your React app just like last time. If so it's time to deploy. If you want to override/update your JS311 project with these changes you can simply run gcloud app deploy . which will upload to your default project. If you want it in a different project, follow the previous steps Additional Resources We normally provided you with a link to the official documentation of any subject we teach in the pre-homework, but today we'll leave with you with a number of resources that may help you build your Capstone Project or other apps in your future. Migrate to AWS, a Cheaper Deployment Strategy for Students - GCP is usually cheaper to get started with but you may soon lose credits. As an alternative one of our instructors, Matt Huntsberry, as put together a tutorial to help you host with AWS when your GCP credits run out. Typography - Seriously, if you have no eye for design but care that your app is beautiful you may want to use this site for some ideas and code. Atomic Design - When designing your app I hope you came across this website but if not here it is. A full idea of designing an application, atomically! Front-End Design Checklist - Maybe you came across this too in your google-ing. Nonetheless, it is a rad resource for any developer of any experience. API First Development - Think your backend is less important? Think again. Building with Angular Material Tutorial - a clean crisp guide to Angular intricacies. Front-End Designs - If you care about design and want to know more... Google.io - Shadow DOM, HTML Templates - Want to know more about the DOM and Shadow DOM? Ask google. Planning a Front-End JavaScript Application - JavaScript is awesome and older developers are stupid. Make sure you get the real scoop on what JS can do and how you should approach it. Human JavaScript - For your time after graduation when you're looking to get stronger in your skills. Get to reading this book! Dispelling Bullshit - Angular, React, Backbone, Ember, Vue, it doesn't matter. Build and learn how to build well and you will do well!","title":"Deployment"},{"location":"module-4/deployment/#app-deployment","text":"Happiness is a butterfly, which when pursued, is always just beyond your grasp, but which, if you will sit down quietly, may alight upon you.\u2003\u2014Nathaniel Hawthorne","title":"App Deployment"},{"location":"module-4/deployment/#recap","text":"In JS311 we deployed Express apps to Google App Engine. We are going to do something very similar for our React apps. This pre-homework will show you how to combine your frontend and your backend into one working app.","title":"Recap"},{"location":"module-4/deployment/#overview","text":"We learned in the last class why deploying our apps is a necessity. We want everyone on the internet to be able to access what we've created right? Now we also want to combine our frontend and backends and have both projects from JS311 and JS411 working in tandem.","title":"Overview"},{"location":"module-4/deployment/#deploying-with-gcp","text":"Basically what we are going to do is make use of the knowledge we gained last time about what the build process does in create-react-app , and combine that with Express's use.static functionality to serve the built files. We've created a simple repo for you to get started with. Let's practice these steps and then you will practice again by combining your app with your project from JS311. Clone the following express repo Copy your entire folder from your current React app into the gcloud-express/ folder and rename the app: client/ Hint: You might want to delete the node_modules/ folder inside of your React app to make the copying quicker Navigate to the new client/ folder inside of gcloud-express/ If you removed the node_modules/ folder you will want to re-install the dependencies by running npm i in the client/ folder. After that's done, run npm run build to generate the static files. Now run npm start inside of gcloud-express/ and you should see your app running in the browser The setup is complete and now it's time to deploy your application: First, let's create a new project under the GCloud account that we set up in JS311. To do that, click on the project button as shown. It will display a modal that looks like this: Click \"New Project\" in the upper right-hand corner and name the project ACA-express . If you have any trouble with that name try adding a random number after it. Once the project has been created there's only one thing left to do. Go to the terminal where the gcloud-express repo is and run the command gcloud app deploy . --project=aca-express . Important: If you added a random number after your project name you will want to add it to this command as well If this is the first time you are running the command you will be asked to specify a region. Choose \"us-east-1\" which should be number 13. Then continue the upload process. Navigate to the dashboard page of \"App Engine\" (you can search for App Engine on the main Google Cloud page) and find your app's url. For example, aca-express.appspot.com . Open the app and you should see your project running. for creating a new project and then specify that project id in the gcloud app deploy command.","title":"Deploying with GCP"},{"location":"module-4/deployment/#working-with-apis","text":"During your time at ACA you've learned how to use fetch and also axios to make API requests. At some point, you probably already tried to hit your JS311 APIs from your JS411 React app, but if you didn't we'll talk about it. Prior to combining the two apps, if you wanted to hit your API from JS311 you needed the full gcloud url of that app engine project. It may have looked something like this: my-project.appspot.com . So if you wanted to hit an API you created to get users for example you would do a fetch like this: Example API Request 1 2 3 4 5 fetch ( 'https://my-project.appspot.com/users' ) . then ( res => res . json ()) . then ( data => { // do something with users data }) Note: You may not have a users endpoint, that was just an example The only change here is that when the two Apps are combined, so you no longer need the whole URL and can simply run: Example API Request in same folder 1 2 3 4 5 fetch ( '/users' ) . then ( res => res . json ()) . then ( data => { // do something with users data }) Since the frontend and backend are being served from the same place, Express knows how to handle this. The only situation that could arise is if you named a route the same thing in Express and React Router. For example if you had a page called /users on the frontend. Try to avoid that situation by calling it /listusers or something like that. After this you should be good to go! If you have any issues deploying your app talk to the instructor. The hardest part is making sure your app runs locally. If it runs locally, deployment is fairly simple.","title":"Working with APIs"},{"location":"module-4/deployment/#practice-it","text":"We are going to follow the previous steps to include our React projects into our apps from JS311. There will be a couple small changes. Follow the previous steps to copy your JS411 React app into your JS311 Express app You will need to make two changes to your JS311 project. Include app.use(express.static('./client/build')) in the express/index.js file Add \"homepage\": \".\" to your JS311 package.json file Now run npm start in your JS311 project and it should serve up your React app just like last time. If so it's time to deploy. If you want to override/update your JS311 project with these changes you can simply run gcloud app deploy . which will upload to your default project. If you want it in a different project, follow the previous steps","title":"Practice It"},{"location":"module-4/deployment/#additional-resources","text":"We normally provided you with a link to the official documentation of any subject we teach in the pre-homework, but today we'll leave with you with a number of resources that may help you build your Capstone Project or other apps in your future. Migrate to AWS, a Cheaper Deployment Strategy for Students - GCP is usually cheaper to get started with but you may soon lose credits. As an alternative one of our instructors, Matt Huntsberry, as put together a tutorial to help you host with AWS when your GCP credits run out. Typography - Seriously, if you have no eye for design but care that your app is beautiful you may want to use this site for some ideas and code. Atomic Design - When designing your app I hope you came across this website but if not here it is. A full idea of designing an application, atomically! Front-End Design Checklist - Maybe you came across this too in your google-ing. Nonetheless, it is a rad resource for any developer of any experience. API First Development - Think your backend is less important? Think again. Building with Angular Material Tutorial - a clean crisp guide to Angular intricacies. Front-End Designs - If you care about design and want to know more... Google.io - Shadow DOM, HTML Templates - Want to know more about the DOM and Shadow DOM? Ask google. Planning a Front-End JavaScript Application - JavaScript is awesome and older developers are stupid. Make sure you get the real scoop on what JS can do and how you should approach it. Human JavaScript - For your time after graduation when you're looking to get stronger in your skills. Get to reading this book! Dispelling Bullshit - Angular, React, Backbone, Ember, Vue, it doesn't matter. Build and learn how to build well and you will do well!","title":"Additional Resources"},{"location":"module-4/developSeries-ICanDoIt/","text":"Develop \"I Can Do It\"","title":"Develop I Can Do It"},{"location":"module-4/developSeries-ICanDoIt/#develop-i-can-do-it","text":"","title":"Develop \"I Can Do It\""},{"location":"module-4/developSeries-dominate2021/","text":"Dominate 2021 or 2022 or ANY. OTHER. YEAR!","title":"Develop Commitment"},{"location":"module-4/developSeries-dominate2021/#dominate-2021-or-2022-or-any-other-year","text":"","title":"Dominate 2021 or 2022 or ANY. OTHER. YEAR!"},{"location":"module-4/developSeries-stopWastingTime/","text":"Develop Series: Stop Wasting Time","title":"Develop Not Wasting Time"},{"location":"module-4/developSeries-stopWastingTime/#develop-series-stop-wasting-time","text":"","title":"Develop Series: Stop Wasting Time"},{"location":"module-4/folderStructure/","text":"Folder Structure + App Planning Pt.2 The key to success is to focus on goals, not obstacles. Review & Recap Heads up! This week is another App development week where you will have the entirety of the time to build a working application based on the specifications provided on the class page. That being said, we think it's useful to keep providing you with content in these pre-work sections. It will help you gain more understanding and hopefully inform you on topics that might come up in your interview questions when you are applying for developer jobs, so don't skip this. Overview We're going over this because we think it's important that you understand the \"why\" behind what we are doing. You've seen .gitignore and other various files but you might not fully understand why we would want to \"ignore\" these files for example. We'll dive into that, and other various topics in a second. Folder Structure When you first run create-react-app (CRA) you end up with a directory that looks like this: Basic CRA Folder Structure 1 2 3 4 5 6 7 8 // my-app -- node_modules -- public -- src -- .gitignore -- package-lock.json -- package.json -- README.md Let's talk about each of these in some quick detail. node_modules/ This folder holds all of your project's dependencies. It is not there by default when you clone something from Git. It gets generated when you run the npm install command. If you ran npm install express then you should expect to see a folder titled express underneath node_modules . Since React is installed by default with create-react-app , we see something like this: Node Modules Structure 1 2 3 4 5 6 ... -- react -- react-app-polyfill -- react-dev-utils -- react-dom ... What are react-app-polyfill and react-dev-utils ? I didn't install those? You're right, that means something else probably did. If you expand one of those folders underneath node_modules you'll see that they each have their own package.json file just like our project does. ...Our dependencies also have dependencies...inception. Inception 1 Inception 2 Inception 3 No GIF public/ The public/ folder is the main starting point of our app. It holds a few key files for getting started and it's directory structure looks like this: public/ Folder Structure 1 2 3 4 5 6 7 8 ```console -- favicon.ico -> image in the corner of browser tab -- index.html -> main starting file -- logo192.png -> logo image -- logo512.png -> different sized logo image -- manifest.json -> site settings -- robots.txt -> seo settings ``` I've briefly pointed out what most of these files do but I want to talk a little more about the main file which is index.html. Everything you put here will be loaded into your app once a \"build\" is created. If you wanted to use Bootstrap for example you might load in some extra css/js with a <link> or <script> tag. You would put those in this index.html file. Also of importance . . . look near the bottom of this file in the \"body\" tags. Notice this: <div id=\"root\"></div> . Now go to index.js under the scr folder and notice this: ReactDOM.render(<App />, document.getElementById('root')); . See a correlation? That tag in the index.html file is where your whole React app gets inserted/rendered. src This is the main folder for writing your React code. Its directory structure looks like this: src/ Folder Structure 1 2 3 4 5 6 7 -- App.css -- App.js -- App.test.js -- index.css -- index.js -- logo.svg -- serviceWorker.js Here we have the JS and CSS for the App component, the JS and CSS for the index.js file, a test.js file, a logo.svg and a service worker. Typically, when we start with a React app, we start writing our code in the App component. We also typically create a folder called components/ to hold our custom components and a folder called containers/ if we hook Redux to our app. Do not worry about the serviceWorker.js file. That's an advanced subject that we won't cover in this course and it's not required to build React applications. .gitignore This is a file that tells us which files/folders we want Git to ignore. Sounds self-explanatory doesn't it? This means that if we add a file or folder that exists in the .gitignore file, Git won't even show it as an untracked file. That means it will never get uploaded to our repository. What kinds of things would we want to be ignored from our repository? node_modules , .env ...? Why Ignore node_modules/ Our node_modules / folder is typically very large. Because of that, it takes longer to upload/download from our repository. But there's another reason we don't want these files to be tracked in Git and that's because Git is used for version control. It's used to save a running history of the files we've touched and the changes we've made. We are never going to manually change our node_modules . Let's take it one step further. We already have a blueprint of our node_modules/ folder locally. That's what our package.json file is for. It knows about all the dependencies we need. And we already mentioned that the node_modules/ folder gets created when we run npm install . So there is absolutely no reason to upload our node_modules/ folder to Github. That rule follows in other languages as well and is considered general best practice. You don't upload your dependencies (any third-party code) to Github. Why Ignore .env Simple put, the .env file is ALWAYS filled with sensitive information like our API Keys and Database login credentials. For this reason we NEVER want to include it with our code pushes to a repo...even if it's a private repo. Instead you can use GitHub sensitive data tool or add the needed environment variables to the hosting platform manually when you setup your pipeline initially. Talk to your instructor to make sure you understand this. package.json As we mentioned above, the package.json file keeps a list of all the dependencies you have for your application. But it can do more that that. It's also the place where the \"scripts\" for your application are stored. These scripts are the commands like npm start . For example, by default create-react-app provides the following scripts: package.json file 1 2 3 4 5 6 7 8 ```json \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\" } ``` The start script runs your application, as you know. The build script builds a production version of your application to be served statically (by an express app perhaps). When that script is run a build/ folder is created on the top level of your application above the public/ folder. We can talk more about what is actually going on in that process in the next pre-homework and in class. Needless to say, the package.json file is basically the blueprint of your application. The app won't work without it. package-lock.json This file is an extension of the package.json file. It controls the versions for all the dependencies of your dependencies as we saw earlier with the node_modules/ folder by locking them in-place. Before NPM 5, there was only a package.json file. That was fine for a long time but eventually developers realized their code was getting out of sync because the sub-dependencies would change versions. Let's give an example. You run this command npm i express and it populates your package.json with the following: Example package.json File 1 2 3 ```json \"dependencies\": { \"express\": \"^4.17.1\" } ``` Great. Now everyone that uses your application and runs npm install will get express version 4.17.1 and all is good. We realized we had a little problem though and that's because express also has dependencies and so a portion of their dependency tree looks like this: Example package.json File - Varying Dependencies 1 2 3 \"dependencies\" : { \"body-parser\" : \"1.19.0\" , } So what ended up happening is someone would bump the version for body-parser to 1.20.0 and express would inherit that change without changing its own version and then the code would break because while everyone you shared your app with is still getting express version 4.17.1 , express behind the scenes is now using body-parser version 1.20.0 and it's possible that change caused some unexpected side-effect. Ok . . . that's a lot of information but now that we understand that we can understand what package-lock.json does. It essentially locks down the whole dependency tree so that every dependency you install, and all of its dependencies will always have the same versions and you won't run into the issues I described above. It's important to commit your package-lock.json file to GitHub for this reason. README.md The last file we want to talk about is the README.md file . This one is probably the most self-explanatory. Its purpose is to provide instructions/guidelines for setting up and running your application. It should give your users a clue as to what your application does and how to start it. Optionally, you can provide instructions on how to contribute to your project. Summary Hopefully you found this helpful and have a better understanding of what happens when you run create-react-app. In the next pre-homework we'll get into what happens when you build your application. See It - CRA and It's Initial Files Additional Resources YT, LevelUpTUTS - CRA and It's Initial Files","title":"Folder Structure"},{"location":"module-4/folderStructure/#folder-structure-app-planning-pt2","text":"The key to success is to focus on goals, not obstacles.","title":"Folder Structure + App Planning Pt.2"},{"location":"module-4/folderStructure/#review-recap","text":"Heads up! This week is another App development week where you will have the entirety of the time to build a working application based on the specifications provided on the class page. That being said, we think it's useful to keep providing you with content in these pre-work sections. It will help you gain more understanding and hopefully inform you on topics that might come up in your interview questions when you are applying for developer jobs, so don't skip this.","title":"Review &amp; Recap"},{"location":"module-4/folderStructure/#overview","text":"We're going over this because we think it's important that you understand the \"why\" behind what we are doing. You've seen .gitignore and other various files but you might not fully understand why we would want to \"ignore\" these files for example. We'll dive into that, and other various topics in a second.","title":"Overview"},{"location":"module-4/folderStructure/#folder-structure","text":"When you first run create-react-app (CRA) you end up with a directory that looks like this: Basic CRA Folder Structure 1 2 3 4 5 6 7 8 // my-app -- node_modules -- public -- src -- .gitignore -- package-lock.json -- package.json -- README.md Let's talk about each of these in some quick detail.","title":"Folder Structure"},{"location":"module-4/folderStructure/#node_modules","text":"This folder holds all of your project's dependencies. It is not there by default when you clone something from Git. It gets generated when you run the npm install command. If you ran npm install express then you should expect to see a folder titled express underneath node_modules . Since React is installed by default with create-react-app , we see something like this: Node Modules Structure 1 2 3 4 5 6 ... -- react -- react-app-polyfill -- react-dev-utils -- react-dom ... What are react-app-polyfill and react-dev-utils ? I didn't install those? You're right, that means something else probably did. If you expand one of those folders underneath node_modules you'll see that they each have their own package.json file just like our project does. ...Our dependencies also have dependencies...inception. Inception 1 Inception 2 Inception 3 No GIF","title":"node_modules/"},{"location":"module-4/folderStructure/#public","text":"The public/ folder is the main starting point of our app. It holds a few key files for getting started and it's directory structure looks like this: public/ Folder Structure 1 2 3 4 5 6 7 8 ```console -- favicon.ico -> image in the corner of browser tab -- index.html -> main starting file -- logo192.png -> logo image -- logo512.png -> different sized logo image -- manifest.json -> site settings -- robots.txt -> seo settings ``` I've briefly pointed out what most of these files do but I want to talk a little more about the main file which is index.html. Everything you put here will be loaded into your app once a \"build\" is created. If you wanted to use Bootstrap for example you might load in some extra css/js with a <link> or <script> tag. You would put those in this index.html file. Also of importance . . . look near the bottom of this file in the \"body\" tags. Notice this: <div id=\"root\"></div> . Now go to index.js under the scr folder and notice this: ReactDOM.render(<App />, document.getElementById('root')); . See a correlation? That tag in the index.html file is where your whole React app gets inserted/rendered.","title":"public/"},{"location":"module-4/folderStructure/#src","text":"This is the main folder for writing your React code. Its directory structure looks like this: src/ Folder Structure 1 2 3 4 5 6 7 -- App.css -- App.js -- App.test.js -- index.css -- index.js -- logo.svg -- serviceWorker.js Here we have the JS and CSS for the App component, the JS and CSS for the index.js file, a test.js file, a logo.svg and a service worker. Typically, when we start with a React app, we start writing our code in the App component. We also typically create a folder called components/ to hold our custom components and a folder called containers/ if we hook Redux to our app. Do not worry about the serviceWorker.js file. That's an advanced subject that we won't cover in this course and it's not required to build React applications.","title":"src"},{"location":"module-4/folderStructure/#gitignore","text":"This is a file that tells us which files/folders we want Git to ignore. Sounds self-explanatory doesn't it? This means that if we add a file or folder that exists in the .gitignore file, Git won't even show it as an untracked file. That means it will never get uploaded to our repository. What kinds of things would we want to be ignored from our repository? node_modules , .env ...?","title":".gitignore"},{"location":"module-4/folderStructure/#why-ignore-node_modules","text":"Our node_modules / folder is typically very large. Because of that, it takes longer to upload/download from our repository. But there's another reason we don't want these files to be tracked in Git and that's because Git is used for version control. It's used to save a running history of the files we've touched and the changes we've made. We are never going to manually change our node_modules . Let's take it one step further. We already have a blueprint of our node_modules/ folder locally. That's what our package.json file is for. It knows about all the dependencies we need. And we already mentioned that the node_modules/ folder gets created when we run npm install . So there is absolutely no reason to upload our node_modules/ folder to Github. That rule follows in other languages as well and is considered general best practice. You don't upload your dependencies (any third-party code) to Github.","title":"Why Ignore node_modules/"},{"location":"module-4/folderStructure/#why-ignore-env","text":"Simple put, the .env file is ALWAYS filled with sensitive information like our API Keys and Database login credentials. For this reason we NEVER want to include it with our code pushes to a repo...even if it's a private repo. Instead you can use GitHub sensitive data tool or add the needed environment variables to the hosting platform manually when you setup your pipeline initially. Talk to your instructor to make sure you understand this.","title":"Why Ignore .env"},{"location":"module-4/folderStructure/#packagejson","text":"As we mentioned above, the package.json file keeps a list of all the dependencies you have for your application. But it can do more that that. It's also the place where the \"scripts\" for your application are stored. These scripts are the commands like npm start . For example, by default create-react-app provides the following scripts: package.json file 1 2 3 4 5 6 7 8 ```json \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\" } ``` The start script runs your application, as you know. The build script builds a production version of your application to be served statically (by an express app perhaps). When that script is run a build/ folder is created on the top level of your application above the public/ folder. We can talk more about what is actually going on in that process in the next pre-homework and in class. Needless to say, the package.json file is basically the blueprint of your application. The app won't work without it.","title":"package.json"},{"location":"module-4/folderStructure/#package-lockjson","text":"This file is an extension of the package.json file. It controls the versions for all the dependencies of your dependencies as we saw earlier with the node_modules/ folder by locking them in-place. Before NPM 5, there was only a package.json file. That was fine for a long time but eventually developers realized their code was getting out of sync because the sub-dependencies would change versions. Let's give an example. You run this command npm i express and it populates your package.json with the following: Example package.json File 1 2 3 ```json \"dependencies\": { \"express\": \"^4.17.1\" } ``` Great. Now everyone that uses your application and runs npm install will get express version 4.17.1 and all is good. We realized we had a little problem though and that's because express also has dependencies and so a portion of their dependency tree looks like this: Example package.json File - Varying Dependencies 1 2 3 \"dependencies\" : { \"body-parser\" : \"1.19.0\" , } So what ended up happening is someone would bump the version for body-parser to 1.20.0 and express would inherit that change without changing its own version and then the code would break because while everyone you shared your app with is still getting express version 4.17.1 , express behind the scenes is now using body-parser version 1.20.0 and it's possible that change caused some unexpected side-effect. Ok . . . that's a lot of information but now that we understand that we can understand what package-lock.json does. It essentially locks down the whole dependency tree so that every dependency you install, and all of its dependencies will always have the same versions and you won't run into the issues I described above. It's important to commit your package-lock.json file to GitHub for this reason.","title":"package-lock.json"},{"location":"module-4/folderStructure/#readmemd","text":"The last file we want to talk about is the README.md file . This one is probably the most self-explanatory. Its purpose is to provide instructions/guidelines for setting up and running your application. It should give your users a clue as to what your application does and how to start it. Optionally, you can provide instructions on how to contribute to your project.","title":"README.md"},{"location":"module-4/folderStructure/#summary","text":"Hopefully you found this helpful and have a better understanding of what happens when you run create-react-app. In the next pre-homework we'll get into what happens when you build your application.","title":"Summary"},{"location":"module-4/folderStructure/#see-it-cra-and-its-initial-files","text":"","title":"See It - CRA and It's Initial Files"},{"location":"module-4/folderStructure/#additional-resources","text":"YT, LevelUpTUTS - CRA and It's Initial Files","title":"Additional Resources"},{"location":"module-4/mvpShopInfo/","text":"After Graduation How do you get a job without experience, and how do you get experience without a job? Our New Initiative To help bridge the gap between graduation and full-time employment, Zollege, our parent company, has created an in-house web development agency. The goal is to give graduates the opportunity to get paid to do professional work while still having time to actively continue their job search. In order to make this program available to the most graduates, we are asking for a time commitment of 10 hours a week for 8 - 10 weeks. In return, you will be paid $15/hr, work on 2 public facing projects that you can add to your portfolio, and include a programmer position at Zollege, LLC to your linkedin. There are a limited number of spots available and you may end up on a waiting list for a few weeks, but all grads who want to get into the program will be accepted. If you are interested, complete this form .","title":"MVP Shop"},{"location":"module-4/mvpShopInfo/#after-graduation","text":"How do you get a job without experience, and how do you get experience without a job?","title":"After Graduation"},{"location":"module-4/mvpShopInfo/#our-new-initiative","text":"To help bridge the gap between graduation and full-time employment, Zollege, our parent company, has created an in-house web development agency. The goal is to give graduates the opportunity to get paid to do professional work while still having time to actively continue their job search. In order to make this program available to the most graduates, we are asking for a time commitment of 10 hours a week for 8 - 10 weeks. In return, you will be paid $15/hr, work on 2 public facing projects that you can add to your portfolio, and include a programmer position at Zollege, LLC to your linkedin. There are a limited number of spots available and you may end up on a waiting list for a few weeks, but all grads who want to get into the program will be accepted. If you are interested, complete this form .","title":"Our New Initiative"},{"location":"module-4/npmBuild-intro/","text":"NPM Build Don\u2019t stop when you\u2019re tired. Stop when you\u2019re done. Review and Recap Hopefully all of this planning is bringing to you clarity of your app and the work ahead. I'm sure you've never thought like this and it's opening new pathways in your mind. This is a good thing! Learning to program and learning to program well are two different skills that will help you do other things in your life better. If you didn't believe it before, believe it now: there's still more planning to your app before you actually get to build. Crazy, right!? This is what actually goes into the apps you know and love. For every app you use there is a paper mockup of it. There is a flow chart, code plan, and kanban board used to build it. Today we're going to continue with npm and planning the User Flow of our app. In class we'll be planning our Capstone Project and working on our ATX-Small Business App! Overview Why are we talking about the npm build command? This is something you should already know about and have hopefully been using throughout this course. The purpose of this pre-work isn't to re-introduce you to the command, it's to explain what's going on behind the scenes when you run it. Why npm build To understand what's happening we first need to remind (or inform) you that the browser can't naturally read React code. What do I mean when I say the browser? Chrome. Firefox. Edge. And why does it matter what the browser can read? Well because that's where our applications are running. They are websites, after all! You may have already known all that but it's important to reiterate. Now, because the browser can't naturally read code that looks like this: Simple React Component 1 2 3 4 5 export MyComponent = ( props ) => { < div > < h1 > Welcome to my component < /h1> < /div> } ...because it's neither plain JavaScript nor HTML (it's a mixture of both), we need to do something with this code to format it in a way that the browser can read. There are two main things we need to do. Transpilation We need to transpile our code into something the browser knows how to read. We need to transpile it into plain JavaScript. Additionally, you may be writing code in new ES ways that aren't supported in the browser yet. For example, for a while ES6 functionality like arrow functions and imports wasn't supported in the browser (it is now) so we needed to transpile that code in ES2015 format. Minification We need to make the files as small as possible. That means removing all extra space in our files and sometimes changing variable names from something longer like myFunction to mf (hehe). Why are we doing this? Because it decreases the time it takes for the browser to load the file. The smaller the file, the better the performance on the web. Don't worry, create-react-app handles all this logic behind the scenes and you don't need to do anything extra. Just know that transpilation and minification are some of the main things that are happening when you run the npm build command. Let's look at some examples. The Build Folder When you run the npm build command a folder is generated called build . Let's look at what's inside: Build Folder Structure 1 2 3 4 5 6 7 8 9 10 -- static -- asset-manifest.json -- favicon.ico -- index.html -- logo192.png -- logo512.png -- manifest.json -- precache-manifest... -- robots.txt -- service-worker.js You'll notice that a lot of this is basically copied over from the \"public\" folder we talked about last class. We want to focus on the two main parts of this build folder: index.html and the static (folder). index.html This is the main starting point of your application. To see what's changed since the public/ folder, let's open up the index.html file from the build/ folder. You may notice that it's all on one line. That's because it's been minified . Well it's super ugly and we actually want to look at certain parts of it so go ahead and navigate to the following website: https://unminify.com/ . Once there, copy the contents of build/index.html and paste them in the box. It should have formatted the content for you. Near the top of this file you should see the following: <link href=\"/asset-v1:ACA+JS411+09282020_JS411_C6+type@asset+block/css_main.34de6062.chunk.css\" rel=\"stylesheet\"> That's all the bundled css that exists in your application, all in one file. Near the bottom of the file you should see the following: <script src=\"/asset-v1:ACA+JS411+09282020_JS411_C6+type@asset+block/js_2.c633e371.chunk.js\"></script> That's all the bundled javascript code (all of your React code) in one file. NOTE: The random numbers get generated different when the build is run so don't worry if your filename isn't exactly the same. static If you notice above, both the css link and the javascript script reference /static/ . That represents the static folder in your \"build\" folder. That's where all the transpiled and minified code lives. It's all the code you've written in React, just in a different format. Let's go take a look at these files. Go to the static/js folder and click on the top file. Don't worry about the other ones in this folder. The file we are looking for should end in chunk.js . The file should look similar to this: Minified Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ( window [ \"webpackJsonpmy-ssr-app\" ] = window [ \"webpackJsonpmy-ssr-app\" ] || []). push ([[ 2 ],[ function ( e , t , n ){ \"use strict\" ; e . exports = n ( 4 )}, function ( e , t , n ){ \"use strict\" ; var r = Object . getOwnPropertySymbols , l = Object . prototype . hasOwnProperty , i = Object . prototype . propertyIsEnumerable ; function a ( e ){ if ( null === e || void 0 === e ) throw new TypeError ( \"Object.assign cannot be called with null or undefined\" ); return Object ( e )} e . exports = function (){ try { if ( ! Object . assign ) return ! 1 ; var e = new String ( \"abc\" ) ; if ( e [ 5 ] = \"de\" , \"5\" === Object . getOwnPropertyNames ( e )[ 0 ]) return ! 1 ; for ( var t = {}, n = 0 ; n < 10 ; n ++ ) t [ \"_\" + String . fromCharCode ( n )] = n ; if ( \"0123456789\" !== Object . getOwnPropertyNames ( t ). map ( function ( e ){ return t [ e ]}). join ( \"\" )) return ! 1 ; var r = {}; return \"abcdefghijklmnopqrst\" . split ( \"\" ). forEach ( function ( e ){ r [ e ] = e }), \"abcdefghijklmnopqrst\" === Object . keys ( Object . assign ({}, r )). join ( \"\" )} catch ( l ){ return ! 1 }}() ? Object . assign : function ( e , t ){ for ( var n , o , u = a ( e ), c = 1 ; c < arguments . length ; c ++ ){ for ( var s in n = Object ( arguments [ c ])) l . call ( n , s ) && ( u [ s ] = n [ s ]); if ( r ){ o = r ( n ); for ( var f = 0 ; f < o . length ; f ++ ) i . call ( n , o [ f ]) && ( u [ o [ f ]] = n [ o [ f ]])}} return u }}, function ( e , t , n ){ \"use strict\" ; ! function e (){ if ( \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ . checkDCE ) // ...etc... Zen Summary This seems like a lot of information but you really don't need to know all of it in detail. What you need to understand is that the npm build command gets your code ready for a production environment by bundling it ( transpiling and minifying ) into a build/ folder that contains static files. What this also means is that you don't have to run npm start anymore (after you've built). We'll explore that in the practice section and show you how your app would run in production. Practice It We are going to create a new project with create-react-app, build the app and then load the static files from our browser. Run create-react-app build-ex to create a project called build-ex Navigate to that folder and run npm i to get all your dependencies Now run npm start to see the default create-react-app which you should have seen a couple times by now Run the npm build command. It should have generated the build/ folder that we've been talking about today. Since we've already explored the contents of that file, we don't need to do that again here Now, in VSCode (or another editor) right-click on the build folder and select \"copy path\" Open a new web browser tab and paste the file path into the browser. You should see a directory show up. Click on the index.html file. That's the main starting point of your application Don't see anything? Add \"homepage\": \".\" as a property to the bottom of your package.json object and re-run npm build . This will sync all the files to the current folder. Now reload the page and you should see your app loaded Note: If you could not copy the exact path you can type file:/// in the browser and navigate to that build folder manually. Additional Resources YT, Hitesh Choudhary - How to Deploy A React App Tool, Unminify Know Your Docs NPM Docs - Home","title":"NPM Build"},{"location":"module-4/npmBuild-intro/#npm-build","text":"Don\u2019t stop when you\u2019re tired. Stop when you\u2019re done.","title":"NPM Build"},{"location":"module-4/npmBuild-intro/#review-and-recap","text":"Hopefully all of this planning is bringing to you clarity of your app and the work ahead. I'm sure you've never thought like this and it's opening new pathways in your mind. This is a good thing! Learning to program and learning to program well are two different skills that will help you do other things in your life better. If you didn't believe it before, believe it now: there's still more planning to your app before you actually get to build. Crazy, right!? This is what actually goes into the apps you know and love. For every app you use there is a paper mockup of it. There is a flow chart, code plan, and kanban board used to build it. Today we're going to continue with npm and planning the User Flow of our app. In class we'll be planning our Capstone Project and working on our ATX-Small Business App!","title":"Review and Recap"},{"location":"module-4/npmBuild-intro/#overview","text":"Why are we talking about the npm build command? This is something you should already know about and have hopefully been using throughout this course. The purpose of this pre-work isn't to re-introduce you to the command, it's to explain what's going on behind the scenes when you run it.","title":"Overview"},{"location":"module-4/npmBuild-intro/#why-npm-build","text":"To understand what's happening we first need to remind (or inform) you that the browser can't naturally read React code. What do I mean when I say the browser? Chrome. Firefox. Edge. And why does it matter what the browser can read? Well because that's where our applications are running. They are websites, after all! You may have already known all that but it's important to reiterate. Now, because the browser can't naturally read code that looks like this: Simple React Component 1 2 3 4 5 export MyComponent = ( props ) => { < div > < h1 > Welcome to my component < /h1> < /div> } ...because it's neither plain JavaScript nor HTML (it's a mixture of both), we need to do something with this code to format it in a way that the browser can read. There are two main things we need to do. Transpilation We need to transpile our code into something the browser knows how to read. We need to transpile it into plain JavaScript. Additionally, you may be writing code in new ES ways that aren't supported in the browser yet. For example, for a while ES6 functionality like arrow functions and imports wasn't supported in the browser (it is now) so we needed to transpile that code in ES2015 format. Minification We need to make the files as small as possible. That means removing all extra space in our files and sometimes changing variable names from something longer like myFunction to mf (hehe). Why are we doing this? Because it decreases the time it takes for the browser to load the file. The smaller the file, the better the performance on the web. Don't worry, create-react-app handles all this logic behind the scenes and you don't need to do anything extra. Just know that transpilation and minification are some of the main things that are happening when you run the npm build command. Let's look at some examples.","title":"Why npm build"},{"location":"module-4/npmBuild-intro/#the-build-folder","text":"When you run the npm build command a folder is generated called build . Let's look at what's inside: Build Folder Structure 1 2 3 4 5 6 7 8 9 10 -- static -- asset-manifest.json -- favicon.ico -- index.html -- logo192.png -- logo512.png -- manifest.json -- precache-manifest... -- robots.txt -- service-worker.js You'll notice that a lot of this is basically copied over from the \"public\" folder we talked about last class. We want to focus on the two main parts of this build folder: index.html and the static (folder). index.html This is the main starting point of your application. To see what's changed since the public/ folder, let's open up the index.html file from the build/ folder. You may notice that it's all on one line. That's because it's been minified . Well it's super ugly and we actually want to look at certain parts of it so go ahead and navigate to the following website: https://unminify.com/ . Once there, copy the contents of build/index.html and paste them in the box. It should have formatted the content for you. Near the top of this file you should see the following: <link href=\"/asset-v1:ACA+JS411+09282020_JS411_C6+type@asset+block/css_main.34de6062.chunk.css\" rel=\"stylesheet\"> That's all the bundled css that exists in your application, all in one file. Near the bottom of the file you should see the following: <script src=\"/asset-v1:ACA+JS411+09282020_JS411_C6+type@asset+block/js_2.c633e371.chunk.js\"></script> That's all the bundled javascript code (all of your React code) in one file. NOTE: The random numbers get generated different when the build is run so don't worry if your filename isn't exactly the same. static If you notice above, both the css link and the javascript script reference /static/ . That represents the static folder in your \"build\" folder. That's where all the transpiled and minified code lives. It's all the code you've written in React, just in a different format. Let's go take a look at these files. Go to the static/js folder and click on the top file. Don't worry about the other ones in this folder. The file we are looking for should end in chunk.js . The file should look similar to this: Minified Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ( window [ \"webpackJsonpmy-ssr-app\" ] = window [ \"webpackJsonpmy-ssr-app\" ] || []). push ([[ 2 ],[ function ( e , t , n ){ \"use strict\" ; e . exports = n ( 4 )}, function ( e , t , n ){ \"use strict\" ; var r = Object . getOwnPropertySymbols , l = Object . prototype . hasOwnProperty , i = Object . prototype . propertyIsEnumerable ; function a ( e ){ if ( null === e || void 0 === e ) throw new TypeError ( \"Object.assign cannot be called with null or undefined\" ); return Object ( e )} e . exports = function (){ try { if ( ! Object . assign ) return ! 1 ; var e = new String ( \"abc\" ) ; if ( e [ 5 ] = \"de\" , \"5\" === Object . getOwnPropertyNames ( e )[ 0 ]) return ! 1 ; for ( var t = {}, n = 0 ; n < 10 ; n ++ ) t [ \"_\" + String . fromCharCode ( n )] = n ; if ( \"0123456789\" !== Object . getOwnPropertyNames ( t ). map ( function ( e ){ return t [ e ]}). join ( \"\" )) return ! 1 ; var r = {}; return \"abcdefghijklmnopqrst\" . split ( \"\" ). forEach ( function ( e ){ r [ e ] = e }), \"abcdefghijklmnopqrst\" === Object . keys ( Object . assign ({}, r )). join ( \"\" )} catch ( l ){ return ! 1 }}() ? Object . assign : function ( e , t ){ for ( var n , o , u = a ( e ), c = 1 ; c < arguments . length ; c ++ ){ for ( var s in n = Object ( arguments [ c ])) l . call ( n , s ) && ( u [ s ] = n [ s ]); if ( r ){ o = r ( n ); for ( var f = 0 ; f < o . length ; f ++ ) i . call ( n , o [ f ]) && ( u [ o [ f ]] = n [ o [ f ]])}} return u }}, function ( e , t , n ){ \"use strict\" ; ! function e (){ if ( \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ . checkDCE ) // ...etc... Zen","title":"The Build Folder"},{"location":"module-4/npmBuild-intro/#summary","text":"This seems like a lot of information but you really don't need to know all of it in detail. What you need to understand is that the npm build command gets your code ready for a production environment by bundling it ( transpiling and minifying ) into a build/ folder that contains static files. What this also means is that you don't have to run npm start anymore (after you've built). We'll explore that in the practice section and show you how your app would run in production.","title":"Summary"},{"location":"module-4/npmBuild-intro/#practice-it","text":"We are going to create a new project with create-react-app, build the app and then load the static files from our browser. Run create-react-app build-ex to create a project called build-ex Navigate to that folder and run npm i to get all your dependencies Now run npm start to see the default create-react-app which you should have seen a couple times by now Run the npm build command. It should have generated the build/ folder that we've been talking about today. Since we've already explored the contents of that file, we don't need to do that again here Now, in VSCode (or another editor) right-click on the build folder and select \"copy path\" Open a new web browser tab and paste the file path into the browser. You should see a directory show up. Click on the index.html file. That's the main starting point of your application Don't see anything? Add \"homepage\": \".\" as a property to the bottom of your package.json object and re-run npm build . This will sync all the files to the current folder. Now reload the page and you should see your app loaded Note: If you could not copy the exact path you can type file:/// in the browser and navigate to that build folder manually.","title":"Practice It"},{"location":"module-4/npmBuild-intro/#additional-resources","text":"YT, Hitesh Choudhary - How to Deploy A React App Tool, Unminify","title":"Additional Resources"},{"location":"module-4/npmBuild-intro/#know-your-docs","text":"NPM Docs - Home","title":"Know Your Docs"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#see-it","text":"","title":"See It"},{"location":"preCourse/setupInstructions/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"preCourse/setupInstructions/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"preCourse/submittingHomework/","text":"Submitting Coding Homework Create Your Development Folder For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in. Create a Repo for Each Assignment Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future. Move Your Project Files For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo. Push to GitHub You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again. Turn in Your Assignment Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Submitting Homework"},{"location":"preCourse/submittingHomework/#submitting-coding-homework","text":"","title":"Submitting Coding Homework"},{"location":"preCourse/submittingHomework/#create-your-development-folder","text":"For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in.","title":"Create Your Development Folder"},{"location":"preCourse/submittingHomework/#create-a-repo-for-each-assignment","text":"Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future.","title":"Create a Repo for Each Assignment"},{"location":"preCourse/submittingHomework/#move-your-project-files","text":"For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo.","title":"Move Your Project Files"},{"location":"preCourse/submittingHomework/#push-to-github","text":"You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again.","title":"Push to GitHub"},{"location":"preCourse/submittingHomework/#turn-in-your-assignment","text":"Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Turn in Your Assignment"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Succeed in this Course"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"}]}