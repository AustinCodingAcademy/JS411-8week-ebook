{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS411-Front-End Apps with React Objective Statement By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class. To Graduate the Full-Stack Program A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website. To Present at Graduation To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code ) How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js411-front-end-apps-with-react","text":"","title":"Welcome to JS411-Front-End Apps with React"},{"location":"#objective-statement","text":"By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class.","title":"To Pass This Class (and all others)"},{"location":"#to-graduate-the-full-stack-program","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"To Graduate the Full-Stack Program"},{"location":"#to-present-at-graduation","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"To Present at Graduation"},{"location":"#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 Discuss in words something you learned in class today or this week. Why/when would you use a class-based component vs a functional component? What are the differences? What new alternatives are there? What is create-react-app? Dig into this. What is JSX? How does React work? From entry point to last child component? How? How does the virtual DOM work in React? Explain in detail. Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? What\u2019s the difference between a React Element and a React Component? Class 4 Discuss in words something you learned in class today or this week. What is the difference between state and props? What is ReactDOM? What is the difference between ReactDOM and React ? What is React.createClass ? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain event delegation in JavaScript and why it is useful. Which new JavaScript / browser features are you most excited about and why? Class 6 Discuss in words something you learned in class today or this week. What is render() in React? Explain its purpose. Is setState() async? What are controlled components? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is the event loop in JavaScript? Why does ReactJS use className over class attribute? Class 8 Discuss in words something you learned in class today or this week. How does hoisting work in JavaScript? Why is setState() in React Async instead of Sync? How is the Virtual-DOM more efficient than Dirty checking? What is PureComponent ? When to use PureComponent over Component ? What is a higher order component? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you think you might use the checkAuth() function to actually verify a user's email and password? Class 10 [ ] Class 12 [ ] Class 14 [ ] Class 16 [ ]","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2","text":"Discuss in words something you learned in class today or this week. Why/when would you use a class-based component vs a functional component? What are the differences? What new alternatives are there? What is create-react-app? Dig into this. What is JSX? How does React work? From entry point to last child component? How? How does the virtual DOM work in React? Explain in detail. Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? What\u2019s the difference between a React Element and a React Component?","title":"Class 2"},{"location":"additionalResources/blogPrompts/#class-4","text":"Discuss in words something you learned in class today or this week. What is the difference between state and props? What is ReactDOM? What is the difference between ReactDOM and React ? What is React.createClass ? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? Explain event delegation in JavaScript and why it is useful. Which new JavaScript / browser features are you most excited about and why?","title":"Class 4"},{"location":"additionalResources/blogPrompts/#class-6","text":"Discuss in words something you learned in class today or this week. What is render() in React? Explain its purpose. Is setState() async? What are controlled components? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework? Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? What is the event loop in JavaScript? Why does ReactJS use className over class attribute?","title":"Class 6"},{"location":"additionalResources/blogPrompts/#class-8","text":"Discuss in words something you learned in class today or this week. How does hoisting work in JavaScript? Why is setState() in React Async instead of Sync? How is the Virtual-DOM more efficient than Dirty checking? What is PureComponent ? When to use PureComponent over Component ? What is a higher order component? Which (if there is) node library method could you use to solve the algorithm problem you solved last night in your pre-homework. Which (if there is) node library method could you use to solve the algorithm problem you solved in class tonight? How do you think you might use the checkAuth() function to actually verify a user's email and password?","title":"Class 8"},{"location":"additionalResources/blogPrompts/#class-10","text":"[ ]","title":"Class 10"},{"location":"additionalResources/blogPrompts/#class-12","text":"[ ]","title":"Class 12"},{"location":"additionalResources/blogPrompts/#class-14","text":"[ ]","title":"Class 14"},{"location":"additionalResources/blogPrompts/#class-16","text":"[ ]","title":"Class 16"},{"location":"additionalResources/developSeries/","text":"Develop Series YT, Lisa Genova@TedTalks - How Your Memory Works, and why forgetting is totally okay YT, Chris Williamson@TEDx - Embracing Your Weirdness YT, Paul Rulkens@TEDx - Why the majority is always wrong YT, @TedTalk YT, @TedTalk YT, @TedTalk","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"YT, Lisa Genova@TedTalks - How Your Memory Works, and why forgetting is totally okay YT, Chris Williamson@TEDx - Embracing Your Weirdness YT, Paul Rulkens@TEDx - Why the majority is always wrong YT, @TedTalk YT, @TedTalk YT, @TedTalk","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. Steps to Whiteboarding Success Restate, rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency The Prompts Class 1 Prompt 1: none - No whiteboard training the first day. Class 2 Prompt 1: Largest-Smallest - How do you find the largest and smallest number in an unsorted integer array? Class 3 Prompt 1: sumPairs - How do you find all pairs of an integer array whose sum is equal to a given number? 1 2 3 const arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 32 , 0 , - 16 , 8 ] sumPairs ( arr , 16 ) // --> [[8, 8], [14, 2], [0, 16], [1, 15], [32, -16]] Class 4 Prompt 1: areAnagrams - How do you check if two strings are anagrams of each other? Build a program that does just that; return Boolean Class 5 Prompt 1: Recursive Reversal - How can a given string be reversed using recursion? Build a program to do that. Class 6 Prompt 1: Binary Search - How is a binary search tree implemented? Class 7 Prompt 1: Counting Nodes - How do you count the number of leaf nodes in a given binary tree? Class 8 Prompt 1: Reverse Word In-Place - How do you reverse words in a given sentence without using any library method? ```javascript const word = 2 const sentence = 'My cat was a dog and ran away.' 1 2 3 4 const reverseWord = (arg1, arg2) => {} reverseWord(sentence, word) // returns 'saw' ``` Class 9 Prompt 1: Title - description Class 10 Prompt 1: Title - description Class 11 Prompt 1: Title - description Class 12 Prompt 1: Title - description Class 13 Prompt 1: Title - description Class 14 Prompt 1: Title - description Class 15 Prompt 1: Title - description Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#steps-to-whiteboarding-success","text":"Restate, rewrite, and clarify the question Write the expected return given the input Make a code plan and speak aloud with your interviewers/team Test and come up with edge cases Revise if you can for efficiency","title":"Steps to Whiteboarding Success"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: none - No whiteboard training the first day.","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: Largest-Smallest - How do you find the largest and smallest number in an unsorted integer array?","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: sumPairs - How do you find all pairs of an integer array whose sum is equal to a given number? 1 2 3 const arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 32 , 0 , - 16 , 8 ] sumPairs ( arr , 16 ) // --> [[8, 8], [14, 2], [0, 16], [1, 15], [32, -16]]","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: areAnagrams - How do you check if two strings are anagrams of each other? Build a program that does just that; return Boolean","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Recursive Reversal - How can a given string be reversed using recursion? Build a program to do that.","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Binary Search - How is a binary search tree implemented?","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Counting Nodes - How do you count the number of leaf nodes in a given binary tree?","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Reverse Word In-Place - How do you reverse words in a given sentence without using any library method? ```javascript const word = 2 const sentence = 'My cat was a dog and ran away.' 1 2 3 4 const reverseWord = (arg1, arg2) => {} reverseWord(sentence, word) // returns 'saw' ```","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Title - description","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Title - description","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: Title - description","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Title - description","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Title - description","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Title - description","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - description","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations There will be no student presentation for the first class. We'll discuss the purpose of presentations and how they will be assigned for future classes. In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here or in the home page of this textbook. The subject doesn't have to be closely related to what is currently being studied. Another objective of these presentations is to give cursory introductions to important topics that we don't have time to cover in the course. Students should prepare in advance, and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 4, then Week 5 through Day 16, * classes total. The first three classes, your prompt is: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 1 Organize and Coordinate who and when students are presenting. Organize and coordinate who is presenting and in what order for the first three days. Divide all students over the three days so everyone presents. Then organize which two students will present for each of the remaining days of this course, Day 6 - Day 16. Remember, two per day. Everyone pitches & demos their apps AGAIN on the last day. Class 2 No presentations today. Class 3 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 4 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 5 33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time. Class 6 What is Angular(8+) and what is React? How are they different from each other? Programmers never stop learning. Share with the class ways you and they can continue their journey as programmers. Class 7 What are the different phases of ReactJS component lifecycle? How is React different from VUE? Class 8 What are the major features, advantages, and limitations of ReactJS? It\u2019s ok to admit what you don\u2019t know. Share with the class ways a junior developer may approach senior developers to ask the right questions and get things to working faster. Silence is the worse thing a junior dev can produce! Class 9 What is Context in React? Describe and Demonstrate. Pair programming is valuable. Teach the class why working together is better than going alone. Class 10 todo todo Class 11 todo todo Class 12 todo todo Class 13 todo todo Class 14 todo todo Class 15 todo todo Class 16 todo todo","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"There will be no student presentation for the first class. We'll discuss the purpose of presentations and how they will be assigned for future classes. In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here or in the home page of this textbook. The subject doesn't have to be closely related to what is currently being studied. Another objective of these presentations is to give cursory introductions to important topics that we don't have time to cover in the course. Students should prepare in advance, and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 4, then Week 5 through Day 16, * classes total. The first three classes, your prompt is: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#class-1","text":"Organize and Coordinate who and when students are presenting. Organize and coordinate who is presenting and in what order for the first three days. Divide all students over the three days so everyone presents. Then organize which two students will present for each of the remaining days of this course, Day 6 - Day 16. Remember, two per day. Everyone pitches & demos their apps AGAIN on the last day.","title":"Class 1"},{"location":"additionalResources/studentPresentations/#class-2","text":"No presentations today.","title":"Class 2"},{"location":"additionalResources/studentPresentations/#class-3","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 3"},{"location":"additionalResources/studentPresentations/#class-4","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 4"},{"location":"additionalResources/studentPresentations/#class-5","text":"33% Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? MAKE IT A PITCH! 2 mins or less. Plus Q/A time.","title":"Class 5"},{"location":"additionalResources/studentPresentations/#class-6","text":"What is Angular(8+) and what is React? How are they different from each other? Programmers never stop learning. Share with the class ways you and they can continue their journey as programmers.","title":"Class 6"},{"location":"additionalResources/studentPresentations/#class-7","text":"What are the different phases of ReactJS component lifecycle? How is React different from VUE?","title":"Class 7"},{"location":"additionalResources/studentPresentations/#class-8","text":"What are the major features, advantages, and limitations of ReactJS? It\u2019s ok to admit what you don\u2019t know. Share with the class ways a junior developer may approach senior developers to ask the right questions and get things to working faster. Silence is the worse thing a junior dev can produce!","title":"Class 8"},{"location":"additionalResources/studentPresentations/#class-9","text":"What is Context in React? Describe and Demonstrate. Pair programming is valuable. Teach the class why working together is better than going alone.","title":"Class 9"},{"location":"additionalResources/studentPresentations/#class-10","text":"todo todo","title":"Class 10"},{"location":"additionalResources/studentPresentations/#class-11","text":"todo todo","title":"Class 11"},{"location":"additionalResources/studentPresentations/#class-12","text":"todo todo","title":"Class 12"},{"location":"additionalResources/studentPresentations/#class-13","text":"todo todo","title":"Class 13"},{"location":"additionalResources/studentPresentations/#class-14","text":"todo todo","title":"Class 14"},{"location":"additionalResources/studentPresentations/#class-15","text":"todo todo","title":"Class 15"},{"location":"additionalResources/studentPresentations/#class-16","text":"todo todo","title":"Class 16"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Quick Student Intros Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.) Intro to React What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#quick-student-intros","text":"Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.)","title":"Quick Student Intros"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#intro-to-react","text":"What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Intro to React"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/","text":"Class Ten - Questions for Discussion Action creator Reducer combineReducers Dispatch Do you have to use bindActionCreator ? What is the flow? How does Redux manage data? Draw it. Can you repeat the steps to update the state.users ? What is meant by \"dumb\" component and \"smart\" container (Presentational component and a Container Component)? Why do our reducers need to return a copy of the state? How does the ... (spread operator) work under the hood? In the bindActionCreators documentation, what is happening in the import statement with the * ? What is dispatch doing?","title":"Day 10 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#class-ten-questions-for-discussion","text":"Action creator Reducer combineReducers Dispatch Do you have to use bindActionCreator ? What is the flow? How does Redux manage data? Draw it. Can you repeat the steps to update the state.users ? What is meant by \"dumb\" component and \"smart\" container (Presentational component and a Container Component)? Why do our reducers need to return a copy of the state? How does the ... (spread operator) work under the hood? In the bindActionCreators documentation, what is happening in the import statement with the * ? What is dispatch doing?","title":"Class Ten - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two - Questions for Discussion Props + State What does Composable Architecture mean? Really, what does it mean? Can someone draw a diagram for us? What is the entry-point of a React app? How does our app get data? What does it do after that? What are the reasons for creating a class-based component? What is this.state ? Why do we have to use this ? What is the setState() method? Why must we use it to set state? What is special about it? Why do we call it local state? Why do we need it? What is scope? Why is it important to understand? Give an example of how could you take advantage of scope. What is app state? How do we pass data from a parent component to any of its child components? Can someone draw this our for us? Why do we need to pass the data? What are attributes and why do we need them in React components? How do we create a method in a React component? Where does it go? What's the syntax? What are Template literals in JavaScript? What's the syntax? What's the naming convention of React components? What's the difference between a Class-based and a Functional component? Which do you think is more performant? Why? What are React Hooks? How do you think you could organize multiple components? Any suggestions? Drawings? Why?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"","title":"Class Two - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#props-state","text":"What does Composable Architecture mean? Really, what does it mean? Can someone draw a diagram for us? What is the entry-point of a React app? How does our app get data? What does it do after that? What are the reasons for creating a class-based component? What is this.state ? Why do we have to use this ? What is the setState() method? Why must we use it to set state? What is special about it? Why do we call it local state? Why do we need it? What is scope? Why is it important to understand? Give an example of how could you take advantage of scope. What is app state? How do we pass data from a parent component to any of its child components? Can someone draw this our for us? Why do we need to pass the data? What are attributes and why do we need them in React components? How do we create a method in a React component? Where does it go? What's the syntax? What are Template literals in JavaScript? What's the syntax? What's the naming convention of React components? What's the difference between a Class-based and a Functional component? Which do you think is more performant? Why? What are React Hooks? How do you think you could organize multiple components? Any suggestions? Drawings? Why?","title":"Props + State"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class 3 Questions for Discussion Conditional Rendering Which React lifecycle method do you use to fetch data from an API? How do you use CSS in your React components? Event Handler How do you handle events in React like clicking a button and input text? Syntax? Dynamic Rendering Key How do you embed .map() in JSX? What is the syntax for building methods to handle events? What other JavaScript thing have you learned while learning React? What is the best practice for assigning a key to a list item while mapping? Syntax?","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-3-questions-for-discussion","text":"","title":"Class 3 Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#conditional-rendering","text":"Which React lifecycle method do you use to fetch data from an API? How do you use CSS in your React components? Event Handler How do you handle events in React like clicking a button and input text? Syntax?","title":"Conditional Rendering"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#dynamic-rendering","text":"Key How do you embed .map() in JSX? What is the syntax for building methods to handle events? What other JavaScript thing have you learned while learning React? What is the best practice for assigning a key to a list item while mapping? Syntax?","title":"Dynamic Rendering"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/","text":"Class Four - Questions for Discussion Forms Controlled component Single source of truth Who is Dan Abramov? Why is he important enough to talk about here? Why do we need to .bind() our methods? (or arrow functions?) In the CodePen you will see the line that says: ReactDOM.render() . What's going on here and why? What is the npm package: prop-types used for?`","title":"Day 4 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#class-four-questions-for-discussion","text":"","title":"Class Four - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#forms","text":"Controlled component Single source of truth Who is Dan Abramov? Why is he important enough to talk about here? Why do we need to .bind() our methods? (or arrow functions?) In the CodePen you will see the line that says: ReactDOM.render() . What's going on here and why? What is the npm package: prop-types used for?`","title":"Forms"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/","text":"Class Five - Questions for Discussion What is a Styled Component? What is a Controlled Component? What is an NPM package? What is Material UI? What is Material Design? What is a styled component? What is your first step to using Material UI? Why do you think we should use Material UI? How does Material-UI or Bootstrap work? What makes the difference when you pass the components different props? Why is the process of styling different in React than in plain HTML, CSS DOM creation? How do you style a component without a third-party like Material-UI? What are the various ways to do it? How is the Material-UI Documentation organized? Can we make sense of how they've laid out the components?","title":"Day 5 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#class-five-questions-for-discussion","text":"What is a Styled Component? What is a Controlled Component? What is an NPM package? What is Material UI? What is Material Design? What is a styled component? What is your first step to using Material UI? Why do you think we should use Material UI? How does Material-UI or Bootstrap work? What makes the difference when you pass the components different props? Why is the process of styling different in React than in plain HTML, CSS DOM creation? How do you style a component without a third-party like Material-UI? What are the various ways to do it? How is the Material-UI Documentation organized? Can we make sense of how they've laid out the components?","title":"Class Five - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/","text":"Class Six - Questions for Discussion componentDidUpdate componentDidMount constructor method super method What are the lifecycle methods of React Component? How/when should you use componentDidMount ? How/when should you use componentDidUpdate ? Can we come up with a use case for each lifecycle method? What are Hooks and how do they helps us not use class components?","title":"Day 6 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#class-six-questions-for-discussion","text":"componentDidUpdate componentDidMount constructor method super method What are the lifecycle methods of React Component? How/when should you use componentDidMount ? How/when should you use componentDidUpdate ? Can we come up with a use case for each lifecycle method? What are Hooks and how do they helps us not use class components?","title":"Class Six - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/","text":"Class Seven - Questions for Discussion Describe each of these components and their purpose: <Switch> , <Link> , <BrowserRouter> , Router , ReactDom , and the render() method Describe the work flow from Link to someComponent . What is BrowserRouter doing? What is Routing? Why do we need web app routing ? Describe in detail this line of code: ReactDOM.render(<Main />, document.getElementById('root'));","title":"Day 7 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#class-seven-questions-for-discussion","text":"Describe each of these components and their purpose: <Switch> , <Link> , <BrowserRouter> , Router , ReactDom , and the render() method Describe the work flow from Link to someComponent . What is BrowserRouter doing? What is Routing? Why do we need web app routing ? Describe in detail this line of code: ReactDOM.render(<Main />, document.getElementById('root'));","title":"Class Seven - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/","text":"Class Eight - Questions for Dicussion What is a Cookie? How would you describe cookies? Could you name a few of their uses? Why do we need certain components to be protected? How do you think we'll use this to create an actual login process? What is the HTML History api? What is the singleton pattern? What is production mode? What is the browser window? What is setting cookies?","title":"Day 8 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#class-eight-questions-for-dicussion","text":"What is a Cookie? How would you describe cookies? Could you name a few of their uses? Why do we need certain components to be protected? How do you think we'll use this to create an actual login process? What is the HTML History api? What is the singleton pattern? What is production mode? What is the browser window? What is setting cookies?","title":"Class Eight - Questions for Dicussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/","text":"Class Nine - Questions for Discussion Store Global state Container mapStateToProps What is the Provider doing for our React components? Explain Redux on paper. Use drawings and words to explain it to a friend, classmate, roommate, or spouse. Why do we need to \"wrap\" our components in containers? What is mapStateToProps doing?","title":"Day 9 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#class-nine-questions-for-discussion","text":"Store Global state Container mapStateToProps What is the Provider doing for our React components? Explain Redux on paper. Use drawings and words to explain it to a friend, classmate, roommate, or spouse. Why do we need to \"wrap\" our components in containers? What is mapStateToProps doing?","title":"Class Nine - Questions for Discussion"},{"location":"module-1/CRA-overview/","text":"CRA (create-react-app) + ToDo App Walk-through Overview For the rest of this class, we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion. Starting with React video See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element. Create-React-App See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote. Convert Functional Component to Class-based Component Learn what component state means How to convert a Functional Component to a Class-Based Component import Component exchange function keyword for class keyword build constructor and call super build state object and build a render method. JSX & Add Button + State Change Use JSX to render pure JavaScript within your HTML. Build a button. Build a method to be called when the button is clicked. Update state in the method. And render the state change on the screen. Add Input Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\". .map() Todos use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element Know Your Docs React Docs - create-react-app NPM Docs - npx","title":"CRA Overview"},{"location":"module-1/CRA-overview/#cra-create-react-app-todo-app-walk-through","text":"","title":"CRA (create-react-app) + ToDo App Walk-through"},{"location":"module-1/CRA-overview/#overview","text":"For the rest of this class, we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion.","title":"Overview"},{"location":"module-1/CRA-overview/#starting-with-react-video","text":"See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element.","title":"Starting with React video"},{"location":"module-1/CRA-overview/#create-react-app","text":"See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote.","title":"Create-React-App"},{"location":"module-1/CRA-overview/#convert-functional-component-to-class-based-component","text":"Learn what component state means How to convert a Functional Component to a Class-Based Component import Component exchange function keyword for class keyword build constructor and call super build state object and build a render method.","title":"Convert Functional Component to Class-based Component"},{"location":"module-1/CRA-overview/#jsx-add-button-state-change","text":"Use JSX to render pure JavaScript within your HTML. Build a button. Build a method to be called when the button is clicked. Update state in the method. And render the state change on the screen.","title":"JSX &amp; Add Button + State Change"},{"location":"module-1/CRA-overview/#add-input","text":"Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\".","title":"Add Input"},{"location":"module-1/CRA-overview/#map-todos","text":"use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element","title":".map() Todos"},{"location":"module-1/CRA-overview/#know-your-docs","text":"React Docs - create-react-app NPM Docs - npx","title":"Know Your Docs"},{"location":"module-1/bonusLesson/","text":"Bonus Lesson: React from HTML to JSX + Why Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus - HTML + JSX"},{"location":"module-1/bonusLesson/#bonus-lesson-react-from-html-to-jsx-why","text":"Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus Lesson: React from HTML to JSX + Why"},{"location":"module-1/class-1/","text":"Class 1: Todo App The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney Greet, Outline, and Objectify OBJECTIVE - Today the student will learn and practice to understand: how to use React to create a simple composable web app Demonstrate their ability to build a new todo app in React from recollection Questions for Student Led Discussion + Quick Intros Interview Challenge Student Presentations Creation Time: Repeat the Homework Create-react-app Add origin Create a todo list app Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins As usual, it is incredibly important that you read the pre-homework. If you haven't read the pre-homework and worked through the code-along video YOU WILL BE FAR BEHIND TODAY!!! In the pre-homework, you should have downloaded create-react-app and spun up a create-react-app, built a button that changes state from true to false and then displayed the change of state. Today, we're going to continue that process and build a todo app with React!! Example Simple React Todo App Create a new react app: npx create-react-app my-app-name-here cd my-app-name-here git init and create a new repe push it to the new repo in GitHub git remote add origin \"https://github.com/your_github_username/$repo_name.git\" Yank out all the unnecessary code and begin building your todo app Create the state for your app.js the equal an object with the values: {isClicked: false, todos: [], text: ''} in it Create a button and add an onClickHandler that uses this.setState({}) to change the value of isClicked from false to true and true to false Create an input field and an onChangeHandler function that changes the state of text: '' to the e.target.value onChange of the input field Change your onClickHandler function to uses this.setState({}) to set the value of text as the last value todos: [] Don't forget to spread the rest/ ... of the todos Now clear text in the same function Once you have state being changed properly create an element that can be used for each of the items in todos: [] Now .map() over todos and show each item in the DOM. REMEMBER to give the callback function in .map() an index and provide that to each of the elements as a prop: key={index} Create a button on each of the item elements and uses this and when clicked removes/deletes the item from todos: [] METHOD 1 : Passing Methods/Functions as Props. Use the following mix-and-match options to pass a delete method that uses this.setState to update state when the delete button is clicked, passing the index of the item back up to the component that handles state . ref Mix & Match Code Snippets a handleClick={index => this.deleteItem(index)} b delete = (index) => { c } d let objectCopy = [...this.state.item] e ObjectCopy.splice(index, 1) f this.SetState({items: [...objectCopy]}) g <button onClick={() => props.handleClick(index)}>Delete</button> Follow-up Video: Vimeo, Clayton@ACA - Intro to React, 80 mins Or use METHOD 2 : use setState Hook - https://www.robinwieruch.de/react-remove-item-from-list Push Yourself Further Create a button that allows you to edit each todo Add a drag and drop feature to reorder the todos Complete both methods of the delete and add functionality Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 1 ToDo App"},{"location":"module-1/class-1/#class-1-todo-app","text":"The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney","title":"Class 1: Todo App"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"OBJECTIVE - Today the student will learn and practice to understand: how to use React to create a simple composable web app Demonstrate their ability to build a new todo app in React from recollection Questions for Student Led Discussion + Quick Intros Interview Challenge Student Presentations Creation Time: Repeat the Homework Create-react-app Add origin Create a todo list app Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-1/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-1/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-1/#creation-time-60-90-mins","text":"As usual, it is incredibly important that you read the pre-homework. If you haven't read the pre-homework and worked through the code-along video YOU WILL BE FAR BEHIND TODAY!!! In the pre-homework, you should have downloaded create-react-app and spun up a create-react-app, built a button that changes state from true to false and then displayed the change of state. Today, we're going to continue that process and build a todo app with React!! Example Simple React Todo App Create a new react app: npx create-react-app my-app-name-here cd my-app-name-here git init and create a new repe push it to the new repo in GitHub git remote add origin \"https://github.com/your_github_username/$repo_name.git\" Yank out all the unnecessary code and begin building your todo app Create the state for your app.js the equal an object with the values: {isClicked: false, todos: [], text: ''} in it Create a button and add an onClickHandler that uses this.setState({}) to change the value of isClicked from false to true and true to false Create an input field and an onChangeHandler function that changes the state of text: '' to the e.target.value onChange of the input field Change your onClickHandler function to uses this.setState({}) to set the value of text as the last value todos: [] Don't forget to spread the rest/ ... of the todos Now clear text in the same function Once you have state being changed properly create an element that can be used for each of the items in todos: [] Now .map() over todos and show each item in the DOM. REMEMBER to give the callback function in .map() an index and provide that to each of the elements as a prop: key={index} Create a button on each of the item elements and uses this and when clicked removes/deletes the item from todos: [] METHOD 1 : Passing Methods/Functions as Props. Use the following mix-and-match options to pass a delete method that uses this.setState to update state when the delete button is clicked, passing the index of the item back up to the component that handles state . ref Mix & Match Code Snippets a handleClick={index => this.deleteItem(index)} b delete = (index) => { c } d let objectCopy = [...this.state.item] e ObjectCopy.splice(index, 1) f this.SetState({items: [...objectCopy]}) g <button onClick={() => props.handleClick(index)}>Delete</button> Follow-up Video: Vimeo, Clayton@ACA - Intro to React, 80 mins Or use METHOD 2 : use setState Hook - https://www.robinwieruch.de/react-remove-item-from-list","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-1/#push-yourself-further","text":"Create a button that allows you to edit each todo Add a drag and drop feature to reorder the todos Complete both methods of the delete and add functionality","title":"Push Yourself Further"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: Punk API Beer App Your limitation\u2014it\u2019s only your imagination. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: passing data between components using props set state and use it fetch external data and set state with it dynamically render data with uniform elements Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Pair up to build in pairs Plan your beer app (whiteboard & Code Plan) Create a repo and program Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Build a simple app that requests information from the PUNK API and dynamically renders data from it with React components. Project Instructions Pair-program this one Create a react app: PUNK-API-REACT-APP git init and push it up as a repo In your app.js component make an HTTP request with axios to: https://api.punkapi.com/v2/beers and set the data that comes back into an array in state . Build a beer component that displays everything about the beer Map over state and render a component for each beer in state Add a button that allows a user to \"like\" a beer Follow-up Video YT, ihatetomatoes - React, How to use Fetch API Push Yourself Further Follow along with Peter Tichy at ihatetomatoes through his React Tutorial to make the app collapsible and interactive Go find another API and build another React app: https://apilist.fun Build the functionality for your \"liked\" heart 411-16-Code Plan Your Like Button Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create PunkAPI Assignment Create Class 2 Blog Assignment Before you give the attendance code, STOP everyone and hold a quick verbal review of these terms. Ask the class and let students call out the answer freely. Don't let only one student answer them all though! Props State setState() Template literals in JavaScript Give attendance code Prepare for next by completing all of your pre-class lessons Complete the feedback survey Record every class. Remind the students to merge their PRs (if applicable). Remind students to bring paper and pencils to every class for whiteboarding.","title":"Class 2 Beer App"},{"location":"module-1/class-2/#class-2-punk-api-beer-app","text":"Your limitation\u2014it\u2019s only your imagination.","title":"Class 2: Punk API Beer App"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: passing data between components using props set state and use it fetch external data and set state with it dynamically render data with uniform elements Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Pair up to build in pairs Plan your beer app (whiteboard & Code Plan) Create a repo and program Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"Build a simple app that requests information from the PUNK API and dynamically renders data from it with React components.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#project-instructions","text":"Pair-program this one Create a react app: PUNK-API-REACT-APP git init and push it up as a repo In your app.js component make an HTTP request with axios to: https://api.punkapi.com/v2/beers and set the data that comes back into an array in state . Build a beer component that displays everything about the beer Map over state and render a component for each beer in state Add a button that allows a user to \"like\" a beer","title":"Project Instructions"},{"location":"module-1/class-2/#follow-up-video","text":"YT, ihatetomatoes - React, How to use Fetch API","title":"Follow-up Video"},{"location":"module-1/class-2/#push-yourself-further","text":"Follow along with Peter Tichy at ihatetomatoes through his React Tutorial to make the app collapsible and interactive Go find another API and build another React app: https://apilist.fun Build the functionality for your \"liked\" heart 411-16-Code Plan Your Like Button","title":"Push Yourself Further"},{"location":"module-1/class-2/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create PunkAPI Assignment Create Class 2 Blog Assignment Before you give the attendance code, STOP everyone and hold a quick verbal review of these terms. Ask the class and let students call out the answer freely. Don't let only one student answer them all though! Props State setState() Template literals in JavaScript Give attendance code Prepare for next by completing all of your pre-class lessons Complete the feedback survey Record every class. Remind the students to merge their PRs (if applicable). Remind students to bring paper and pencils to every class for whiteboarding.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-3/","text":"Class 3: Address Book It\u2019s going to be hard, but hard does not mean impossible. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Conditional rendering with React Initiating and using local state in React components Passing data via props to child components Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Project One: Random User Address Book Project 2: Todo App continued w/Mapping, Props, State and Conditional Rendering Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Project One: Random User Address Book Partner up. This is a pair programming project. Start with this API: https://randomuser.me/api?results=25 Whiteboard an app you can use to display users that you would use if you didn't have your phone. Make a code plan and plan your components. Spec 1: minimum 25 users Spec 2: displays the user's name and thumbnail picture Spec 3: When the \"show details\" button is clicked the user's details are revealed and button text turns to \"hide details\" Spec 4: When \"hide details\" is clicked the user's details disappear. Follow-up Video: YT, ihatetomatoes - How to use Fetch API in React Project Two: ToDo App Continued If you didn't finish your Todo App from last night w/ mapping, props, state and conditional rendering, now is the time to finish that. Exit Recap, Attendance, and Reminders, 5 mins Create AddressBook Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 3 Address Book"},{"location":"module-1/class-3/#class-3-address-book","text":"It\u2019s going to be hard, but hard does not mean impossible.","title":"Class 3: Address Book"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Conditional rendering with React Initiating and using local state in React components Passing data via props to child components Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Project One: Random User Address Book Project 2: Todo App continued w/Mapping, Props, State and Conditional Rendering Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-3/#project-one-random-user-address-book","text":"Partner up. This is a pair programming project. Start with this API: https://randomuser.me/api?results=25 Whiteboard an app you can use to display users that you would use if you didn't have your phone. Make a code plan and plan your components. Spec 1: minimum 25 users Spec 2: displays the user's name and thumbnail picture Spec 3: When the \"show details\" button is clicked the user's details are revealed and button text turns to \"hide details\" Spec 4: When \"hide details\" is clicked the user's details disappear. Follow-up Video: YT, ihatetomatoes - How to use Fetch API in React","title":"Project One: Random User Address Book"},{"location":"module-1/class-3/#project-two-todo-app-continued","text":"If you didn't finish your Todo App from last night w/ mapping, props, state and conditional rendering, now is the time to finish that.","title":"Project Two: ToDo App Continued"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Create AddressBook Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-4/","text":"Class 4: Hackathon Instructor Notes What In-Class Hackathon to build a Hacker News Clone with the Algolia API. Groups of 3 - 4 Architecture: 4 Components passing props Plan It => Build It => Evaluate It => Host It Why Need to internalize how to plan an app, visualize the needs and building blocks. Learn to read docs on their own. Work as a team. Organize on Trello and Git Branches How Divide the groups by partnering students by strengths. Require them to create a Trello board meanwhile one student can build a repo. Let them lead the planning but make sure they all have a plan before setting off. Let them lead their groups and mentor only when they ask. Watch the overview video . Wake up with determination. Go to bed with satisfaction. Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Developing an app in collaboration API requests, conditional rendering, mapping, forms Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Hackernews Client or GitHub Issue Client Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today you will work with a team of 2-3 junior developers to build a Hackernews Client. For this Hackathon you will need to look at your available data and plan how you want to render it, then plan with your team how to build it. Work smart, not hard. 411-22-HackathonOverview from Zollege on Vimeo . Here\u2019s the regular Hacker News site, and then there\u2019s the Algolia Hacker News Search . If you haven't visited either one, you should start bringing it into your daily practice. It has been said that all web apps are basically just lists. This app will give you some practice with lists of components that are a little more complicated than todos. Fetch stories from the Algolia HN Search REST API . Hint: Look under the Search heading. Instructions Example NewsFeed In groups of 2 - 3: Use your browser to see what the data looks like when you fetch it. Whiteboard and make a plan of the app you want to build with the data. Create a react app, git init and push it to a new repo, then git clone. Together, build a new app people can use!! Specs: Starts with empty list Has search bar at the top to filter search for terms Accepts a search term and calls the HN API with that term as the query Loads the list Has a form input to search by date and author Follow-up: Blog, Medium - How to Build a Simple Hackernews Feed Push Yourself Further Add a \"View Later\" button to flag articles you want to read later. This will move the article into another list. Add a \"Not Interested\" section to flag articles you don't want to read and greys out the title text when clicked. Add functionality that only displays 10 articles at a time. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Hackathon Checkpoint Assignment Create Class 4 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 4 Hackathon"},{"location":"module-1/class-4/#class-4-hackathon","text":"","title":"Class 4: Hackathon"},{"location":"module-1/class-4/#instructor-notes","text":"","title":"Instructor Notes"},{"location":"module-1/class-4/#what","text":"In-Class Hackathon to build a Hacker News Clone with the Algolia API. Groups of 3 - 4 Architecture: 4 Components passing props Plan It => Build It => Evaluate It => Host It","title":"What"},{"location":"module-1/class-4/#why","text":"Need to internalize how to plan an app, visualize the needs and building blocks. Learn to read docs on their own. Work as a team. Organize on Trello and Git Branches","title":"Why"},{"location":"module-1/class-4/#how","text":"Divide the groups by partnering students by strengths. Require them to create a Trello board meanwhile one student can build a repo. Let them lead the planning but make sure they all have a plan before setting off. Let them lead their groups and mentor only when they ask. Watch the overview video . Wake up with determination. Go to bed with satisfaction.","title":"How"},{"location":"module-1/class-4/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Developing an app in collaboration API requests, conditional rendering, mapping, forms Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Hackernews Client or GitHub Issue Client Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-4/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-1/class-4/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-4/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-4/#creation-time-60-90-mins","text":"Today you will work with a team of 2-3 junior developers to build a Hackernews Client. For this Hackathon you will need to look at your available data and plan how you want to render it, then plan with your team how to build it. Work smart, not hard. 411-22-HackathonOverview from Zollege on Vimeo . Here\u2019s the regular Hacker News site, and then there\u2019s the Algolia Hacker News Search . If you haven't visited either one, you should start bringing it into your daily practice. It has been said that all web apps are basically just lists. This app will give you some practice with lists of components that are a little more complicated than todos. Fetch stories from the Algolia HN Search REST API . Hint: Look under the Search heading.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-4/#instructions","text":"Example NewsFeed In groups of 2 - 3: Use your browser to see what the data looks like when you fetch it. Whiteboard and make a plan of the app you want to build with the data. Create a react app, git init and push it to a new repo, then git clone. Together, build a new app people can use!! Specs: Starts with empty list Has search bar at the top to filter search for terms Accepts a search term and calls the HN API with that term as the query Loads the list Has a form input to search by date and author Follow-up: Blog, Medium - How to Build a Simple Hackernews Feed","title":"Instructions"},{"location":"module-1/class-4/#push-yourself-further","text":"Add a \"View Later\" button to flag articles you want to read later. This will move the article into another list. Add a \"Not Interested\" section to flag articles you don't want to read and greys out the title text when clicked. Add functionality that only displays 10 articles at a time.","title":"Push Yourself Further"},{"location":"module-1/class-4/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-4/#exit-recap-attendance-and-reminders-5-mins","text":"Create Hackathon Checkpoint Assignment Create Class 4 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/conditionalRendering/","text":"Conditional Rendering The harder you work for something, the greater you\u2019ll feel when you achieve it. Overview Whoa, you've done a lot! Already you've learned the core mindset and techniques of React which includes a new language, JSX!! Congratulation! In the past few lessons you've learned how to fetch data, store it in state, and rendering it for the human user\u2019s eyes using someone else's codebase, React. During that time you've learned how to merge our understanding of programming in JavaScript with the layout and styling of HTML and CSS. We've been working hard! But now it's time to dig a little deeper and figure out how to use some of the statements we learned last week to render certain elements based on conditions that we get in our applications. Conditional Rendering Using Local State Below is a snippet of code that should be very easy for you to read. Simple If/Else Statement 1 2 3 4 5 if ( isVerified ) { return \"is verified\" } else { return \"not verified\" } This is simple and straightforward JavaScript. We'll now just apply the same logic with React. After all, when we're developing in React we're writing JavaScript! If/Else Statement in React 1 2 3 4 5 6 7 8 9 import React , { Component } from 'react' const MyConditionalComponent = ( props ) => { if ( props . isVerified ) { return < IsVerifiedComponent userId = { props . id } /> } else { return < NotVerifiedComponent userId = { props . id } /> } } Above we see that if the user is verified, (prop.isVerified = true) then we can render a component that might welcome the user like the <IsVerifiedComponent /> , else we can render a component that tells them that their login failed and ask them to try again in the <NotVerifiedComponent /> . All of that was based on the values that are in the props object. We can do the same thing with state! Follow along with the comments throughout the code snippet to understand this for yourself. Button Changes State 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // turn your functional component into a class-based component so you can create local state import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) /* inside the constructor, initiate the state as an object and give it the keys you want to use, in this case we'll use a property called isHidden so we know what it's for. */ this . state = { isHidden : true } } /* Remember from 211 that classes are functions that return an object with a context or instance of which will require/allow us to use the `this` keyword. */ /* because the component is a class we can also create and use our own methods: */ handleClick = () => { /* What you see below is a ternary operator. It reads like this: \"if `this.state.isHidden` is true - set status to be false , else set it to true\". */ let status = this . state . isHidden == true ? false : true /* Because we have the variable status set to be the opposite of whatever `this.state.isHidden` equals... */ /* ...we can use its value to set `this.state.isHidden` when our button is clicked.*/ /* Notice we use the `.setState({})` method to change values in our state object. */ this . setState ({ isHidden : status }) } render () { /* then we check if the value in state is true or false and render accordingly */ if ( this . state . isHidden ) { return ( /* if the user clicks this component it will trigger the `handleClick` method which changes the state and then forces the parent component to re-render, which will render the `<UserDetailsCard />` component as well and vice versa! */ < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { if ( this . state . isHidden ) { return ( < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } In the example above we will have to assume <UserNameCard /> and <UserDetailsCard /> have a button in them that looks like this: <button onClick={this.props.revealClick}>Show Details</button> and <button onClick={this.props.hideClick}>Hide Details</button> . Each of these buttons have a built-in property called onClick . We then assign the onClick method to this.props.revealClick which then points back to the original method we built: handleClick . In short, when the button is clicked it sends data back up to its parent components to change the value of this.state.isHidden . In turn, when the state changes, React will re-render and we'll get a new view because MyConditionalClass has a conditional rendering if/else statement in it. You will be using this for your next few projects so read back over it and make sure you got it! NOTE: in the normal DOM methods you have seen onclick but in React you will use onClick For further reading check out the Medium blog on Conditional Rendering in the Additional Resources . In the upcoming video you'll see a different way to manage conditional rendering using the newer method, useState() hook. Both ways work and this \"older\" way is taught first because it used to be the only way to manage this task before React introduced Hooks . See It - Conditional Rendering You are welcome to use either method you feel most comfortable with but we would be remiss if you didn't learn how to use the new Hook, useState() , to do the same thing and not create a Class-based Component only to manage a state object...! Additional Resources YT, Codevolution - Conditional Rendering Blog, Medium - Conditional Rendering Know Your Docs React Docs - Hooks React Docs - Lists & Keys","title":"Conditional Rendering"},{"location":"module-1/conditionalRendering/#conditional-rendering","text":"The harder you work for something, the greater you\u2019ll feel when you achieve it.","title":"Conditional Rendering"},{"location":"module-1/conditionalRendering/#overview","text":"Whoa, you've done a lot! Already you've learned the core mindset and techniques of React which includes a new language, JSX!! Congratulation! In the past few lessons you've learned how to fetch data, store it in state, and rendering it for the human user\u2019s eyes using someone else's codebase, React. During that time you've learned how to merge our understanding of programming in JavaScript with the layout and styling of HTML and CSS. We've been working hard! But now it's time to dig a little deeper and figure out how to use some of the statements we learned last week to render certain elements based on conditions that we get in our applications.","title":"Overview"},{"location":"module-1/conditionalRendering/#conditional-rendering-using-local-state","text":"Below is a snippet of code that should be very easy for you to read. Simple If/Else Statement 1 2 3 4 5 if ( isVerified ) { return \"is verified\" } else { return \"not verified\" } This is simple and straightforward JavaScript. We'll now just apply the same logic with React. After all, when we're developing in React we're writing JavaScript! If/Else Statement in React 1 2 3 4 5 6 7 8 9 import React , { Component } from 'react' const MyConditionalComponent = ( props ) => { if ( props . isVerified ) { return < IsVerifiedComponent userId = { props . id } /> } else { return < NotVerifiedComponent userId = { props . id } /> } } Above we see that if the user is verified, (prop.isVerified = true) then we can render a component that might welcome the user like the <IsVerifiedComponent /> , else we can render a component that tells them that their login failed and ask them to try again in the <NotVerifiedComponent /> . All of that was based on the values that are in the props object. We can do the same thing with state! Follow along with the comments throughout the code snippet to understand this for yourself. Button Changes State 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // turn your functional component into a class-based component so you can create local state import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) /* inside the constructor, initiate the state as an object and give it the keys you want to use, in this case we'll use a property called isHidden so we know what it's for. */ this . state = { isHidden : true } } /* Remember from 211 that classes are functions that return an object with a context or instance of which will require/allow us to use the `this` keyword. */ /* because the component is a class we can also create and use our own methods: */ handleClick = () => { /* What you see below is a ternary operator. It reads like this: \"if `this.state.isHidden` is true - set status to be false , else set it to true\". */ let status = this . state . isHidden == true ? false : true /* Because we have the variable status set to be the opposite of whatever `this.state.isHidden` equals... */ /* ...we can use its value to set `this.state.isHidden` when our button is clicked.*/ /* Notice we use the `.setState({})` method to change values in our state object. */ this . setState ({ isHidden : status }) } render () { /* then we check if the value in state is true or false and render accordingly */ if ( this . state . isHidden ) { return ( /* if the user clicks this component it will trigger the `handleClick` method which changes the state and then forces the parent component to re-render, which will render the `<UserDetailsCard />` component as well and vice versa! */ < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import React , { Component } from 'react' class MyConditionalComponent extends Component { constructor ( props ) { super ( props ) this . state = { isHidden : true } } handleClick = () => { let status = this . state . isHidden == true ? false : true this . setState ({ isHidden : status }) } render () { if ( this . state . isHidden ) { return ( < UserNameCard revealClick = { this . handleClick } userId = { props . user . id } /> ) } else { return ( < div > < UserNameCard userId = { props . user . id } /> < UserDetailsCard hideClick = { this . handleClick } userId = { props . user . id } /> < /div> ) } } } In the example above we will have to assume <UserNameCard /> and <UserDetailsCard /> have a button in them that looks like this: <button onClick={this.props.revealClick}>Show Details</button> and <button onClick={this.props.hideClick}>Hide Details</button> . Each of these buttons have a built-in property called onClick . We then assign the onClick method to this.props.revealClick which then points back to the original method we built: handleClick . In short, when the button is clicked it sends data back up to its parent components to change the value of this.state.isHidden . In turn, when the state changes, React will re-render and we'll get a new view because MyConditionalClass has a conditional rendering if/else statement in it. You will be using this for your next few projects so read back over it and make sure you got it! NOTE: in the normal DOM methods you have seen onclick but in React you will use onClick For further reading check out the Medium blog on Conditional Rendering in the Additional Resources . In the upcoming video you'll see a different way to manage conditional rendering using the newer method, useState() hook. Both ways work and this \"older\" way is taught first because it used to be the only way to manage this task before React introduced Hooks .","title":"Conditional Rendering Using Local State"},{"location":"module-1/conditionalRendering/#see-it-conditional-rendering","text":"You are welcome to use either method you feel most comfortable with but we would be remiss if you didn't learn how to use the new Hook, useState() , to do the same thing and not create a Class-based Component only to manage a state object...!","title":"See It - Conditional Rendering"},{"location":"module-1/conditionalRendering/#additional-resources","text":"YT, Codevolution - Conditional Rendering Blog, Medium - Conditional Rendering","title":"Additional Resources"},{"location":"module-1/conditionalRendering/#know-your-docs","text":"React Docs - Hooks React Docs - Lists & Keys","title":"Know Your Docs"},{"location":"module-1/dynamicRendering/","text":"Dynamic Rendering with .map() Overview You've done this already but I think it's good to review it so you don't get hung up on a simple and avoidable bug in these next few projects. When we .map() over an array in React we must provide the callback function an index for its second argument. The reason we have to do this is that React works to make our app fast and efficient by watching the actual DOM and comparing it to the virtual DOM. To do this it needs to have a way to identify one instance of a component from another. When we give the callback function an index we are giving React the chance to apply a unique individual value to each of the nodes that will be created in the DOM tree by each instance of the component. The value we give it is called a key . To give each of our items in the array a unique and individual key we assign it the value of the index in the callback function of the .map() method. Mapping - Key & Index .map Example with key i as 2nd argument 1 2 3 4 5 6 7 const todos = [{ title : \"Feed Dog\" , status : \"red\" }, { title : \"Walk Dog\" , status : \"yellow\" }, { title : \"Pet Dog\" , status : \"green\" }] const todoItems = todos . map (( item , i ) => < li key = { i } className = { item . status } > { item . title } < /li> ); Above we see an example of using the index of the item in the array as the key, represented as i . This is not the preferred way but is the fall-back option if you don't have another way to assign unique keys . If the items come with id keys we could assign the key to item.id or even item.email instead. All that matters to React is that each element has a unique key so it can do its job of updated and rendering what, when, and where. Note: See how we assigned the className to the status of the todo item. This is JSX syntax that means the same as class name in HTML. Map Over & Render Data Practice It Continuing with the Todo app you built last class, you're going to pull out the pieces that represent each todo into a separate component. Then you will map over state and pass to each instance of the component the props they need to render the todo item, the delete button, the edit button and the urgency status. Instructions Before you get going make sure you install this most wonderful VS Code Extension: Simple React Snippets . Continue with the app you built in the first class of 411. Make a code plan through whiteboarding what you need to do. The todoList component should map over the this.state.todos and return a todoItem component for each todo in the array. The todoItem should be passed props that include handlers like: handleClick , handleChange , handleEdit . The todoItem should have a state that maintains the urgency status that holds the values of green , yellow or red . The todoItem component should render the background-color of the text based on the status of the item. At the end your Todo list should look the same but function differently with the exception of the status colors. Additional Resources YT, Codevolution - List Rendering Blog, Medium - Quick and Lazy Way to Assign Unique Ids Know Your Docs Most importantly, use the React Docs as your guide each time you build with React. UUID Docs - Home Page React Docs - Hooks React Docs - Lists & Keys","title":"Dynamic Rendering"},{"location":"module-1/dynamicRendering/#dynamic-rendering-with-map","text":"","title":"Dynamic Rendering with .map()"},{"location":"module-1/dynamicRendering/#overview","text":"You've done this already but I think it's good to review it so you don't get hung up on a simple and avoidable bug in these next few projects. When we .map() over an array in React we must provide the callback function an index for its second argument. The reason we have to do this is that React works to make our app fast and efficient by watching the actual DOM and comparing it to the virtual DOM. To do this it needs to have a way to identify one instance of a component from another. When we give the callback function an index we are giving React the chance to apply a unique individual value to each of the nodes that will be created in the DOM tree by each instance of the component. The value we give it is called a key . To give each of our items in the array a unique and individual key we assign it the value of the index in the callback function of the .map() method.","title":"Overview"},{"location":"module-1/dynamicRendering/#mapping-key-index","text":".map Example with key i as 2nd argument 1 2 3 4 5 6 7 const todos = [{ title : \"Feed Dog\" , status : \"red\" }, { title : \"Walk Dog\" , status : \"yellow\" }, { title : \"Pet Dog\" , status : \"green\" }] const todoItems = todos . map (( item , i ) => < li key = { i } className = { item . status } > { item . title } < /li> ); Above we see an example of using the index of the item in the array as the key, represented as i . This is not the preferred way but is the fall-back option if you don't have another way to assign unique keys . If the items come with id keys we could assign the key to item.id or even item.email instead. All that matters to React is that each element has a unique key so it can do its job of updated and rendering what, when, and where. Note: See how we assigned the className to the status of the todo item. This is JSX syntax that means the same as class name in HTML.","title":"Mapping - Key &amp; Index"},{"location":"module-1/dynamicRendering/#map-over-render-data","text":"","title":"Map Over &amp; Render Data"},{"location":"module-1/dynamicRendering/#practice-it","text":"Continuing with the Todo app you built last class, you're going to pull out the pieces that represent each todo into a separate component. Then you will map over state and pass to each instance of the component the props they need to render the todo item, the delete button, the edit button and the urgency status.","title":"Practice It"},{"location":"module-1/dynamicRendering/#instructions","text":"Before you get going make sure you install this most wonderful VS Code Extension: Simple React Snippets . Continue with the app you built in the first class of 411. Make a code plan through whiteboarding what you need to do. The todoList component should map over the this.state.todos and return a todoItem component for each todo in the array. The todoItem should be passed props that include handlers like: handleClick , handleChange , handleEdit . The todoItem should have a state that maintains the urgency status that holds the values of green , yellow or red . The todoItem component should render the background-color of the text based on the status of the item. At the end your Todo list should look the same but function differently with the exception of the status colors.","title":"Instructions"},{"location":"module-1/dynamicRendering/#additional-resources","text":"YT, Codevolution - List Rendering Blog, Medium - Quick and Lazy Way to Assign Unique Ids","title":"Additional Resources"},{"location":"module-1/dynamicRendering/#know-your-docs","text":"Most importantly, use the React Docs as your guide each time you build with React. UUID Docs - Home Page React Docs - Hooks React Docs - Lists & Keys","title":"Know Your Docs"},{"location":"module-1/fetchStoreRender/","text":"Fetch Data & Store it in Local State You are in charge of your own destiny. You are the steward of your own vessel. And you have the power to choose, to grow, to learn, and to lead! Overview Now that we have a grip on this passing props stuff let's take a deeper look at that state stuff in Class-based Components . As you saw in the last lesson we were able to pass the values in a parent component's state down to its child component through props . But what is state ? Where does it get its values? When is it created? In this lesson, we'll address all of those questions. State (Local Memory) According to the React Docs , state is locally-scoped memory , which means that it is only available to the component that it is initialized in unless that data/memory is passed to another component via, ya know... props . The Rules of State Only class-based components can have local state . state is just a plain ole JavaScript object with key-value pairs. If state changes the component will & must re-render. state can only be updated with the this.setState() method which takes an object {} as its sole argument. setState() compares the object you pass into the current state and changes only the values that need to change. Again, state updates are merged which means setState() compares the object of state and the object passed into it before it makes changes and only changes what needs to be changed. This is why this.state can only be changed with the setState() method. The changes of state follow a pattern of data flow called a top-down or unidirectional data flow. Data flows downward . This means that state is always owned by some specific parent component, and any data or UI components derived from that state can only affect components below them in the tree. See It - State Overview: Fetch, Store, and Render Data Fetch Data w/Axios + componentDidMount Map Over & Render Data Render Functional Components + Styling Practice It - State + Props The homework is going to require you to code on your own a little more than usual. Why? Because the concepts of React are functional programming concepts and require doing to understand them. Also, you're becoming an actual developer, which means you need to start learning to teach yourself . Sooner or later there will be a new library or language you will need to know but don't. You then have to use your experience here to teach yourself that new library or language. Don't be afraid. You have the power of Google with you. BE SURE TO COMPLETE THIS BEFORE CLASS OR YOU WILL BE BEHIND!! Follow along with the official React Tutorial to build an interactive Tic-Tac-Toe Game. Here's your starter code You can do this either in CodePen or in a local environment folder. When you get it working in one, transfer it to the other. Start here . Additional Resources YT, Ben Awad - State in React.js, pt.5 Know Your Docs React Docs - State + Lifecycle Methods","title":"Fetch, Store, Render"},{"location":"module-1/fetchStoreRender/#fetch-data-store-it-in-local-state","text":"You are in charge of your own destiny. You are the steward of your own vessel. And you have the power to choose, to grow, to learn, and to lead!","title":"Fetch Data &amp; Store it in Local State"},{"location":"module-1/fetchStoreRender/#overview","text":"Now that we have a grip on this passing props stuff let's take a deeper look at that state stuff in Class-based Components . As you saw in the last lesson we were able to pass the values in a parent component's state down to its child component through props . But what is state ? Where does it get its values? When is it created? In this lesson, we'll address all of those questions.","title":"Overview"},{"location":"module-1/fetchStoreRender/#state-local-memory","text":"According to the React Docs , state is locally-scoped memory , which means that it is only available to the component that it is initialized in unless that data/memory is passed to another component via, ya know... props .","title":"State (Local Memory)"},{"location":"module-1/fetchStoreRender/#the-rules-of-state","text":"Only class-based components can have local state . state is just a plain ole JavaScript object with key-value pairs. If state changes the component will & must re-render. state can only be updated with the this.setState() method which takes an object {} as its sole argument. setState() compares the object you pass into the current state and changes only the values that need to change. Again, state updates are merged which means setState() compares the object of state and the object passed into it before it makes changes and only changes what needs to be changed. This is why this.state can only be changed with the setState() method. The changes of state follow a pattern of data flow called a top-down or unidirectional data flow. Data flows downward . This means that state is always owned by some specific parent component, and any data or UI components derived from that state can only affect components below them in the tree.","title":"The Rules of State"},{"location":"module-1/fetchStoreRender/#see-it-state","text":"","title":"See It - State"},{"location":"module-1/fetchStoreRender/#overview-fetch-store-and-render-data","text":"","title":"Overview: Fetch, Store, and Render Data"},{"location":"module-1/fetchStoreRender/#fetch-data-waxios-componentdidmount","text":"","title":"Fetch Data w/Axios + componentDidMount"},{"location":"module-1/fetchStoreRender/#map-over-render-data","text":"","title":"Map Over &amp; Render Data"},{"location":"module-1/fetchStoreRender/#render-functional-components-styling","text":"","title":"Render Functional Components + Styling"},{"location":"module-1/fetchStoreRender/#practice-it-state-props","text":"The homework is going to require you to code on your own a little more than usual. Why? Because the concepts of React are functional programming concepts and require doing to understand them. Also, you're becoming an actual developer, which means you need to start learning to teach yourself . Sooner or later there will be a new library or language you will need to know but don't. You then have to use your experience here to teach yourself that new library or language. Don't be afraid. You have the power of Google with you. BE SURE TO COMPLETE THIS BEFORE CLASS OR YOU WILL BE BEHIND!! Follow along with the official React Tutorial to build an interactive Tic-Tac-Toe Game. Here's your starter code You can do this either in CodePen or in a local environment folder. When you get it working in one, transfer it to the other. Start here .","title":"Practice It - State + Props"},{"location":"module-1/fetchStoreRender/#additional-resources","text":"YT, Ben Awad - State in React.js, pt.5","title":"Additional Resources"},{"location":"module-1/fetchStoreRender/#know-your-docs","text":"React Docs - State + Lifecycle Methods","title":"Know Your Docs"},{"location":"module-1/formsInReact/","text":"Forms in React Keep your face always toward the sunshine\u2014and shadows will fall behind you.\u2003\u2014Walt Whitman Overview We've seen a lot in the past few classes. It may seem like a flurry of information but the more you practice this stuff the easier it will get. Always keep looking up React documentation and tutorials to guide you along. Today let's talk about using forms in React. Forms are what you will build over and over again in your career! You've seen and used forms in HTML. They're pretty simple and easy to use. A form that takes someone's name looks like this: 1 2 3 4 5 6 7 < form > < label > Name: < input type = \"text\" name = \"name\" /> </ label > < input type = \"submit\" value = \"Submit\" /> </ form > In HTML, the elements like: <input> , <textarea> , and <select> handle their own state, but in React we want state to be handled in our component\u2019s local state. We call this a single source of truth . When a React component that renders a form also controls what happens inside its form based on what the user inputs, we call it a controlled component . As the user types, the new state is set with the values they input and the value they see inside the form only represents what is stored in the component\u2019s state. The code snippet below demonstrates a simple controlled component . Simple Controlled Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // this method is called when the form is submitted. Potentially an API request could go here using the data from this.state handleSubmit ( e ) { // always put this line in on submits, it prevents the page from reloading and wiping your state e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to empty quotes again this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes this.state.value to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // this method is called when the form is submitted. Potentially an API request could go here using the data from this.state handleSubmit ( e ) { // always put this line in on submits, it prevents the page from reloading and wiping your state e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to empty quotes again this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes this.state.value to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } In this way, we can control what data is sent off and when it is sent. Before moving on, make sure you read over all the examples laid out in the very clear React Form Docs . Pay special attention to the <select/> and Handling Multiple Inputs . See It - Forms in React DRY Methods + Handle Submit Practice It This CodePen is the same code snippet you saw on the previous page. It was created by Dan Abramov the creator of Redux, a technology you'll learn in a few short weeks! Forms in React CodePen Instructions Open and fork the CodePen above Create 5 more text inputs: lastname , DOB , age, pho ne, and gender in this form. Use a <select> input for gender. Create keys in this.state to change the values based on what the user puts in. Console.log on submission. Now create an array in this.state that you can push into when the submit button is clicked. map over the array and display the users. Filter By Search Term Know Your Docs React Docs - Forms React Docs - Handling Multiple Inputs","title":"Forms in React"},{"location":"module-1/formsInReact/#forms-in-react","text":"Keep your face always toward the sunshine\u2014and shadows will fall behind you.\u2003\u2014Walt Whitman","title":"Forms in React"},{"location":"module-1/formsInReact/#overview","text":"We've seen a lot in the past few classes. It may seem like a flurry of information but the more you practice this stuff the easier it will get. Always keep looking up React documentation and tutorials to guide you along. Today let's talk about using forms in React. Forms are what you will build over and over again in your career! You've seen and used forms in HTML. They're pretty simple and easy to use. A form that takes someone's name looks like this: 1 2 3 4 5 6 7 < form > < label > Name: < input type = \"text\" name = \"name\" /> </ label > < input type = \"submit\" value = \"Submit\" /> </ form > In HTML, the elements like: <input> , <textarea> , and <select> handle their own state, but in React we want state to be handled in our component\u2019s local state. We call this a single source of truth . When a React component that renders a form also controls what happens inside its form based on what the user inputs, we call it a controlled component . As the user types, the new state is set with the values they input and the value they see inside the form only represents what is stored in the component\u2019s state. The code snippet below demonstrates a simple controlled component . Simple Controlled Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // this method is called when the form is submitted. Potentially an API request could go here using the data from this.state handleSubmit ( e ) { // always put this line in on submits, it prevents the page from reloading and wiping your state e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to empty quotes again this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes this.state.value to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } without comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NameForm extends React . Component { constructor ( props ) { super ( props ); // initialize the state with empty quotes '' this . state = { value : '' }; this . handleChange = this . handleChange . bind ( this ); this . handleSubmit = this . handleSubmit . bind ( this ); } // a method that, when called, changes the value of this.state.value handleChange ( e ) { this . setState ({ value : e . target . value }); } // this method is called when the form is submitted. Potentially an API request could go here using the data from this.state handleSubmit ( e ) { // always put this line in on submits, it prevents the page from reloading and wiping your state e . preventDefault (); alert ( 'A name was submitted: ' + this . state . value ); // after doing something with the data we reset the form value to empty quotes again this . setState ({ value : '' }) } render () { return ( < form onSubmit = { this . handleSubmit } > < label > Name : { /* the value of the input is tied to this.state.value so when a user types the handleChange method changes this.state.value to match*/ } < input type = \"text\" value = { this . state . value } onChange = { this . handleChange } /> < /label> < input type = \"submit\" value = \"Submit\" /> < /form> ); } In this way, we can control what data is sent off and when it is sent. Before moving on, make sure you read over all the examples laid out in the very clear React Form Docs . Pay special attention to the <select/> and Handling Multiple Inputs .","title":"Overview"},{"location":"module-1/formsInReact/#see-it-forms-in-react","text":"","title":"See It - Forms in React"},{"location":"module-1/formsInReact/#dry-methods-handle-submit","text":"","title":"DRY Methods + Handle Submit"},{"location":"module-1/formsInReact/#practice-it","text":"This CodePen is the same code snippet you saw on the previous page. It was created by Dan Abramov the creator of Redux, a technology you'll learn in a few short weeks! Forms in React CodePen","title":"Practice It"},{"location":"module-1/formsInReact/#instructions","text":"Open and fork the CodePen above Create 5 more text inputs: lastname , DOB , age, pho ne, and gender in this form. Use a <select> input for gender. Create keys in this.state to change the values based on what the user puts in. Console.log on submission. Now create an array in this.state that you can push into when the submit button is clicked. map over the array and display the users.","title":"Instructions"},{"location":"module-1/formsInReact/#filter-by-search-term","text":"","title":"Filter By Search Term"},{"location":"module-1/formsInReact/#know-your-docs","text":"React Docs - Forms React Docs - Handling Multiple Inputs","title":"Know Your Docs"},{"location":"module-1/hackathonOverview/","text":"Hackathon Overview 411-22-HackathonOverview from Zollege on Vimeo . Additional Resources YT, Ben Awad - How to Code a Form in React","title":"Hackathon Overview"},{"location":"module-1/hackathonOverview/#hackathon-overview","text":"411-22-HackathonOverview from Zollege on Vimeo .","title":"Hackathon Overview"},{"location":"module-1/hackathonOverview/#additional-resources","text":"YT, Ben Awad - How to Code a Form in React","title":"Additional Resources"},{"location":"module-1/introToReact/","text":"Intro to React as a Front-End Library Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw Recap At this point in your journey, you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses. Overview Let's start with what React is. It's a library, a codebase you can import & use. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead. Read It - What's React? React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G, and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say, it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends, and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want! How Does React Work? There are a couple of pieces we'll cover first then you can start putting it all together for yourself. Functional Components Functional Component are just that, components that can be called just like normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent Class-Based Components pt.1 Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool! BIG NOTES you MUST remember: Each component can & must only return ONE parent element. This means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class-based component. Know Your Docs NPM Docs - npx React Docs - Home Page","title":"Intro to React"},{"location":"module-1/introToReact/#intro-to-react-as-a-front-end-library","text":"Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw","title":"Intro to React as a Front-End Library"},{"location":"module-1/introToReact/#recap","text":"At this point in your journey, you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses.","title":"Recap"},{"location":"module-1/introToReact/#overview","text":"Let's start with what React is. It's a library, a codebase you can import & use. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead.","title":"Overview"},{"location":"module-1/introToReact/#read-it-whats-react","text":"React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G, and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say, it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends, and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want!","title":"Read It - What's React?"},{"location":"module-1/introToReact/#how-does-react-work","text":"There are a couple of pieces we'll cover first then you can start putting it all together for yourself.","title":"How Does React Work?"},{"location":"module-1/introToReact/#functional-components","text":"Functional Component are just that, components that can be called just like normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent","title":"Functional Components"},{"location":"module-1/introToReact/#class-based-components-pt1","text":"Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool!","title":"Class-Based Components pt.1"},{"location":"module-1/introToReact/#big-notes-you-must-remember","text":"Each component can & must only return ONE parent element. This means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class-based component.","title":"BIG NOTES you MUST remember:"},{"location":"module-1/introToReact/#know-your-docs","text":"NPM Docs - npx React Docs - Home Page","title":"Know Your Docs"},{"location":"module-1/introToStateAndProps/","text":"Intro to State and Props \u201cThe power of imagination makes us infinite.\u201d \u2014John Muir Recap Once you fall into React, you will fall in love with it. It's so simple and easy to use that you'll memorize all the life cycle methods and understand state and props and then you won't want to build with anything else. Today is going to be a whirlwind of facts and concepts. We're going to cover all the things that makeup React. It'll be tough at first because it's a lot! And it's new to you. But rest assured, you will get enough practice with it in the coming weeks that all of it will sink in and you'll be proud to put React on your resume! Overview Recall that React is a tool that helps us build composable websites and apps. This composable structure is the center-point to the whole mindset behind React. Each of the pieces on a website, the smaller components that make up the whole, are just that components . In 101 you were used to building the components of a web page with various HTML tags: <article></article> , <p></p> , etc. Each of these elements represented a small piece of the whole page. With React we build functions that return these same elements. We call these functions React Components . The reason we build them as functions is that we might need to use the same element for an unknown amount of times with different data inside of it. For example, on Facebook you have a page to view all of your friends. Each of your friends has different information but they are still displayed on the same element/piece/component with the same shape and styling. Furthermore, you may have 6000 friends and I may only have 500. Using functions, the React app build by Facebook will call the FriendComponent function 6000 times when you look at your friends and 500 times when I look at my friends. To make this work we need a way to pass unique data to each function call so that each function call will return the same HTML element but render the unique data we pass to it. This passing of data happens with something called props as in prop erties. You see, this props parameter will represent the properties of the element that is returned from the React Component (function) Props (How we pass data in React) Below you'll see a code snippet of a couple React components (again, which are simple JavaScript functions!). The only thing that makes them \"React\" functions is that they can be passed to the much larger React function that ingests them and turns them into HTML elements on a web page, known as React Elements . Just like functions, they can take arguments between their () . In fact, this is the only way we can pass props . To use the available props we must pass the props keyword into the () of the component. ChildComponent.js 1 2 3 4 5 6 7 const ChildComponent = ( props ) => { return ( < h1 > `A ${ props . propOne } tastes like ${ props . propTwo } .` < /h1> ) } export default ChildComponent In the above example, you see the props keyword passed into the function as an argument right? Now, where does the data associated with that props keyword come from? Look what's going on here: ParentComponent.js 1 2 3 4 5 6 7 8 class ParentComponent extends Component { constructor () { super (); render () { < ChildComponent propOne = { \"I'm a \" } propTwo = { \"Cutie Pie :)\" } /> } } In the code snippet above you see that our first ChildComponent is called inside our ParentComponent . Notice the JSX syntax: When we call a component in React with JSX it looks a lot like HTML syntax? In the line where we call the ChildComponent we see there are two props given: propOne and propTwo . They look a lot like attributes of an HTML tag, no? This is how we pass props down to other components. We can give them any attribute name we want. That same functionality could have been written: <ChildComponent poop={\"I'm a \"} unicorn={\"Cutie Pie :)\"}/> ; but instead we choose useful attribute/property names. Let's see it with state now. In the code snippet below we see the ParentComponent now has a state object, a simple JavaScript object with key and value pairs. Then we see the ChildComponent is called and passed props that reference keys of the state object. In this way, we can pass local state to another piece/component of our application!! ParentComponent with state + ChildComponent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class ParentComponent extends Component { constructor () { super (); this . state = { pieceOne : 'fig newton' , pieceTwo : 'garbage' , pieceThree : 3500 }; render () { return ( < ChildComponent propOne = { this . state . pieceOne } propTwo = { this . state . pieceTwo } /> ) } } const ChildComponent = ( props ) => { return ( < h1 > `A ${ this . props . propOne } tastes like ${ this . props . propTwo } .` < /h1> ) } If we want our parent component to pass down a piece of its state to a child component we give the child component attributes like propTwo then point it at the value we want: propTwo={this.state.pieceTwo} . After that, we use the props keyword in the child component, and presto! You have a component using props !! If we rendered ChildComponent it would say: \"A fig newton tastes like garbage.\" Under-the-hood, the props object would look like this: 1 2 3 4 props = { pieceOne : 'fig newton' , pieceTwo : 'garbage' } If you wanted to console.log() the value of the pieceOne key you would: console.log(props.pieceOne) . 1 2 3 4 5 6 7 8 const ChildComponent = ( props ) => { console . log ( props . pieceOne ) return ( < h1 > `A ${ this . props . propOne } tastes like ${ this . props . propTwo } .` < /h1> ) } Hopefully, that makes sense. If not, make sure you walk through it again so you can follow along with how the props are passed to components, then take a look at the following video and maybe that'll get you going in the right direction to build your own mental model of how data is passed from a parent component to any of its child components See & Practice What Are Props Follow the video below through to the challenge so you can: Visualize why props are needed in React. How they are used in the context of basic JavaScript's arguments & parameters. How to write the syntax of a new prop. And how to use props. How to Pass Props Follow along with the video below so you too can: Create a new functional component. Import and export the component. Pass props to the new component. Squash a bug while exporting. And render your to-do list with the new component. Passing Methods as Props (How to Remove your ToDos) Following the \"Three Jobs of a Developer\", this video shows you how to: Build a method to handle the deletion or manipulation and moving of data when we want to remove a to-do item. Pass a method as a prop to be used when the human-user clicks a button they can see . Finally, remove the item from where it is stored in state and rendered back to the user. NOTE: \"Three Jobs of a Developer\": Store data, Move & Manipulate data, Show data to a human-user. Destructuring Props This video shows you how to D.R.Y. your code up by destructuring your props. Additional Resources YT, Academind - React Basics #6: Passing Data w/Props Know Your Docs React Docs - Props","title":"State & Props Intro"},{"location":"module-1/introToStateAndProps/#intro-to-state-and-props","text":"\u201cThe power of imagination makes us infinite.\u201d \u2014John Muir","title":"Intro to State and Props"},{"location":"module-1/introToStateAndProps/#recap","text":"Once you fall into React, you will fall in love with it. It's so simple and easy to use that you'll memorize all the life cycle methods and understand state and props and then you won't want to build with anything else. Today is going to be a whirlwind of facts and concepts. We're going to cover all the things that makeup React. It'll be tough at first because it's a lot! And it's new to you. But rest assured, you will get enough practice with it in the coming weeks that all of it will sink in and you'll be proud to put React on your resume!","title":"Recap"},{"location":"module-1/introToStateAndProps/#overview","text":"Recall that React is a tool that helps us build composable websites and apps. This composable structure is the center-point to the whole mindset behind React. Each of the pieces on a website, the smaller components that make up the whole, are just that components . In 101 you were used to building the components of a web page with various HTML tags: <article></article> , <p></p> , etc. Each of these elements represented a small piece of the whole page. With React we build functions that return these same elements. We call these functions React Components . The reason we build them as functions is that we might need to use the same element for an unknown amount of times with different data inside of it. For example, on Facebook you have a page to view all of your friends. Each of your friends has different information but they are still displayed on the same element/piece/component with the same shape and styling. Furthermore, you may have 6000 friends and I may only have 500. Using functions, the React app build by Facebook will call the FriendComponent function 6000 times when you look at your friends and 500 times when I look at my friends. To make this work we need a way to pass unique data to each function call so that each function call will return the same HTML element but render the unique data we pass to it. This passing of data happens with something called props as in prop erties. You see, this props parameter will represent the properties of the element that is returned from the React Component (function)","title":"Overview"},{"location":"module-1/introToStateAndProps/#props-how-we-pass-data-in-react","text":"Below you'll see a code snippet of a couple React components (again, which are simple JavaScript functions!). The only thing that makes them \"React\" functions is that they can be passed to the much larger React function that ingests them and turns them into HTML elements on a web page, known as React Elements . Just like functions, they can take arguments between their () . In fact, this is the only way we can pass props . To use the available props we must pass the props keyword into the () of the component. ChildComponent.js 1 2 3 4 5 6 7 const ChildComponent = ( props ) => { return ( < h1 > `A ${ props . propOne } tastes like ${ props . propTwo } .` < /h1> ) } export default ChildComponent In the above example, you see the props keyword passed into the function as an argument right? Now, where does the data associated with that props keyword come from? Look what's going on here: ParentComponent.js 1 2 3 4 5 6 7 8 class ParentComponent extends Component { constructor () { super (); render () { < ChildComponent propOne = { \"I'm a \" } propTwo = { \"Cutie Pie :)\" } /> } } In the code snippet above you see that our first ChildComponent is called inside our ParentComponent . Notice the JSX syntax: When we call a component in React with JSX it looks a lot like HTML syntax? In the line where we call the ChildComponent we see there are two props given: propOne and propTwo . They look a lot like attributes of an HTML tag, no? This is how we pass props down to other components. We can give them any attribute name we want. That same functionality could have been written: <ChildComponent poop={\"I'm a \"} unicorn={\"Cutie Pie :)\"}/> ; but instead we choose useful attribute/property names. Let's see it with state now. In the code snippet below we see the ParentComponent now has a state object, a simple JavaScript object with key and value pairs. Then we see the ChildComponent is called and passed props that reference keys of the state object. In this way, we can pass local state to another piece/component of our application!! ParentComponent with state + ChildComponent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class ParentComponent extends Component { constructor () { super (); this . state = { pieceOne : 'fig newton' , pieceTwo : 'garbage' , pieceThree : 3500 }; render () { return ( < ChildComponent propOne = { this . state . pieceOne } propTwo = { this . state . pieceTwo } /> ) } } const ChildComponent = ( props ) => { return ( < h1 > `A ${ this . props . propOne } tastes like ${ this . props . propTwo } .` < /h1> ) } If we want our parent component to pass down a piece of its state to a child component we give the child component attributes like propTwo then point it at the value we want: propTwo={this.state.pieceTwo} . After that, we use the props keyword in the child component, and presto! You have a component using props !! If we rendered ChildComponent it would say: \"A fig newton tastes like garbage.\" Under-the-hood, the props object would look like this: 1 2 3 4 props = { pieceOne : 'fig newton' , pieceTwo : 'garbage' } If you wanted to console.log() the value of the pieceOne key you would: console.log(props.pieceOne) . 1 2 3 4 5 6 7 8 const ChildComponent = ( props ) => { console . log ( props . pieceOne ) return ( < h1 > `A ${ this . props . propOne } tastes like ${ this . props . propTwo } .` < /h1> ) } Hopefully, that makes sense. If not, make sure you walk through it again so you can follow along with how the props are passed to components, then take a look at the following video and maybe that'll get you going in the right direction to build your own mental model of how data is passed from a parent component to any of its child components","title":"Props (How we pass data in React)"},{"location":"module-1/introToStateAndProps/#see-practice","text":"","title":"See &amp; Practice"},{"location":"module-1/introToStateAndProps/#what-are-props","text":"Follow the video below through to the challenge so you can: Visualize why props are needed in React. How they are used in the context of basic JavaScript's arguments & parameters. How to write the syntax of a new prop. And how to use props.","title":"What Are Props"},{"location":"module-1/introToStateAndProps/#how-to-pass-props","text":"Follow along with the video below so you too can: Create a new functional component. Import and export the component. Pass props to the new component. Squash a bug while exporting. And render your to-do list with the new component.","title":"How to Pass Props"},{"location":"module-1/introToStateAndProps/#passing-methods-as-props-how-to-remove-your-todos","text":"Following the \"Three Jobs of a Developer\", this video shows you how to: Build a method to handle the deletion or manipulation and moving of data when we want to remove a to-do item. Pass a method as a prop to be used when the human-user clicks a button they can see . Finally, remove the item from where it is stored in state and rendered back to the user. NOTE: \"Three Jobs of a Developer\": Store data, Move & Manipulate data, Show data to a human-user.","title":"Passing Methods as Props (How to Remove your ToDos)"},{"location":"module-1/introToStateAndProps/#destructuring-props","text":"This video shows you how to D.R.Y. your code up by destructuring your props.","title":"Destructuring Props"},{"location":"module-1/introToStateAndProps/#additional-resources","text":"YT, Academind - React Basics #6: Passing Data w/Props","title":"Additional Resources"},{"location":"module-1/introToStateAndProps/#know-your-docs","text":"React Docs - Props","title":"Know Your Docs"},{"location":"module-1/reactDeveloperTools-pt1/","text":"React DevTools Overview As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on! Practice It Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools Additional Resources YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#react-devtools","text":"","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#overview","text":"As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on!","title":"Overview"},{"location":"module-1/reactDeveloperTools-pt1/#practice-it","text":"Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools","title":"Practice It"},{"location":"module-1/reactDeveloperTools-pt1/#additional-resources","text":"YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"Additional Resources"},{"location":"module-2/class-5/","text":"Class 5: Music App - Part 1 of 2 Once we believe in ourselves, we can risk curiosity, wonder, spontaneous delight, or any experience that reveals the human spirit.\u2003\u2014E. E. Cummings Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time create-react-app + repo + git init + add origin Begin building a Music Client for next Checkpoint Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins This week we will build our first application from scratch. It will be a music app with a few simple operations. During this process we will make use of state , props , lifecycle methods , forms and styling with Material UI to create a login screen and dashboard that interacts with user controls. You will have both class days this week to complete the project and upload your GitHub URL to the assignment submission. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the example images below. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Do your best and have fun! Example One Example Two Project Instructions Setup You should have Create React App installed. If you don't, please do that now by running the following command in your terminal/command prompt: npm i -g create-react-app . NOTE: No need to do this after Node 12, instead use npx (see below) We will be working from scratch so you will need to create your own GitHub repository for this project and call it JS411-my-music-app . Do that now. Project Work 1. Initializing Navigate to a directory of your choosing (wherever you want your project to be) and run the command npx create-react-app my-music-app . A new folder called my-music-app should have been created. Once your project( my-music-app ) is created (with npx create-react-app using your terminal) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY_URL> to connect your local application to your remote repository. Now run npm start to see the default create-react-app code running. Additionally, install Material UI in this folder: npm i @material-ui/core . 2. Login Screen Next, you will want to get rid of the default contents inside of App.js of create-react-app and replace them with the login screen. From the examples, the first thing you are probably noticing is the navigation bar. HINT: You can find the App Bar Component on the Material UI page. There are examples for integrating it. You will also want the Button and TextField components from Material UI. Search the site to find examples of those. If you want to add additional styling to these components, simply add the CSS to the App.css file for now. You can add a className on Material UI components just like you can with any other component. HINT: Add a property called loggedIn to your state that has a Boolean value. It should be set to false as the default. When you click the button to login, set that variable to true . You will probably want to do some conditional rendering here to show the login screen if the user is not logged in or show something else otherwise. As a refresher...conditional rendering with a ternary operator looks like this: a Ternary Example 1 2 3 4 5 render () { return this . state . loggedIn ? < Dashboard /> : ( // the code for your login screen ) } a Regular If/Else Example 1 2 3 4 5 6 7 8 9 render () { if ( this . state . loggedIn ) { return < Dashboard /> } else { return ( // the code for your login screen ) } } As a final note for the login session, you can make both the username and password fields required but don't worry about any other validation here. You can put whatever you want in those fields, click 'login' and it will work. We can learn more about true authentication in later weeks. 3. Components Folder Make a folder called components/ inside your src/ folder to hold any other components you wish to make in the future. You will need at least one more for the dashboard page. 4. Dashboard Component Make a component called Dashboard.js inside the components/ folder. You will want to create this component and then import it back into App.js to be conditionally rendered based on login like in the examples above. For now feel free to render something simple in this component like <p>testing</p> to see if it's working. HINT: If you noticed that you lost the nav bar when you navigated to this component then it makes sense because it was probably hardcoded in the App.js file. Find a way to break it out into its own component (maybe NavBar.js) and wrap App component with it so that it always shows up. Inside Dashboard.js you will want to create three cards; the Card component, as well as, its accompanying CardContent and CardActions can be found by looking in Material UI docs . HINT: You might choose to use flexbox (or grid ) to evenly space these three cards across the dashboard. 5. Card 1 - Online Mode This card will need access to the Switch Component . Think about setting a variable in state called online and having it be a Boolean value to represent the online status. When the switch is clicked, make sure the state gets updated: false to true . 6. Card 2 - Master Volume This card will need access to the Slider Component . Think about setting a variable in state called volume and having it be a number like 20 . When the slider is changed, update the state with the correct volume. HINT: Set your volume on a scale of 0 to 100 with steps of 10 at a time. 7. Card 3 - Sound Quality This card will need access to the Select Component . Think about setting a variable in state called \"quality\" and having it be a number of 1, 2 or 3, representing \"Low\", \"Normal\" or \"High\" quality. When the select box is changed make sure the state gets updated. 8. System Notifications Create a state variable in the Dashboard component called notifications and make it an empty array. When any other piece of state changes ( online , volume , quality ) update the notifications array with the corresponding messages. Here are the rules to follow: If the online status is \"false\" add the message Your application is offline. You won't be able to share or stream music to other devices. If the volume exceeds 80, add the message Listening to music at a high volume could cause long-term hearing loss. If the sound quality is changed to low, add the message Music quality is degraded. Increase quality if your connection allows it. HINT: Consider using the componentDidUpdate lifecycle method so that you know whenever the component state has changed. You can access the previous state with the prevState variable. More information on this: React componentDidUpdate() . Make sure to map through these notifications and display them underneath a \"System Notifications\" heading. Remember: you also have next class to work on this. Start reading the next pre-homework to understand more about lifecycle methods. Exit Recap, Attendance, and Reminders, 5 mins Create Music App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 5 Music App 1/2"},{"location":"module-2/class-5/#class-5-music-app-part-1-of-2","text":"Once we believe in ourselves, we can risk curiosity, wonder, spontaneous delight, or any experience that reveals the human spirit.\u2003\u2014E. E. Cummings","title":"Class 5: Music App - Part 1 of 2"},{"location":"module-2/class-5/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time create-react-app + repo + git init + add origin Begin building a Music Client for next Checkpoint Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-5/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-5/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-5/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-5/#creation-time-60-90-mins","text":"This week we will build our first application from scratch. It will be a music app with a few simple operations. During this process we will make use of state , props , lifecycle methods , forms and styling with Material UI to create a login screen and dashboard that interacts with user controls. You will have both class days this week to complete the project and upload your GitHub URL to the assignment submission. Keep in mind that with this project, the goal is to use our existing knowledge of React to build something that looks very similar to the example images below. Unlike some homework assignments where the exact steps are laid out, this project is intentionally vague in some places. It's to get you to learn how to look up things and implement the right resources. That being said, hints will be given in various sections. Do your best and have fun! Example One Example Two","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-5/#project-instructions","text":"","title":"Project Instructions"},{"location":"module-2/class-5/#setup","text":"You should have Create React App installed. If you don't, please do that now by running the following command in your terminal/command prompt: npm i -g create-react-app . NOTE: No need to do this after Node 12, instead use npx (see below) We will be working from scratch so you will need to create your own GitHub repository for this project and call it JS411-my-music-app . Do that now.","title":"Setup"},{"location":"module-2/class-5/#project-work","text":"","title":"Project Work"},{"location":"module-2/class-5/#1-initializing","text":"Navigate to a directory of your choosing (wherever you want your project to be) and run the command npx create-react-app my-music-app . A new folder called my-music-app should have been created. Once your project( my-music-app ) is created (with npx create-react-app using your terminal) you can navigate to that directory and run the commands git init and git remote add origin <YOUR_GIT_REPOSITORY_URL> to connect your local application to your remote repository. Now run npm start to see the default create-react-app code running. Additionally, install Material UI in this folder: npm i @material-ui/core .","title":"1. Initializing"},{"location":"module-2/class-5/#2-login-screen","text":"Next, you will want to get rid of the default contents inside of App.js of create-react-app and replace them with the login screen. From the examples, the first thing you are probably noticing is the navigation bar. HINT: You can find the App Bar Component on the Material UI page. There are examples for integrating it. You will also want the Button and TextField components from Material UI. Search the site to find examples of those. If you want to add additional styling to these components, simply add the CSS to the App.css file for now. You can add a className on Material UI components just like you can with any other component. HINT: Add a property called loggedIn to your state that has a Boolean value. It should be set to false as the default. When you click the button to login, set that variable to true . You will probably want to do some conditional rendering here to show the login screen if the user is not logged in or show something else otherwise. As a refresher...conditional rendering with a ternary operator looks like this: a Ternary Example 1 2 3 4 5 render () { return this . state . loggedIn ? < Dashboard /> : ( // the code for your login screen ) } a Regular If/Else Example 1 2 3 4 5 6 7 8 9 render () { if ( this . state . loggedIn ) { return < Dashboard /> } else { return ( // the code for your login screen ) } } As a final note for the login session, you can make both the username and password fields required but don't worry about any other validation here. You can put whatever you want in those fields, click 'login' and it will work. We can learn more about true authentication in later weeks.","title":"2. Login Screen"},{"location":"module-2/class-5/#3-components-folder","text":"Make a folder called components/ inside your src/ folder to hold any other components you wish to make in the future. You will need at least one more for the dashboard page.","title":"3. Components Folder"},{"location":"module-2/class-5/#4-dashboard-component","text":"Make a component called Dashboard.js inside the components/ folder. You will want to create this component and then import it back into App.js to be conditionally rendered based on login like in the examples above. For now feel free to render something simple in this component like <p>testing</p> to see if it's working. HINT: If you noticed that you lost the nav bar when you navigated to this component then it makes sense because it was probably hardcoded in the App.js file. Find a way to break it out into its own component (maybe NavBar.js) and wrap App component with it so that it always shows up. Inside Dashboard.js you will want to create three cards; the Card component, as well as, its accompanying CardContent and CardActions can be found by looking in Material UI docs . HINT: You might choose to use flexbox (or grid ) to evenly space these three cards across the dashboard.","title":"4. Dashboard Component"},{"location":"module-2/class-5/#5-card-1-online-mode","text":"This card will need access to the Switch Component . Think about setting a variable in state called online and having it be a Boolean value to represent the online status. When the switch is clicked, make sure the state gets updated: false to true .","title":"5. Card 1 - Online Mode"},{"location":"module-2/class-5/#6-card-2-master-volume","text":"This card will need access to the Slider Component . Think about setting a variable in state called volume and having it be a number like 20 . When the slider is changed, update the state with the correct volume. HINT: Set your volume on a scale of 0 to 100 with steps of 10 at a time.","title":"6. Card 2 - Master Volume"},{"location":"module-2/class-5/#7-card-3-sound-quality","text":"This card will need access to the Select Component . Think about setting a variable in state called \"quality\" and having it be a number of 1, 2 or 3, representing \"Low\", \"Normal\" or \"High\" quality. When the select box is changed make sure the state gets updated.","title":"7. Card 3 - Sound Quality"},{"location":"module-2/class-5/#8-system-notifications","text":"Create a state variable in the Dashboard component called notifications and make it an empty array. When any other piece of state changes ( online , volume , quality ) update the notifications array with the corresponding messages. Here are the rules to follow: If the online status is \"false\" add the message Your application is offline. You won't be able to share or stream music to other devices. If the volume exceeds 80, add the message Listening to music at a high volume could cause long-term hearing loss. If the sound quality is changed to low, add the message Music quality is degraded. Increase quality if your connection allows it. HINT: Consider using the componentDidUpdate lifecycle method so that you know whenever the component state has changed. You can access the previous state with the prevState variable. More information on this: React componentDidUpdate() . Make sure to map through these notifications and display them underneath a \"System Notifications\" heading. Remember: you also have next class to work on this. Start reading the next pre-homework to understand more about lifecycle methods.","title":"8. System Notifications"},{"location":"module-2/class-5/#exit-recap-attendance-and-reminders-5-mins","text":"Create Music App Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-6/","text":"Class 6: Music App - Part 2 of 2 I dwell in possibility.\u2003\u2014Emily Dickinson Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Continue Music App from last class Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Continue working on the Music App from last class. If you finish this exercise early, help a friend! One of the best ways to learn is to teach. You will need to have this assignment submitted by this weekend. Refer to the Music App examples and instructions provided last class. \\ Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 6 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 5"},{"location":"module-2/class-6/#class-6-music-app-part-2-of-2","text":"I dwell in possibility.\u2003\u2014Emily Dickinson","title":"Class 6: Music App - Part 2 of 2"},{"location":"module-2/class-6/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Programming in a group Using React LifeCycle Methods Using styled components with Material UI Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Continue Music App from last class Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-6/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-6/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-6/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-6/#creation-time-60-90-mins","text":"Continue working on the Music App from last class. If you finish this exercise early, help a friend! One of the best ways to learn is to teach. You will need to have this assignment submitted by this weekend. Refer to the Music App examples and instructions provided last class. \\","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-6/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-6/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 6 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-7/","text":"Class 7: Fake Car Dashboard If you are working on something that you really care about, you don\u2019t have to be pushed. The vision pulls you.\u2003\u2014Steve Jobs Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: client-side routing of a web app with React Router the NPM package React-Router with its dependencies and structure Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Get specs laid out Fork & Clone 411_wk4_day1_react_router repository Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we learned last night about React Router. Below are some screenshots of a simple website for cars. We will finish this website by: adding routing with React Router, building a component for the cars detail page, and finally routing to the new component. Take a look at the images below and notice the URLs in them. Apparently our web designers want these specific URLs for these components. FakeCars Image One FakeCars Image Two FakeCars Image Three Project Instructions Fork and clone the following 411_wk4_day1_react_router repository . Follow the directions in the readme to complete the project and upload the link to your GitHub repository to Zollege. The project directions are also summed up below: Two components have already been created for you, Home & About . Look for the Router.js file under the src/ folder. This file is basically empty besides a couple imports. You need to create a functional component called in this file. It will return a Switch component that wraps two Route s. The routes should look like the following: \"/\" -> Home \"/about\" -> About Now we are going to take this Router and import it into App.js . Place it right underneath the Navigation component. You will need to import BrowserRouter from \"react-router-dom\" and use it to wrap both the Navigation and the Router components. If you were successful you should see a homepage with a lot of different car details on it. You should also be able to add /about to the end of the url to see the about page. Typing this path in the browser will soon get tiring so let's add them to the Navigation component as <Link> s. There are two commented areas for you to add Links. Create one Link to the Home page and one to the About page. If you forget how to do that, reference the documentation here or look back at your pre-class lessons. Next we want to fill out the Car component in src/Car.js but first we will need to be able to see it and Link to it. Inside of Router.js import the Car component and create a route for it. The path should be able to accept an id for the specific car as well. For example: /car/:id . NOTE: We didn't quite cover this last night but when you write cars/:id the router is looking for a specific number that corresponds with an item in the database, i.e. /cars/6850 Once that is complete, go to the Home component and look for the comment regarding the \"a tag\". Change that to a Link component and have the to property be: /car/${car.id} . You can leave the text, \"See More Details\" the same. Notice how you are routed to the Car component when you click on the Link . Try clicking on different cars. Do you notice that the id is different each time? Now that we can navigate to the Car component we want to fill out this page so that it looks nice and provides details about the specific car we passed in. To get the specific car, we need to access the id property from the path. We can do that by accessing it from props with: props.match.params.id . Note that if you would have called the parameter, id , something different in the router, say \"carId\" , then that would change how we access it here as well ( params.carId ). Before the return statement, create a variable called id and assign it the result from props . Now that we have the specific id, we need to find the car in the list that matches that id. You should know how to find items in an array by now so go ahead and find the specific car. Hint: the cars are in the \"cars\" variable at the top of the file. Create the Car component so that it looks like the last image above. To do that, import the material-ui components as specified at the top of the file. You will use the material-ui documentation to figure out how to style this page. Follow-up Video: YT, Ben Awad - React Router v4 Tutorial Push Yourself Further Follow along with this tutorial from Auth0. Keep in mind that they do things a little differently but it's good to know different ways to write routers. Exit Recap, Attendance, and Reminders, 5 mins Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 7"},{"location":"module-2/class-7/#class-7-fake-car-dashboard","text":"If you are working on something that you really care about, you don\u2019t have to be pushed. The vision pulls you.\u2003\u2014Steve Jobs","title":"Class 7: Fake Car Dashboard"},{"location":"module-2/class-7/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: client-side routing of a web app with React Router the NPM package React-Router with its dependencies and structure Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Get specs laid out Fork & Clone 411_wk4_day1_react_router repository Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-7/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-7/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-7/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-7/#creation-time-60-90-mins","text":"Today we are going to practice what we learned last night about React Router. Below are some screenshots of a simple website for cars. We will finish this website by: adding routing with React Router, building a component for the cars detail page, and finally routing to the new component. Take a look at the images below and notice the URLs in them. Apparently our web designers want these specific URLs for these components. FakeCars Image One FakeCars Image Two FakeCars Image Three","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-7/#project-instructions","text":"Fork and clone the following 411_wk4_day1_react_router repository . Follow the directions in the readme to complete the project and upload the link to your GitHub repository to Zollege. The project directions are also summed up below: Two components have already been created for you, Home & About . Look for the Router.js file under the src/ folder. This file is basically empty besides a couple imports. You need to create a functional component called in this file. It will return a Switch component that wraps two Route s. The routes should look like the following: \"/\" -> Home \"/about\" -> About Now we are going to take this Router and import it into App.js . Place it right underneath the Navigation component. You will need to import BrowserRouter from \"react-router-dom\" and use it to wrap both the Navigation and the Router components. If you were successful you should see a homepage with a lot of different car details on it. You should also be able to add /about to the end of the url to see the about page. Typing this path in the browser will soon get tiring so let's add them to the Navigation component as <Link> s. There are two commented areas for you to add Links. Create one Link to the Home page and one to the About page. If you forget how to do that, reference the documentation here or look back at your pre-class lessons. Next we want to fill out the Car component in src/Car.js but first we will need to be able to see it and Link to it. Inside of Router.js import the Car component and create a route for it. The path should be able to accept an id for the specific car as well. For example: /car/:id . NOTE: We didn't quite cover this last night but when you write cars/:id the router is looking for a specific number that corresponds with an item in the database, i.e. /cars/6850 Once that is complete, go to the Home component and look for the comment regarding the \"a tag\". Change that to a Link component and have the to property be: /car/${car.id} . You can leave the text, \"See More Details\" the same. Notice how you are routed to the Car component when you click on the Link . Try clicking on different cars. Do you notice that the id is different each time? Now that we can navigate to the Car component we want to fill out this page so that it looks nice and provides details about the specific car we passed in. To get the specific car, we need to access the id property from the path. We can do that by accessing it from props with: props.match.params.id . Note that if you would have called the parameter, id , something different in the router, say \"carId\" , then that would change how we access it here as well ( params.carId ). Before the return statement, create a variable called id and assign it the result from props . Now that we have the specific id, we need to find the car in the list that matches that id. You should know how to find items in an array by now so go ahead and find the specific car. Hint: the cars are in the \"cars\" variable at the top of the file. Create the Car component so that it looks like the last image above. To do that, import the material-ui components as specified at the top of the file. You will use the material-ui documentation to figure out how to style this page. Follow-up Video: YT, Ben Awad - React Router v4 Tutorial","title":"Project Instructions"},{"location":"module-2/class-7/#push-yourself-further","text":"Follow along with this tutorial from Auth0. Keep in mind that they do things a little differently but it's good to know different ways to write routers.","title":"Push Yourself Further"},{"location":"module-2/class-7/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-8/","text":"Class 8: Protected Routes It is always the simple that produces the marvelous.\u2003\u2014Amelia Barr Greet, Outline, and Objectify OBJECTIVE: Today the student will learn and practice to understand: Using Boolean logic to allow a user access to specific components Setting cookies in the user's browser Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the 411_wk4_day2_protected_routes repo Follow the instructions in the README to complete then turn in. Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to practice what we learned about Protected Routes. We will create a login page, set cookies, and build protected routes to provide a more reliable login experience for the users of the cars application we worked on before. Fork and clone the following repository: 411_wk4_day2_protected_routes . Follow the directions in the README.md to complete the project. git status , add , commit , push to your forked repo. Turn in the link of your forked repo. The project directions are also summed up below: We are adding a login page to the FakeCars.com application. Once complete, you will be able to log in to the app and you will remain logged in on page refresh until the cookie expires at one minute's time. You should see a login page when the app first starts. Go ahead and log in. Notice that it takes you to the home page. Now, click the \"logout\" button. You should have been logged out and taken back to the \"/login\" route. But are we ever logged in or out? Click on the \"Home\" and \"About\" links on the navigation bar. It looks like we can still access everything. In the Router.js file we can see a list of all our routes and paths. Write a ProtectedRoute function under the appropriate comment. Write a checkAuth function under the appropriate comment. Use the cookie module to parse the browser cookies and check the isLogged cookie. If it has a value, return true , otherwise return false . Replace all uses of the Route component (inside of Switch) with ProtectedRoute EXCEPT for the \"/login\" route. We always want to be able to access that so leave it alone. Upon making the change to ProtectedRoute you should notice that you can no longer access any of the links in the navigation bar. They send you back to the login page because there is no cookie available. Let's make sure we set one when we log in. Go to the Login component (under src/Login.js ) and look at the login function. There is a comment to add the cookie. Set the cookie equal to the following value: loggedIn=true;max-age=60*1000 . Notice you can now log in and access the pages appropriately. We've set an expiration time of one minute on the cookie so go do something else for a minute and then come back to this site. Refresh the page. Were you directed back to the login page? Follow-up Video: YT, FreeCodeCamp.org - cookies vs sessionStorage Push Yourself Further Read this insanely cool article on how one developer at Netlify used cookies to solve an on-boarding problem. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create FakeCar-Login Assignment Create Class 8 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 8 Login"},{"location":"module-2/class-8/#class-8-protected-routes","text":"It is always the simple that produces the marvelous.\u2003\u2014Amelia Barr","title":"Class 8: Protected Routes"},{"location":"module-2/class-8/#greet-outline-and-objectify","text":"OBJECTIVE: Today the student will learn and practice to understand: Using Boolean logic to allow a user access to specific components Setting cookies in the user's browser Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the 411_wk4_day2_protected_routes repo Follow the instructions in the README to complete then turn in. Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-8/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-2/class-8/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-8/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-8/#creation-time-60-90-mins","text":"Today we are going to practice what we learned about Protected Routes. We will create a login page, set cookies, and build protected routes to provide a more reliable login experience for the users of the cars application we worked on before. Fork and clone the following repository: 411_wk4_day2_protected_routes . Follow the directions in the README.md to complete the project. git status , add , commit , push to your forked repo. Turn in the link of your forked repo. The project directions are also summed up below: We are adding a login page to the FakeCars.com application. Once complete, you will be able to log in to the app and you will remain logged in on page refresh until the cookie expires at one minute's time. You should see a login page when the app first starts. Go ahead and log in. Notice that it takes you to the home page. Now, click the \"logout\" button. You should have been logged out and taken back to the \"/login\" route. But are we ever logged in or out? Click on the \"Home\" and \"About\" links on the navigation bar. It looks like we can still access everything. In the Router.js file we can see a list of all our routes and paths. Write a ProtectedRoute function under the appropriate comment. Write a checkAuth function under the appropriate comment. Use the cookie module to parse the browser cookies and check the isLogged cookie. If it has a value, return true , otherwise return false . Replace all uses of the Route component (inside of Switch) with ProtectedRoute EXCEPT for the \"/login\" route. We always want to be able to access that so leave it alone. Upon making the change to ProtectedRoute you should notice that you can no longer access any of the links in the navigation bar. They send you back to the login page because there is no cookie available. Let's make sure we set one when we log in. Go to the Login component (under src/Login.js ) and look at the login function. There is a comment to add the cookie. Set the cookie equal to the following value: loggedIn=true;max-age=60*1000 . Notice you can now log in and access the pages appropriately. We've set an expiration time of one minute on the cookie so go do something else for a minute and then come back to this site. Refresh the page. Were you directed back to the login page? Follow-up Video: YT, FreeCodeCamp.org - cookies vs sessionStorage","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-8/#push-yourself-further","text":"Read this insanely cool article on how one developer at Netlify used cookies to solve an on-boarding problem.","title":"Push Yourself Further"},{"location":"module-2/class-8/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-8/#exit-recap-attendance-and-reminders-5-mins","text":"Create FakeCar-Login Assignment Create Class 8 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/componentLifeCycle/","text":"Component Lifecycle Let us make our future now, and let us make our dreams tomorrow\u2019s reality.\u2003\u2014Malala Yousafzai We've done a lot in the past two weeks getting up to speed with React but there are some deeper level concepts we need to cover and firmly grasp. Today we will take a deeper dive into React's Class-Based Component Lifecycle and the methods involved, but before we do let's look at this JSX syntax a little more closely. Overview The Component Lifecycle is a set of steps that every class-based component goes through from when the component is referenced/invoked and mounted in the DOM to when it is closed out and removed from the DOM, birth to death. This Lifecycle can be divided into 4 phases: Mounting , Updating , Unmounting , & Error . Inside of each of these phases are individual methods(properties with functions as their definition/value). These methods are appropriately classified as lifecycle methods because they get called throughout each phase and each has a purpose... we will get into soon. Why? The purpose of these lifecycle methods is to capture or encapsulate the manipulation, moving, and rendering of data inside of each component, just like JSX provides easier syntax for doing this. Having the ability to pinpoint certain points of execution during a component's \"life\" gives us greater flexibility, programming customization, and testing opportunities. For example, we may want to load some data into our component before we render it onto the screen. It just so happens that there is a lifecycle method called componentDidMount that fires after the initial render method. This is a great place to make a call for that data. And yes, render() is a lifecycle method too. If your data hasn't come back from the API yet you might offer the user a spinning wheel or cute animation through the use of conditional rendering in your render statement so when your data does come in, you can call render again. These methods become more and more useful as you grow into your new trade and become more proficient. For now, let's cover the most commonly used methods and how to mentally model what they are and how to use them. Read It - Class-Based Component Lifecycle We've talked briefly about what the component lifecycle is and why it's useful so let's get a little more into the details of the operation. I'd like to start with how these lifecycle methods are accessed. From the past couple classes, you've likely become familiar with seeing a component written like this: Two ways to extend Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React from 'react' class MyComponent extends React . Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } // Or... import React , { Component } from 'react' class MyComponent extends Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } The above two examples are the exact same in terms of functionality. The only difference is that we imported Component separately in the second example. Let's talk about that a little. The reason we have access to any of these methods (for example: render ) is because of the \"Component\" keyword on line 1 and/or 3 of the two examples above. When we create our component with class MyComponent ... and use extends Component , which we've imported from React , we are saying (in code) that we want our class to have all the capabilities of a React class component (a class that is built into the React node module). The method render actually lives on that Component and the only reason we get to use it is that we \"extended\" from Component with a class of our own. Fortunately for us, Component has a few other useful methods to use the same way: The componentDidMount Method This method, when used in your component, fires when the component is inserted into the DOM tree. This happens after the initial \"render\" method and can be useful for fetching data or updating state based on some conditions. The componentDidMount method (and other lifecycle methods) are usually placed above the render method. Here's an example: Example of componentDidMount 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { componentDidMount () { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { this . setState ({ data : examples }) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { this . state . data } < /p> < /div> ) } } The render Method This may seem redundant but the render method is important to understand since it is the only required method when using a class component. The render method typically returns JSX but it can also return other things, namely: Arrays Strings/Numbers Booleans Null The above options aren't typical so we will focus on JSX. It's also important to note that the render method should be a \"pure function\" which means it doesn't update state . The second rule to render is that it must return something ...JSX, null , an array, whatever. It must return something. Speaking of state, we need to remember that this render method will be invoked each time the state changes. Calling this.setState() anywhere in your component will cause this function to fire again and update the parts of the DOM that may have changed. In the following code, how many times will the render method be called on initiation? Simple Class Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [] } } componentDidMount () { const arr = this . props . users . filter ( u => u . username . length > 5 ) this . setState ({ users : arr }) } handleClick = () => { this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } The key is in the word \"initially\" . Hopefully you guessed 2 times. The render will be invoked a third time when the button is clicked. The answer is two because this.setState is asynchronous and the initial render will attempt before the componentDidMount function is complete. However, componentDidMount will quickly update the state and re-render the component without the user noticing anything. You can read more about that process in the React Docs . Before we move to another lifecycle method let's remember that everything is an object including this React component we're extending. What this means is that it too has properties, or methods(because their values are functions). Just like all of the methods on the DOM or any HTML element you've worked with like onclick, hover, blur...etc, this React Component has method that are firing blanks throughout the cycles of its life until YOU, the developer, give them instructions. Here's invalid code but a good visual example of what the Component you're extending looks like under-the-hood. Under-the-hood look at the lifecycle methods - Invalid Code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // * React Class Component /Object-Thing/ myComponent = { constructor : () => { /* create state here */ }, componentDidMount : () => { /* fetch data here */ }, componentDidUpdate : () => {}, componentWillUnmount : () => { /* delete cookies, unsubscribe from current connections, sign out here */ }, render : () => { /* return the visual for the DOM in JSX here */ }, componentDidCatch : () => { /* process error handling here */ }, getDerivedStateFromError : () => {}, shouldComponentUpdate : () => {}, getSnapshotBeforeUpdate : () => {}, getDerivedStateFromProps : () => {}, } Now that you see each property is already declared on the class, you can now go and define them with whatever your application's needs are! If you don't need them, don't worry about them they'll just fire blanks with no side-effects! The componentDidUpdate Method This method is called when the component is updated. What does \"updated\" mean? It means when this.setState is called somewhere in the tree that affects the current component. This lifecycle method is not called on the initial load of the component. When it is called it automatically gives us a variable called prevProps that we can use to see if any of the props changed. You can call this.setState in this function but you want to be careful to do it based on some condition. If you don't, you'll cause an infinite loop because setState will cause the component to \"update\" which will then call setState which will cause it to update again, etc, etc, etc. For this reason, this is Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 componentDidUpdate ( prevProps , prevState , snapshot ) { // will not be invoked if shouldComponentUpdate() returns false. // Use to do side effects if the state or props change and those create a need for a side-effect like a data fetch/network request or visuals // fired every time render is called after the initial render call // If we have a snapshot value, we've just added new items. // Adjust scroll so these new items don't push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if ( snapshot !== null ) { const list = this . listRef . current ; list . scrollTop = list . scrollHeight - snapshot ; } } Usage example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // this.setState({}) -> // componentDidUpdate() -> // this.setState({})-> // componentDidUpdate() -> // this.setState({})-> // etc. // This lifecycle method can be used like this: import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [], errText : \"\" } } componentDidUpdate () { if ( this . state . users . length === 0 ) { this . setState ({ errText : 'There are no users to show' }) } } handleClick = () => { // This line is a shorthand to set the state to equal what the list of users was plus the new user that was added. this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /h1> { this . state . errText && < p > { this . state . errText } < /p>} < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } The constructor Method The constructor is the first thing that happens when you load up a component. In fact, it's the first thing that happens anytime you use a class in JavaScript for any purpose (not just React). Inside the constructor is where you initialize variables that your class, or component, will use. For example, this is where you typically set your initial state. You also call the super() function inside of the constructor. This function calls the parent constructor with the data you've passed in, but we don't need to know about the details of that here so let's take a look at how we use the constructor: Example Usage of constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import React , { Component } from 'react' class MyComponent extends Component { constructor () { super () // calls the functionality of the grandparent class(the class parent of the Component class) this . state = { count : 0 } } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } It's important to note that many people have stopped using the constructor in such verbose terms since React released shortcuts for writing this. Essentially, it does the same thing behind the scenes but the above can now also be written as: State without calling constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { state = { count : 0 } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } Order of Operations The lifecycle methods we just covered were not in any specific order so below we'll order them by the way they fire when the component is mounted , rendered , updated , unmounted , and if an error occurs. These phases are the phases of the components cycle of life, a.k.a the order in which the methods are fired as the component comes into the DOM(mounts) and eventually leaves the DOM (unmounts). Mounting Phase constructor() render() Updating Phase shouldComponentUpdate(nextProps, nextState) render() componentDidUpdate(prevProps, prevState, snapshot) getSnapshotBeforeUpdate(prevProps, prevState) static getDerivedStateFromProps(props, state) Unmounting Phase componentWillUnmount() - used to fire before the render method but it is now considered legacy and unsafe to use. Error Phase - Not used to handle exceptions! componentDidCatch() getDerivedStateFromError() A full, comprehensive breakdown of all lifecycle methods can be found in here . We encourage you to look at this page often as well as use this lifecycle cheatsheet as you develop. Other component lifecycle methods and properties you should become familiar with are: setState() forceUpdate() defaultProps displayName Summary Practice It Work through the React Docs Tutorial to build a timer app that utilizes the lifecycle methods. Additional Resources Blog, CodeBurst - How to Use the Lifecycle Methods Blog, Blog - React Component Lifecycle Reference, Wojtekma - Lifecycle Methods Diagram Reference, LogRocket - The New React Lifecycle Methods Know Your Docs React Docs - componentDidMount React Docs - React Component","title":"Class Component Lifecycle"},{"location":"module-2/componentLifeCycle/#component-lifecycle","text":"Let us make our future now, and let us make our dreams tomorrow\u2019s reality.\u2003\u2014Malala Yousafzai We've done a lot in the past two weeks getting up to speed with React but there are some deeper level concepts we need to cover and firmly grasp. Today we will take a deeper dive into React's Class-Based Component Lifecycle and the methods involved, but before we do let's look at this JSX syntax a little more closely.","title":"Component Lifecycle"},{"location":"module-2/componentLifeCycle/#overview","text":"The Component Lifecycle is a set of steps that every class-based component goes through from when the component is referenced/invoked and mounted in the DOM to when it is closed out and removed from the DOM, birth to death. This Lifecycle can be divided into 4 phases: Mounting , Updating , Unmounting , & Error . Inside of each of these phases are individual methods(properties with functions as their definition/value). These methods are appropriately classified as lifecycle methods because they get called throughout each phase and each has a purpose... we will get into soon.","title":"Overview"},{"location":"module-2/componentLifeCycle/#why","text":"The purpose of these lifecycle methods is to capture or encapsulate the manipulation, moving, and rendering of data inside of each component, just like JSX provides easier syntax for doing this. Having the ability to pinpoint certain points of execution during a component's \"life\" gives us greater flexibility, programming customization, and testing opportunities. For example, we may want to load some data into our component before we render it onto the screen. It just so happens that there is a lifecycle method called componentDidMount that fires after the initial render method. This is a great place to make a call for that data. And yes, render() is a lifecycle method too. If your data hasn't come back from the API yet you might offer the user a spinning wheel or cute animation through the use of conditional rendering in your render statement so when your data does come in, you can call render again. These methods become more and more useful as you grow into your new trade and become more proficient. For now, let's cover the most commonly used methods and how to mentally model what they are and how to use them.","title":"Why?"},{"location":"module-2/componentLifeCycle/#read-it-class-based-component-lifecycle","text":"We've talked briefly about what the component lifecycle is and why it's useful so let's get a little more into the details of the operation. I'd like to start with how these lifecycle methods are accessed. From the past couple classes, you've likely become familiar with seeing a component written like this: Two ways to extend Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React from 'react' class MyComponent extends React . Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } // Or... import React , { Component } from 'react' class MyComponent extends Component { render () { return ( < div > < h1 > Welcome to our component < /p> < /div> ) } } The above two examples are the exact same in terms of functionality. The only difference is that we imported Component separately in the second example. Let's talk about that a little. The reason we have access to any of these methods (for example: render ) is because of the \"Component\" keyword on line 1 and/or 3 of the two examples above. When we create our component with class MyComponent ... and use extends Component , which we've imported from React , we are saying (in code) that we want our class to have all the capabilities of a React class component (a class that is built into the React node module). The method render actually lives on that Component and the only reason we get to use it is that we \"extended\" from Component with a class of our own. Fortunately for us, Component has a few other useful methods to use the same way:","title":"Read It - Class-Based Component Lifecycle"},{"location":"module-2/componentLifeCycle/#the-componentdidmount-method","text":"This method, when used in your component, fires when the component is inserted into the DOM tree. This happens after the initial \"render\" method and can be useful for fetching data or updating state based on some conditions. The componentDidMount method (and other lifecycle methods) are usually placed above the render method. Here's an example: Example of componentDidMount 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { componentDidMount () { fetch ( 'http://example.com' ) . then ( res => res . json ()) . then ( examples => { this . setState ({ data : examples }) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Take a look at our data : { this . state . data } < /p> < /div> ) } }","title":"The componentDidMount Method"},{"location":"module-2/componentLifeCycle/#the-render-method","text":"This may seem redundant but the render method is important to understand since it is the only required method when using a class component. The render method typically returns JSX but it can also return other things, namely: Arrays Strings/Numbers Booleans Null The above options aren't typical so we will focus on JSX. It's also important to note that the render method should be a \"pure function\" which means it doesn't update state . The second rule to render is that it must return something ...JSX, null , an array, whatever. It must return something. Speaking of state, we need to remember that this render method will be invoked each time the state changes. Calling this.setState() anywhere in your component will cause this function to fire again and update the parts of the DOM that may have changed. In the following code, how many times will the render method be called on initiation? Simple Class Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [] } } componentDidMount () { const arr = this . props . users . filter ( u => u . username . length > 5 ) this . setState ({ users : arr }) } handleClick = () => { this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /p> < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } } The key is in the word \"initially\" . Hopefully you guessed 2 times. The render will be invoked a third time when the button is clicked. The answer is two because this.setState is asynchronous and the initial render will attempt before the componentDidMount function is complete. However, componentDidMount will quickly update the state and re-render the component without the user noticing anything. You can read more about that process in the React Docs . Before we move to another lifecycle method let's remember that everything is an object including this React component we're extending. What this means is that it too has properties, or methods(because their values are functions). Just like all of the methods on the DOM or any HTML element you've worked with like onclick, hover, blur...etc, this React Component has method that are firing blanks throughout the cycles of its life until YOU, the developer, give them instructions. Here's invalid code but a good visual example of what the Component you're extending looks like under-the-hood. Under-the-hood look at the lifecycle methods - Invalid Code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // * React Class Component /Object-Thing/ myComponent = { constructor : () => { /* create state here */ }, componentDidMount : () => { /* fetch data here */ }, componentDidUpdate : () => {}, componentWillUnmount : () => { /* delete cookies, unsubscribe from current connections, sign out here */ }, render : () => { /* return the visual for the DOM in JSX here */ }, componentDidCatch : () => { /* process error handling here */ }, getDerivedStateFromError : () => {}, shouldComponentUpdate : () => {}, getSnapshotBeforeUpdate : () => {}, getDerivedStateFromProps : () => {}, } Now that you see each property is already declared on the class, you can now go and define them with whatever your application's needs are! If you don't need them, don't worry about them they'll just fire blanks with no side-effects!","title":"The render Method"},{"location":"module-2/componentLifeCycle/#the-componentdidupdate-method","text":"This method is called when the component is updated. What does \"updated\" mean? It means when this.setState is called somewhere in the tree that affects the current component. This lifecycle method is not called on the initial load of the component. When it is called it automatically gives us a variable called prevProps that we can use to see if any of the props changed. You can call this.setState in this function but you want to be careful to do it based on some condition. If you don't, you'll cause an infinite loop because setState will cause the component to \"update\" which will then call setState which will cause it to update again, etc, etc, etc. For this reason, this is Example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 componentDidUpdate ( prevProps , prevState , snapshot ) { // will not be invoked if shouldComponentUpdate() returns false. // Use to do side effects if the state or props change and those create a need for a side-effect like a data fetch/network request or visuals // fired every time render is called after the initial render call // If we have a snapshot value, we've just added new items. // Adjust scroll so these new items don't push the old ones out of view. // (snapshot here is the value returned from getSnapshotBeforeUpdate) if ( snapshot !== null ) { const list = this . listRef . current ; list . scrollTop = list . scrollHeight - snapshot ; } } Usage example of componentDidUpdate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // this.setState({}) -> // componentDidUpdate() -> // this.setState({})-> // componentDidUpdate() -> // this.setState({})-> // etc. // This lifecycle method can be used like this: import React , { Component } from 'react' class MyComponent extends Component { constructor () { this . state = { users : [], errText : \"\" } } componentDidUpdate () { if ( this . state . users . length === 0 ) { this . setState ({ errText : 'There are no users to show' }) } } handleClick = () => { // This line is a shorthand to set the state to equal what the list of users was plus the new user that was added. this . setState ({ users : [... this . state . users ]. concat ([ 'newUser' ]) }) } render () { return ( < div > < h1 > Welcome to our component < /h1> { this . state . errText && < p > { this . state . errText } < /p>} < p > Here ' s an array with our users : { this . state . users } < /p> < button onClick = { this . handleClick } > Add User < /button> < /div> ) } }","title":"The componentDidUpdate Method"},{"location":"module-2/componentLifeCycle/#the-constructor-method","text":"The constructor is the first thing that happens when you load up a component. In fact, it's the first thing that happens anytime you use a class in JavaScript for any purpose (not just React). Inside the constructor is where you initialize variables that your class, or component, will use. For example, this is where you typically set your initial state. You also call the super() function inside of the constructor. This function calls the parent constructor with the data you've passed in, but we don't need to know about the details of that here so let's take a look at how we use the constructor: Example Usage of constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import React , { Component } from 'react' class MyComponent extends Component { constructor () { super () // calls the functionality of the grandparent class(the class parent of the Component class) this . state = { count : 0 } } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } } It's important to note that many people have stopped using the constructor in such verbose terms since React released shortcuts for writing this. Essentially, it does the same thing behind the scenes but the above can now also be written as: State without calling constructor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React , { Component } from 'react' class MyComponent extends Component { state = { count : 0 } handleClick = () => { this . setState ({ count : this . state . count + 1 }) } render () { return ( < div > < p > The count is : { this . state . count } < /p> < button onClick = { this . handleClick } > Add 1 < /button> < /div> ) } }","title":"The constructor Method"},{"location":"module-2/componentLifeCycle/#order-of-operations","text":"The lifecycle methods we just covered were not in any specific order so below we'll order them by the way they fire when the component is mounted , rendered , updated , unmounted , and if an error occurs. These phases are the phases of the components cycle of life, a.k.a the order in which the methods are fired as the component comes into the DOM(mounts) and eventually leaves the DOM (unmounts).","title":"Order of Operations"},{"location":"module-2/componentLifeCycle/#mounting-phase","text":"constructor() render()","title":"Mounting Phase"},{"location":"module-2/componentLifeCycle/#updating-phase","text":"shouldComponentUpdate(nextProps, nextState) render() componentDidUpdate(prevProps, prevState, snapshot) getSnapshotBeforeUpdate(prevProps, prevState) static getDerivedStateFromProps(props, state)","title":"Updating Phase"},{"location":"module-2/componentLifeCycle/#unmounting-phase","text":"componentWillUnmount() - used to fire before the render method but it is now considered legacy and unsafe to use.","title":"Unmounting Phase"},{"location":"module-2/componentLifeCycle/#error-phase-not-used-to-handle-exceptions","text":"componentDidCatch() getDerivedStateFromError() A full, comprehensive breakdown of all lifecycle methods can be found in here . We encourage you to look at this page often as well as use this lifecycle cheatsheet as you develop. Other component lifecycle methods and properties you should become familiar with are: setState() forceUpdate() defaultProps displayName","title":"Error Phase - Not used to handle exceptions!"},{"location":"module-2/componentLifeCycle/#summary","text":"","title":"Summary"},{"location":"module-2/componentLifeCycle/#practice-it","text":"Work through the React Docs Tutorial to build a timer app that utilizes the lifecycle methods.","title":"Practice It"},{"location":"module-2/componentLifeCycle/#additional-resources","text":"Blog, CodeBurst - How to Use the Lifecycle Methods Blog, Blog - React Component Lifecycle Reference, Wojtekma - Lifecycle Methods Diagram Reference, LogRocket - The New React Lifecycle Methods","title":"Additional Resources"},{"location":"module-2/componentLifeCycle/#know-your-docs","text":"React Docs - componentDidMount React Docs - React Component","title":"Know Your Docs"},{"location":"module-2/componentStyling/","text":"Intro to Component Styling with Material-UI There is no success without failure. There is no failure without lesson. What is your lesson? Review and Recap We've built up some knowledge of React components and how they fit together using props. We've also explored how state works. That is the basic logic for creating applications but what about how they look? You should be familiar with CSS through 101 but today we are going to introduce a new styling tool... Material UI. Overview There are many different ways to style applications in React . You can use: CSS files that you've created and import them Third-party CSS (ex. Bootstrap), again import them and use their pre-built micro-components Styled components from various open source providers with libraries like Material UI The reason we are introducing Material UI is because it is a robust, cross-platform component library backed by Google. It was written by two former Google UI engineers and designed by one of Google's design teams . Before you move on, watch the backstory to a major project called Material Design by Google which gave birth to Material UI . More on Material-UI We mentioned the words \"component library\". But what does that mean? Well...a component library is a set of pre-built components that satisfy some specific design requirement. For example...say I want all the buttons on my website to look the same (or similar). This is something that you usually want for consistency and good design. Well, Material UI provides a pre-built Button component that you can import into your code like this: import { Button } from '@material-ui/core' These buttons come with pre-determined styles but can be further styled to your liking. See the code snippet and example screenshot below: the JSX 1 2 3 4 5 6 7 8 9 < Button variant = \"contained\" color = \"primary\" className = { classes . button } > Primary < /Button> < Button variant = \"contained\" color = \"secondary\" className = { classes . button } > Secondary < /Button> < Button variant = \"contained\" color = \"secondary\" disabled className = { classes . button } > Disabled < /Button> the Result You've probably noticed the import statement above somewhere else and up until this point may have been wondering what Material UI is in the technical sense or how to use it. If so, I've got great news: it's simply an NPM package that we need to install. We do so by running this command: npm i @material-ui/core . More information can be found on this NPM package at NPMjs.com . Additionally, the documentation on all available components is available at the Material UI documentation. Be sure to use the navigation to look under the components folder. There is a lot of information available. So that's enough about what Material-UI is. Let's see it in action: the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 import React from 'react' ; import { Button } from '@material-ui/core' const App = () => { return ( < div style = {{ padding : '50px' }} > < h2 > Here ' s an example of a button using Material UI :< /h2> < Button variant = \"contained\" > Click Me < /Button> < /div> ) } export default App ; the Result In the above component, we simply import ed the Button from @material-ui/core and then used it below our heading. We supplied the prop, variant with a value of \"contained\" to tell the button that we want the border around it. Normally it comes without it. You can look more into the options, examples & why \"contained\" creates a border in the Button docs . So what does that code equate to when we run it? Take a look at \"the Result\" tab above. In Summary In conclusion, if you want to create a cool-looking, uniform experience across your application...use Material UI. See if they have a component for your needs. Buttons , Checkboxes , Radio Buttons , Selects , Sliders , Text Fields and more are all available for use. We will use Material UI to style our App in this week's lesson so go get familiar with the Docs . See It - Using Material-UI Practice It Navigate to the following URL: https://codesandbox.io/s/new?from-embed . Under the \"Dependencies\" heading on the left side of the screen, click blue button that says \"Add Dependency\" Search for \"@material-ui/core\" exactly as written. It will be the top one. Click it to install it. Now on line 3 of the code editor type import { Button } from '@material-ui/core' and press Enter . After line 11 (the h2 ), add the following: <Button>Click Me</Button> . You should see a button appear. Now on line 3 put a comma after the word Button and type TextField to import the TextField component. Above the button insert the following: <TextField label=\"Enter some text\" /> and below that line add <br /> for now just to give some separation. Do you see the text field? Try typing in it just to get a sense of its style. You're done! Easy styles and components for React with Material-UI. Additional Resources YT, CodingTheSmartWay.com - Getting Started with Material-UI YT, Google Design - What is Material Design Blog, CodeBurst - Four Ways to Style React Components Know Your Docs Be sure to reference the Material Documentation on Usage to see how others have used it with React, Next.js, Gatsby, Parcel, and more. NPM Docs - Material-UI Material-UI Docs - Home Page","title":"Component Styling with Material-UI"},{"location":"module-2/componentStyling/#intro-to-component-styling-with-material-ui","text":"There is no success without failure. There is no failure without lesson. What is your lesson?","title":"Intro to Component Styling with Material-UI"},{"location":"module-2/componentStyling/#review-and-recap","text":"We've built up some knowledge of React components and how they fit together using props. We've also explored how state works. That is the basic logic for creating applications but what about how they look? You should be familiar with CSS through 101 but today we are going to introduce a new styling tool... Material UI.","title":"Review and Recap"},{"location":"module-2/componentStyling/#overview","text":"There are many different ways to style applications in React . You can use: CSS files that you've created and import them Third-party CSS (ex. Bootstrap), again import them and use their pre-built micro-components Styled components from various open source providers with libraries like Material UI The reason we are introducing Material UI is because it is a robust, cross-platform component library backed by Google. It was written by two former Google UI engineers and designed by one of Google's design teams . Before you move on, watch the backstory to a major project called Material Design by Google which gave birth to Material UI .","title":"Overview"},{"location":"module-2/componentStyling/#more-on-material-ui","text":"We mentioned the words \"component library\". But what does that mean? Well...a component library is a set of pre-built components that satisfy some specific design requirement. For example...say I want all the buttons on my website to look the same (or similar). This is something that you usually want for consistency and good design. Well, Material UI provides a pre-built Button component that you can import into your code like this: import { Button } from '@material-ui/core' These buttons come with pre-determined styles but can be further styled to your liking. See the code snippet and example screenshot below: the JSX 1 2 3 4 5 6 7 8 9 < Button variant = \"contained\" color = \"primary\" className = { classes . button } > Primary < /Button> < Button variant = \"contained\" color = \"secondary\" className = { classes . button } > Secondary < /Button> < Button variant = \"contained\" color = \"secondary\" disabled className = { classes . button } > Disabled < /Button> the Result You've probably noticed the import statement above somewhere else and up until this point may have been wondering what Material UI is in the technical sense or how to use it. If so, I've got great news: it's simply an NPM package that we need to install. We do so by running this command: npm i @material-ui/core . More information can be found on this NPM package at NPMjs.com . Additionally, the documentation on all available components is available at the Material UI documentation. Be sure to use the navigation to look under the components folder. There is a lot of information available. So that's enough about what Material-UI is. Let's see it in action: the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 import React from 'react' ; import { Button } from '@material-ui/core' const App = () => { return ( < div style = {{ padding : '50px' }} > < h2 > Here ' s an example of a button using Material UI :< /h2> < Button variant = \"contained\" > Click Me < /Button> < /div> ) } export default App ; the Result In the above component, we simply import ed the Button from @material-ui/core and then used it below our heading. We supplied the prop, variant with a value of \"contained\" to tell the button that we want the border around it. Normally it comes without it. You can look more into the options, examples & why \"contained\" creates a border in the Button docs . So what does that code equate to when we run it? Take a look at \"the Result\" tab above.","title":"More on Material-UI"},{"location":"module-2/componentStyling/#in-summary","text":"In conclusion, if you want to create a cool-looking, uniform experience across your application...use Material UI. See if they have a component for your needs. Buttons , Checkboxes , Radio Buttons , Selects , Sliders , Text Fields and more are all available for use. We will use Material UI to style our App in this week's lesson so go get familiar with the Docs .","title":"In Summary"},{"location":"module-2/componentStyling/#see-it-using-material-ui","text":"","title":"See It - Using Material-UI"},{"location":"module-2/componentStyling/#practice-it","text":"Navigate to the following URL: https://codesandbox.io/s/new?from-embed . Under the \"Dependencies\" heading on the left side of the screen, click blue button that says \"Add Dependency\" Search for \"@material-ui/core\" exactly as written. It will be the top one. Click it to install it. Now on line 3 of the code editor type import { Button } from '@material-ui/core' and press Enter . After line 11 (the h2 ), add the following: <Button>Click Me</Button> . You should see a button appear. Now on line 3 put a comma after the word Button and type TextField to import the TextField component. Above the button insert the following: <TextField label=\"Enter some text\" /> and below that line add <br /> for now just to give some separation. Do you see the text field? Try typing in it just to get a sense of its style. You're done! Easy styles and components for React with Material-UI.","title":"Practice It"},{"location":"module-2/componentStyling/#additional-resources","text":"YT, CodingTheSmartWay.com - Getting Started with Material-UI YT, Google Design - What is Material Design Blog, CodeBurst - Four Ways to Style React Components","title":"Additional Resources"},{"location":"module-2/componentStyling/#know-your-docs","text":"Be sure to reference the Material Documentation on Usage to see how others have used it with React, Next.js, Gatsby, Parcel, and more. NPM Docs - Material-UI Material-UI Docs - Home Page","title":"Know Your Docs"},{"location":"module-2/implement-ReactRouter/","text":"Implementing React-Router Overview Now that you've gotten a hold of this new tool and have an understanding of why and when to use it, let's take some time to see how it's implemented so you can really get the flow of these \"wrapper\"/higher-order components. Implement BrowserRouter Implement BrowserRouter Video Video Outline Go to index.js import { BrowserRouter } from 'react-router-dom' create new component 1 2 3 4 5 6 7 const Main = () => { return ( < BrowserRouter > < Router /> < /BrowserRouter> ) } and import Router from './Router' replace <App /> with wrapper function <Main /> Building the Router Component Building the Router Component Video Video Outline Create Router.js file import react , switch , & Route Import the two components you want to test with!!! import React from 'react' import { Switch, Route } from 'react-router' import Home from './Home' import App from './App' Create Router function/component: 1 2 3 4 5 6 7 8 const Router = () => { return ( < Switch > < Route path = \"/home\" component = { Home } /> < Route path = \"/app\" component = { App } /> < /Switch> ) } export default Router Go back to index.js and uncomment the import!! Test your App to see if it works! Implementing Link Implementing Link Video Video Outline 1. Go to the simple components: <HelloWorldOne /> & <HelloWorldTwo /> 2. import { Link } from 'react-router-dom' 3. Add your wherever you want!!! 4. <Link to=\"/yourpath\"> 5. Remove underline... style={{ textDecoration: \"none\" }} 6. Use a Material-UI Button... import Button from '@material-ui/core/Button' 1 2 3 4 5 6 7 8 9 < Link to = \"/home\" > * /} < Button style = {{ margin : \"5% auto\" }} variant = \"outlined\" color = \"primary\" > Go BackHome < /Button> < /Link> 7. Create two more components called: <SignIn /> & <SignUp /> and give them all Links to go to <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> 8. Bonus 1: Use a Material-UI Button Group to do it!!! 9. Bonus 2: Create a new component for the Button Group and import it into the other four components: <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> or whichever components you've decided to use. Practice It Practice Section Instructions Open the code editor and navigate to example.js on the left-hand side At the bottom of the file example.js (but before the export, line 79 or 80), create a new functional component called Urls The Urls component should return the following: 1 2 3 4 5 6 7 8 < div > < h3 > URLs Page </ h3 > < ul > < li >< a href = \"https://www.google.com\" > Google </ a ></ li > < li >< a href = \"https://www.facebook.com\" > Facebook </ a ></ li > < li >< a href = \"https://www.amazon.com\" > Amazon </ a ></ li > </ ul > </ div > NOTE: Try not to copy/paste this code. It's good to practice writing it. Add the Urls component into the Router with a path of /urls just below {Home} , {About} , and {Topics} on line 25. Add a Link for this component as well, starting at line 18, that goes to /urls . Refresh the browser and click on the link to the Urls component. You should see your new component. Additional Resources YT, Dev Ed - React Router Tutorial | React For Beginners Reference, GitHub React Training - Link Know Your Docs NPM Docs - React-Router React Training Docs - React-Router","title":"Implement React Router"},{"location":"module-2/implement-ReactRouter/#implementing-react-router","text":"","title":"Implementing React-Router"},{"location":"module-2/implement-ReactRouter/#overview","text":"Now that you've gotten a hold of this new tool and have an understanding of why and when to use it, let's take some time to see how it's implemented so you can really get the flow of these \"wrapper\"/higher-order components.","title":"Overview"},{"location":"module-2/implement-ReactRouter/#implement-browserrouter","text":"Implement BrowserRouter Video Video Outline Go to index.js import { BrowserRouter } from 'react-router-dom' create new component 1 2 3 4 5 6 7 const Main = () => { return ( < BrowserRouter > < Router /> < /BrowserRouter> ) } and import Router from './Router' replace <App /> with wrapper function <Main />","title":"Implement BrowserRouter"},{"location":"module-2/implement-ReactRouter/#building-the-router-component","text":"Building the Router Component Video Video Outline Create Router.js file import react , switch , & Route Import the two components you want to test with!!! import React from 'react' import { Switch, Route } from 'react-router' import Home from './Home' import App from './App' Create Router function/component: 1 2 3 4 5 6 7 8 const Router = () => { return ( < Switch > < Route path = \"/home\" component = { Home } /> < Route path = \"/app\" component = { App } /> < /Switch> ) } export default Router Go back to index.js and uncomment the import!! Test your App to see if it works!","title":"Building the Router Component"},{"location":"module-2/implement-ReactRouter/#implementing-link","text":"Implementing Link Video Video Outline 1. Go to the simple components: <HelloWorldOne /> & <HelloWorldTwo /> 2. import { Link } from 'react-router-dom' 3. Add your wherever you want!!! 4. <Link to=\"/yourpath\"> 5. Remove underline... style={{ textDecoration: \"none\" }} 6. Use a Material-UI Button... import Button from '@material-ui/core/Button' 1 2 3 4 5 6 7 8 9 < Link to = \"/home\" > * /} < Button style = {{ margin : \"5% auto\" }} variant = \"outlined\" color = \"primary\" > Go BackHome < /Button> < /Link> 7. Create two more components called: <SignIn /> & <SignUp /> and give them all Links to go to <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> 8. Bonus 1: Use a Material-UI Button Group to do it!!! 9. Bonus 2: Create a new component for the Button Group and import it into the other four components: <HelloWorldOne /> & <HelloWorldTwo /> & <SignIn /> & <SignUp /> or whichever components you've decided to use.","title":"Implementing Link"},{"location":"module-2/implement-ReactRouter/#practice-it","text":"","title":"Practice It"},{"location":"module-2/implement-ReactRouter/#practice-section-instructions","text":"Open the code editor and navigate to example.js on the left-hand side At the bottom of the file example.js (but before the export, line 79 or 80), create a new functional component called Urls The Urls component should return the following: 1 2 3 4 5 6 7 8 < div > < h3 > URLs Page </ h3 > < ul > < li >< a href = \"https://www.google.com\" > Google </ a ></ li > < li >< a href = \"https://www.facebook.com\" > Facebook </ a ></ li > < li >< a href = \"https://www.amazon.com\" > Amazon </ a ></ li > </ ul > </ div > NOTE: Try not to copy/paste this code. It's good to practice writing it. Add the Urls component into the Router with a path of /urls just below {Home} , {About} , and {Topics} on line 25. Add a Link for this component as well, starting at line 18, that goes to /urls . Refresh the browser and click on the link to the Urls component. You should see your new component.","title":"Practice Section Instructions"},{"location":"module-2/implement-ReactRouter/#additional-resources","text":"YT, Dev Ed - React Router Tutorial | React For Beginners Reference, GitHub React Training - Link","title":"Additional Resources"},{"location":"module-2/implement-ReactRouter/#know-your-docs","text":"NPM Docs - React-Router React Training Docs - React-Router","title":"Know Your Docs"},{"location":"module-2/protectedRoutes-intro/","text":"Protected Routes I arise full of eagerness and energy, knowing well what achievement lies ahead of me.\u2003\u2014Zane Grey In the last lesson we learned how to route a user to a specific component/view based on the URL, but what if we needed to prevent certain users from seeing certain components. Let's say, if we has a class grading app we would want to prevent the students from seeing the allGradesComponent while still allowing the teacher to see it. We would put this allGradesComponent behind a Protected Route that will work like an if/else statement to see if the user is allowed to view it our not. Check it out below. Overview Why are we learning about this? Well, protected routes and authentication are tools we can use to secure our app from unwanted guests. It's also a way to keep us logged in. You might have noticed last week that when we \"logged in\" to our app, everything was fine but when we refreshed the page we had to \"log in\" again. That's because the app had no way of understanding that we had an active session or cookie stored. Using protected routes and authentication will allow us to leave our machine ( computer ), come back the next day and open the app and remain right where we were when we left off. Only if our cookie has expired will we be required to log in again. Let's explore these processes further. What and How First and foremost, what is a Protected Route ? Just like the routes we worked with last class, these routes are protected by some logic. Think: if (userIsAuthorized) => go to profile; else {\"Sorry, you're not authorized\"}. It boils down to a bit of JavaScript logic that directs the user to one component or another based on some condition. It's easiest to show an example. Protected Route Example - Router.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route // spread the rest of the props that are needed in this component {... rest } // define the value of the render method as a ternary that checks to see if checkAuth returns true or false render = {( props ) => checkAuth () === true // if true render the component with all the props ? < Component {... props } /> // if false, use the Redirect component to update the url to `/login` so they are redirected to the login component : < Redirect to = {{ pathname : '/login' , state : { from : props . location }}} /> } /> ) } So...that was pretty verbose. Let's make it a little simpler: Simplified Protected Route Example - Router.js 1 2 3 4 5 6 7 8 9 10 const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route {... rest } render = {( props ) => checkAuth () ? < Component {... props } /> : < Redirect to = \"/login\" /> } /> ) } Ok now we can talk about what this is doing. This ProtectedRoute function can accept any amount of props but the props we really want are the and the component props from the route in question. On the first line... const ProtectedRoute = ({component: Component, ...rest}) => { ...we \"split\" out the Component from the rest of the props in order to use it more easily later. Next we return a Route component (from 'react-router' package) and we send it the ...rest of the components. Those could be things like exact , for example. Then, we use the render function to determine what to show based on a conditions. We are referencing a custom-built checkAuth() function that we will create later. If checkAuth returns true then we will send the user on to the component they want to visit. If checkAuth returns false then we will Redirect them to the login component so that they can log in. NOTE: You don't have to remember all of this right now but know where to reference it. In the future when you are using protected routes (sometimes called Private Routes ) you should be able to Google something like \"React protected route\" for an example. Where Do We Put this Code? Where do we put this code? We will put it in our Router.js file right above where the router is defined. And we use it by simply replacing one of the regular routes we've built already with this new <ProtectedRoute> that will route to a component that we want to be protected by authentication like this: Router.js File with ProtectedRoute Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // ... import statements here... const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route {... rest } render = {( props ) => checkAuth () ? < Component {... props } /> : < Redirect to = \"/login\" /> } /> ) } const Router = () => { return ( < Switch > < Route exact path = \"/\" component = { Home } /> < ProtectedRoute path = \"/about\" component = { About } /> < /Switch> ) } Now, the <About /> component will be protected and only be shown based on some condition like authentication, after we add it in, of course. See It - Protected Routes The checkAuth Function A very simple way to test if your protected route is working is build a dumb function like the one below: const checkAuth = () => true The code above will say that you are always logged in and anyone will be able to navigate to your protected route. In production mode we generally want something more complicated than that. Let's look at how to find a cookie from the browser window , shall we? 1 2 3 4 const checkAuth = () => { const cookies = cookie . parse ( document . cookie ) return cookies [ \"loggedIn\" ] ? true : false } Look closely at the function above, it's getting all of the cookies that exist on the browser and saying, \"If there's one called loggedIn , return true . Otherwise return false . cookie.parse actually comes from the NPM package called cookie . We'll be installing it shortly. (Just make sure you do the following homework.) For now, let's assume if we're looking for a cookie called: loggedIn we probably put one, or set one, there called loggedIn with our app. This means our app can now save data to the local storage of a user's computer, or more specifically, their browser's local storage! This isn't something we've done yet.....ooooh....ahhhh. Cookies Cookies are small bits of information that websites store on your browser. They are key-value pairs like objects but they only contain text. They help the browser make certain decisions using the content that's been stored in these cookies. That's exactly what we are going to do here. You can interact with cookies at anytime by typing document.cookie in the console of your browser. Go ahead and do that now... document.cookie + Enter ==> \"ASPSESSIONIDAACDSPBS=IENHHCBEBANMBEPJNLICGFGP\" (or something like that) If you did it should have brought back a string of characters that's hard to do anything with. This problem is solved with the cookie package from npm . It can be installed with the regular npm i cookie command. Getting a list of our available cookies is easy with cookie.parse . Let's talk about setting cookies. In fact, you don't even need the cookie package to do this. You simply write: document.cookie = \"loggedIn=true;max-age=60*1000\" The max-age property decides how long the cookie will live for/be valid for. This property is counted in milliseconds so if you want the cookie to last one minute, you have to use 60*1000 , (1000 milliseconds = 1 second; 1 second X 60 = 1 minute) . So now we've set this cookie on Login which means at Logout we'll want to clear it. Keep this in mind as we move forward because we're going to continue working on the Login in portion for now. Want to know more about cookies and what you can do with them? Read this very detailed article on What Are Cookies . Practice It Practice Section Instructions Open the sandbox above Navigate to the Route.js file and look at the comments Create a ProtectedRoute function where the commented line indicates Replace the use of Route with ProtectedRoute in the <Switch> component Do you see the components showing up? Use the address bar to navigate to the \"/about\" and \"/info\" pages. Do you see those? Replace the true with false in the checkAuth function. Are the components still showing up? Additional Resources YT, freeCodeCamp.org - Protected Routes in React with React-Router Blog, Medium - Using Cookies in React, Redux, React-Router Article, WhatAreCookies.com - What Are Cookies Know Your Docs React Training Docs - Redirects NPM Docs - cookie","title":"Protected Routes"},{"location":"module-2/protectedRoutes-intro/#protected-routes","text":"I arise full of eagerness and energy, knowing well what achievement lies ahead of me.\u2003\u2014Zane Grey In the last lesson we learned how to route a user to a specific component/view based on the URL, but what if we needed to prevent certain users from seeing certain components. Let's say, if we has a class grading app we would want to prevent the students from seeing the allGradesComponent while still allowing the teacher to see it. We would put this allGradesComponent behind a Protected Route that will work like an if/else statement to see if the user is allowed to view it our not. Check it out below.","title":"Protected Routes"},{"location":"module-2/protectedRoutes-intro/#overview","text":"Why are we learning about this? Well, protected routes and authentication are tools we can use to secure our app from unwanted guests. It's also a way to keep us logged in. You might have noticed last week that when we \"logged in\" to our app, everything was fine but when we refreshed the page we had to \"log in\" again. That's because the app had no way of understanding that we had an active session or cookie stored. Using protected routes and authentication will allow us to leave our machine ( computer ), come back the next day and open the app and remain right where we were when we left off. Only if our cookie has expired will we be required to log in again. Let's explore these processes further.","title":"Overview"},{"location":"module-2/protectedRoutes-intro/#what-and-how","text":"First and foremost, what is a Protected Route ? Just like the routes we worked with last class, these routes are protected by some logic. Think: if (userIsAuthorized) => go to profile; else {\"Sorry, you're not authorized\"}. It boils down to a bit of JavaScript logic that directs the user to one component or another based on some condition. It's easiest to show an example. Protected Route Example - Router.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route // spread the rest of the props that are needed in this component {... rest } // define the value of the render method as a ternary that checks to see if checkAuth returns true or false render = {( props ) => checkAuth () === true // if true render the component with all the props ? < Component {... props } /> // if false, use the Redirect component to update the url to `/login` so they are redirected to the login component : < Redirect to = {{ pathname : '/login' , state : { from : props . location }}} /> } /> ) } So...that was pretty verbose. Let's make it a little simpler: Simplified Protected Route Example - Router.js 1 2 3 4 5 6 7 8 9 10 const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route {... rest } render = {( props ) => checkAuth () ? < Component {... props } /> : < Redirect to = \"/login\" /> } /> ) } Ok now we can talk about what this is doing. This ProtectedRoute function can accept any amount of props but the props we really want are the and the component props from the route in question. On the first line... const ProtectedRoute = ({component: Component, ...rest}) => { ...we \"split\" out the Component from the rest of the props in order to use it more easily later. Next we return a Route component (from 'react-router' package) and we send it the ...rest of the components. Those could be things like exact , for example. Then, we use the render function to determine what to show based on a conditions. We are referencing a custom-built checkAuth() function that we will create later. If checkAuth returns true then we will send the user on to the component they want to visit. If checkAuth returns false then we will Redirect them to the login component so that they can log in. NOTE: You don't have to remember all of this right now but know where to reference it. In the future when you are using protected routes (sometimes called Private Routes ) you should be able to Google something like \"React protected route\" for an example.","title":"What and How"},{"location":"module-2/protectedRoutes-intro/#where-do-we-put-this-code","text":"Where do we put this code? We will put it in our Router.js file right above where the router is defined. And we use it by simply replacing one of the regular routes we've built already with this new <ProtectedRoute> that will route to a component that we want to be protected by authentication like this: Router.js File with ProtectedRoute Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // ... import statements here... const ProtectedRoute = ({ component : Component , ... rest }) => { return ( < Route {... rest } render = {( props ) => checkAuth () ? < Component {... props } /> : < Redirect to = \"/login\" /> } /> ) } const Router = () => { return ( < Switch > < Route exact path = \"/\" component = { Home } /> < ProtectedRoute path = \"/about\" component = { About } /> < /Switch> ) } Now, the <About /> component will be protected and only be shown based on some condition like authentication, after we add it in, of course.","title":"Where Do We Put this Code?"},{"location":"module-2/protectedRoutes-intro/#see-it-protected-routes","text":"","title":"See It - Protected Routes"},{"location":"module-2/protectedRoutes-intro/#the-checkauth-function","text":"A very simple way to test if your protected route is working is build a dumb function like the one below: const checkAuth = () => true The code above will say that you are always logged in and anyone will be able to navigate to your protected route. In production mode we generally want something more complicated than that. Let's look at how to find a cookie from the browser window , shall we? 1 2 3 4 const checkAuth = () => { const cookies = cookie . parse ( document . cookie ) return cookies [ \"loggedIn\" ] ? true : false } Look closely at the function above, it's getting all of the cookies that exist on the browser and saying, \"If there's one called loggedIn , return true . Otherwise return false . cookie.parse actually comes from the NPM package called cookie . We'll be installing it shortly. (Just make sure you do the following homework.) For now, let's assume if we're looking for a cookie called: loggedIn we probably put one, or set one, there called loggedIn with our app. This means our app can now save data to the local storage of a user's computer, or more specifically, their browser's local storage! This isn't something we've done yet.....ooooh....ahhhh.","title":"The checkAuth Function"},{"location":"module-2/protectedRoutes-intro/#cookies","text":"Cookies are small bits of information that websites store on your browser. They are key-value pairs like objects but they only contain text. They help the browser make certain decisions using the content that's been stored in these cookies. That's exactly what we are going to do here. You can interact with cookies at anytime by typing document.cookie in the console of your browser. Go ahead and do that now... document.cookie + Enter ==> \"ASPSESSIONIDAACDSPBS=IENHHCBEBANMBEPJNLICGFGP\" (or something like that) If you did it should have brought back a string of characters that's hard to do anything with. This problem is solved with the cookie package from npm . It can be installed with the regular npm i cookie command. Getting a list of our available cookies is easy with cookie.parse . Let's talk about setting cookies. In fact, you don't even need the cookie package to do this. You simply write: document.cookie = \"loggedIn=true;max-age=60*1000\" The max-age property decides how long the cookie will live for/be valid for. This property is counted in milliseconds so if you want the cookie to last one minute, you have to use 60*1000 , (1000 milliseconds = 1 second; 1 second X 60 = 1 minute) . So now we've set this cookie on Login which means at Logout we'll want to clear it. Keep this in mind as we move forward because we're going to continue working on the Login in portion for now. Want to know more about cookies and what you can do with them? Read this very detailed article on What Are Cookies .","title":"Cookies"},{"location":"module-2/protectedRoutes-intro/#practice-it","text":"","title":"Practice It"},{"location":"module-2/protectedRoutes-intro/#practice-section-instructions","text":"Open the sandbox above Navigate to the Route.js file and look at the comments Create a ProtectedRoute function where the commented line indicates Replace the use of Route with ProtectedRoute in the <Switch> component Do you see the components showing up? Use the address bar to navigate to the \"/about\" and \"/info\" pages. Do you see those? Replace the true with false in the checkAuth function. Are the components still showing up?","title":"Practice Section Instructions"},{"location":"module-2/protectedRoutes-intro/#additional-resources","text":"YT, freeCodeCamp.org - Protected Routes in React with React-Router Blog, Medium - Using Cookies in React, Redux, React-Router Article, WhatAreCookies.com - What Are Cookies","title":"Additional Resources"},{"location":"module-2/protectedRoutes-intro/#know-your-docs","text":"React Training Docs - Redirects NPM Docs - cookie","title":"Know Your Docs"},{"location":"module-2/reactRouter-link/","text":"Creating Links to Update the URL Overview This BrowserRouter is pretty cool because it uses a Router component to route the view to a specific component according to the URL, but how does the URL get changed? Using Link Since Web 101 you've know that an <a> (anchor) tag is used to create hyperlinks on your site to get to a certain page in your website's folder, which typically look like this: <a href=\"/dash\">Go to Dashboard</a> . React Router provides its own linking mechanism that ensures interaction with our <Router> and <Switch> statement we created at the beginning of the homework. One of the great things about this component is that we can use it anywhere in our code. To do so, we need to import it first: import { Link } from 'react-router-dom' . (Maybe you're picking up on the pattern now?) Once imported we can use it in our code like this: SomeComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // ...some import statements import { Link } from 'react-router-dom' // ...more import statements // Now just write in the Link component, tell it where \"to\" route and give it some text const SomeComponent = ( props ) => { < div > < h1 > Welcome to the SomeComponent Page < /h1> < p > There ' s lots to do and see here but if you want the full range of capabilities provided by this App , you need to checkout the < Link to = \"/dash\" > Dashboard Page < /Link> . < p > < /div> } Now, when a user clicks on the Dashboard Page link, the URL in the address bar will change, which will be picked up by the BrowserRouter component, which then calls the Router so the <Switch> component in the Router will return the correct component to the <BrowserRouter> \u2014in this case, <Dashboard/> . The Link component at its simplest, just takes a prop called to which represents the path you want to navigate to . EXTRA: You won't need this for tomorrow, but it's important to know that Links can send an object of properties through the to prop which makes them even more powerful. Take a look below: Example of Assigning an Object to the to prop in Link 1 2 3 4 5 6 7 8 < Link to = {{ pathname : \"/dash\" , search : \"?sort=name\" , hash : \"#the-hash\" , state : { fromHome : true } }} /> NOTE: We generally won't need this much flexibility but it's important to note the power of the Link component. You can read more about it at ReactTraining-Link . Know Your Docs React Training Docs - Link","title":"Router Link"},{"location":"module-2/reactRouter-link/#creating-links-to-update-the-url","text":"","title":"Creating Links to Update the URL"},{"location":"module-2/reactRouter-link/#overview","text":"This BrowserRouter is pretty cool because it uses a Router component to route the view to a specific component according to the URL, but how does the URL get changed?","title":"Overview"},{"location":"module-2/reactRouter-link/#using-link","text":"Since Web 101 you've know that an <a> (anchor) tag is used to create hyperlinks on your site to get to a certain page in your website's folder, which typically look like this: <a href=\"/dash\">Go to Dashboard</a> . React Router provides its own linking mechanism that ensures interaction with our <Router> and <Switch> statement we created at the beginning of the homework. One of the great things about this component is that we can use it anywhere in our code. To do so, we need to import it first: import { Link } from 'react-router-dom' . (Maybe you're picking up on the pattern now?) Once imported we can use it in our code like this: SomeComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // ...some import statements import { Link } from 'react-router-dom' // ...more import statements // Now just write in the Link component, tell it where \"to\" route and give it some text const SomeComponent = ( props ) => { < div > < h1 > Welcome to the SomeComponent Page < /h1> < p > There ' s lots to do and see here but if you want the full range of capabilities provided by this App , you need to checkout the < Link to = \"/dash\" > Dashboard Page < /Link> . < p > < /div> } Now, when a user clicks on the Dashboard Page link, the URL in the address bar will change, which will be picked up by the BrowserRouter component, which then calls the Router so the <Switch> component in the Router will return the correct component to the <BrowserRouter> \u2014in this case, <Dashboard/> . The Link component at its simplest, just takes a prop called to which represents the path you want to navigate to . EXTRA: You won't need this for tomorrow, but it's important to know that Links can send an object of properties through the to prop which makes them even more powerful. Take a look below: Example of Assigning an Object to the to prop in Link 1 2 3 4 5 6 7 8 < Link to = {{ pathname : \"/dash\" , search : \"?sort=name\" , hash : \"#the-hash\" , state : { fromHome : true } }} /> NOTE: We generally won't need this much flexibility but it's important to note the power of the Link component. You can read more about it at ReactTraining-Link .","title":"Using Link"},{"location":"module-2/reactRouter-link/#know-your-docs","text":"React Training Docs - Link","title":"Know Your Docs"},{"location":"module-2/reactRouter/","text":"Intro to React Router The glow of one warm thought is to me worth more than money.\u2003\u2014Thomas Jefferson Overview What we've learned so far is great. It helps us build a dynamic single-page application (SPA), but so far our app literally just has one page. What if we want it to have more than one? Like a sign-up page, contact us page, products page, whatever!! That's where React Router comes in. With React Router we can control the URL in the address bar and tell our server to return the file that matches the URL we just changed it to. For instance: \"www.mywebsite.com/contactus\" might return the \"Contact Us\" page whereas \"www.mywebsite.com/signup\" might return the \"Sign Up\" page. Continue on to get the low down on how to make this work. Why Why use React Router? As we mentioned above, we use React Router to help us handle multiple routes in our URL. For example, every time you spin up your music dashboard app using npm start it sends the browser to the default path of the application in your computer ~/devFolder/musicApp/ , or simply, ~/ . Through the local port 3000 it shows up in your browser as \"http://localhost:3000/\" . But later, when we add a users page and want the route /users registered with our app's Router so the browser will navigate to the Users component that we built, we use React Router. Thus, we will have the following paths match the following components: / -> HomePage Component /users -> Users Component /users/0 -> UserDetails Component with the details of our first user React Router: The High Overview Video Breakdown App Demo What's going on How? Process Tools Used react-router-dom react-router Overview of components - (floating around able to be called by anyone) Go to index.js to see <App /> being called How to manage the shift between the two & Flow of functions in the functional programming heap of React-Router... reactDOM.render() <Main /> <BrowserRouter /> <Router /> <Switch /> <Route path=\"/mycomponentofchoice\" component={MyComponentOfChoice} /> <MyComponentOfChoice /> <Link to=\"/mycomponentofchoice\" /> Go to docs and install npm packages Installation npm i react-router react-router-dom Open up the React Router Docs: https://reactrouter.com/web/guides/quick-start What Install the Router Packages So how do we integrate React Router into our code? It's actually quite simple . . . it's an NPM package just like Material UI! Who would have thought?!? To install it in our project we just run the command npm i react-router react-router-dom inside our React app. This command installs two packages, as you may have noticed, react-router and react-router-dom. Go ahead and do that in your music app. It should be noted at this point that all forms of building front-end applications will need the use of a \"router\" of some shape and form. If you were building with Angular you'd need to use Angular's RouterModule and Routes . If you were building with Vue you'd need to use Vue Router . They all do the same job in their respective stacks, so while we're learning to build with React, let's use React Router . Creating the Router After installing the libraries/packages that make up the magic of React Router, we need to create a router, which really is just a function that, when called, returns the component it's assigned to. We start by creating a file called Router.js , usually right inside the src/ folder. Here's an example of a simple Router file: src/Router.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import React from 'react' // Here is where we are importing to the two main components we need from the React Router package. import { Switch , Route } from 'react-router' // Local imports. Import components we built ourselves import Home from './Home' import Dashboard from './components/Dashboard' const Router = () => { return ( // Then we use Switch and Route. Switch acts like a regular JS Switch Statement < Switch > { /* depending on the path in the URL, one of these Routes will be returned and their component rendered */ } < Route exact path = \"/\" component = { Home } /> < Route path = \"/dash\" component = { Dashboard } /> < /Switch> ) } The Switch component always wraps multiple Route s so it is the single parent container this component returns. As we customize the \"Router\" component, keep in mind the Switch component bares an obvious resemblance in appearance and functionality to the switch() { case: } statement we're familiar with in JavaScript . In this way, it's kind of like an if/else for React components but leaner and cleaner. In summary, Switch is telling the application, \"hey, look at all of the paths in this section to see if the current path in the browser matches any of these. If so, return the route that's connected to it.\" The Route then, is a component which specifies a combination of the correct relationship of \"path\" and \"component\". If the URL in the browser matches the path, then the Route sends the application to the correct component. In this case, / dash will load up the Dashboard component. You see the <Route> is the case: statement that says to do this when this is the case. Remember to Import the Components You Want to Use 1 2 3 4 // Then import the components you want to use import Home from './Home' < Route exact path = \"/\" component = { Home } /> This might seem obvious but it's an important piece to remember. Each of the components you want to use in your Router have to be imported so they're available/registered with the Router component. Also, notice that we used the Home component as the default route. If we're using Router we have to create a default case for the <Switch> component to return, because ALL components in React must return something !!! Rendering What Comes out of the Router Great, so we've created our Router file. Now what? Let's tell the application to use it! Remember, we created the file but haven't made the other parts of the application aware of it. The very first file of our app, the index.js file is our entry point into the app. Go to it and find the component it's currently using, which is most likely <App /> . We're going to make some renovations. Look below at the default setup of our app. Basic React index.js file 1 2 3 4 5 6 7 8 9 10 11 12 import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; ReactDOM . render ( < App /> , document . getElementById ( 'root' )); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); NOTE: don't worry about the service worker part, it's an API we can learn to use later. Just focus on the steps ahead. As you probably guessed, we have to import things . . .The first (#1) is BrowserRouter . This, aptly named, package navigates the browser where we want it to. The second (#2) thing we have to import is the Router component we just finished building. React index.js file with BrowserRouter & our Router imported 1 2 3 4 5 6 7 8 9 10 11 import React from 'react' ; import ReactDOM from 'react-dom' ; // #1 import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; // #2 import Router from './Router' ; // ...more code below here... NOTE: The order in which packages and components are imported is not important to the app. The order is only important to you and your team, so find a style you like and develop it. Above you see dependencies listed first, styles, then components. Next, or (#3) we have to create a component to return this stuff for us. Let's call it Main and have it return <BrowserRouter> . Then stick our <Router /> component inside of it. This \"sticking\" inside is actually called \"wrapping\". We \"wrap\" the <BrowserRouter> around the <Router> so our entire application is encapsulated by the <BrowserRouter> . Newly created Main Component in the index.js file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // ...more code above here... import Router from './Router' ; // #3 const Main = () => ( // #4 < BrowserRouter > < Router /> < /BrowserRouter> ) ReactDOM . render ( < App /> , document . getElementById ( 'root' )); // ...more code about service worker blah blah below here... The (#5) step is to use the \"wrap\". To do this we'll pass to ReactDOM.render() the Main component we just built. Now our app's index.js file should look like this: Replaced <App /> with <Main /> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import React from 'react' ; import ReactDOM from 'react-dom' ; import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; import Router from './Router' ; const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ) // #5 ReactDOM . render ( < Main /> , document . getElementById ( 'root' )); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); We call this \"wrapping\" stuff Higher Order Components or HOCs because, just like the Higher Order functions ( .map , .reduce , .filter ) you learned in 211, they take functions as their arguments and sometimes return functions: render takes in main which returns BrowserRouter which returns Router with returns one of the Routes which returns its appropriate component which then returns the JSX so the render can plug it into the DOM inside an element with the id \"root\" . Get it? If not, walk through that again slowly. Draw it out. Notes on this React Router/BrowserRouter stuff: Be sure to import { BrowserRouter } from 'react-router-dom' It is key that this { BrowserRouter } wraps our application because it is needed for the communication between our browser and our Router component. Additionally, when we take a look a the React Link component (coming up) we will learn that Link s can only be used inside of a \"router\" which BrowserRouter takes care of for us. Please note: You don't have to understand that right now, just start recognizing the pattern we are using above. Components return components that return components or, more simply, a function returns a function that returns a function. Functional programming! Remember to import Router from './Router' so it can be used in the index.js file. In step 3, we create a small component function called Main (you can call it something else if you like) and we wrap our <Router /> inside the <BrowserRouter> </BrowserRouter> tags so the BrowserRouter component returns it. You may be thinking, \"couldn't we have just done that in the Router file?\". Yes, but this pattern will allow you to eventually add components around the router that you want to see on every page. For example, a Header and Footer component, like you see below: Example of Main Component 1 2 3 4 5 6 7 const Main = () => ( < BrowserRouter > < Header /> < Router /> { /* <-- See? Your different routes can be render here while still keeping the Header and Footer the same */ } < Footer /> < /BrowserRouter> ) But do note that you may see slightly different patterns in other tutorials and that's perfectly fine. While you're learning this, let's stick with this pattern. Step 5 is simply replacing the call to App in ReactDOM.render with the new Main function we just created. Once this step is done you should be able to load up your application and switch between the Home and Dashboard components by typing the corresponding URL in the browser. But of course, typing in that URL is annoying and you're definitely not asked to do that on anyone else's web site. To fix this let's learn how to use the Link part of React Router which is a programmatic way to switch the browser URL. Know Your Docs w3S Docs - Switch Statement React Training Docs - React Router React Router Docs - Quick Start","title":"React Router Intro"},{"location":"module-2/reactRouter/#intro-to-react-router","text":"The glow of one warm thought is to me worth more than money.\u2003\u2014Thomas Jefferson","title":"Intro to React Router"},{"location":"module-2/reactRouter/#overview","text":"What we've learned so far is great. It helps us build a dynamic single-page application (SPA), but so far our app literally just has one page. What if we want it to have more than one? Like a sign-up page, contact us page, products page, whatever!! That's where React Router comes in. With React Router we can control the URL in the address bar and tell our server to return the file that matches the URL we just changed it to. For instance: \"www.mywebsite.com/contactus\" might return the \"Contact Us\" page whereas \"www.mywebsite.com/signup\" might return the \"Sign Up\" page. Continue on to get the low down on how to make this work.","title":"Overview"},{"location":"module-2/reactRouter/#why","text":"Why use React Router? As we mentioned above, we use React Router to help us handle multiple routes in our URL. For example, every time you spin up your music dashboard app using npm start it sends the browser to the default path of the application in your computer ~/devFolder/musicApp/ , or simply, ~/ . Through the local port 3000 it shows up in your browser as \"http://localhost:3000/\" . But later, when we add a users page and want the route /users registered with our app's Router so the browser will navigate to the Users component that we built, we use React Router. Thus, we will have the following paths match the following components: / -> HomePage Component /users -> Users Component /users/0 -> UserDetails Component with the details of our first user React Router: The High Overview Video Breakdown App Demo What's going on How? Process Tools Used react-router-dom react-router Overview of components - (floating around able to be called by anyone) Go to index.js to see <App /> being called How to manage the shift between the two & Flow of functions in the functional programming heap of React-Router... reactDOM.render() <Main /> <BrowserRouter /> <Router /> <Switch /> <Route path=\"/mycomponentofchoice\" component={MyComponentOfChoice} /> <MyComponentOfChoice /> <Link to=\"/mycomponentofchoice\" /> Go to docs and install npm packages Installation npm i react-router react-router-dom Open up the React Router Docs: https://reactrouter.com/web/guides/quick-start","title":"Why"},{"location":"module-2/reactRouter/#what","text":"","title":"What"},{"location":"module-2/reactRouter/#install-the-router-packages","text":"So how do we integrate React Router into our code? It's actually quite simple . . . it's an NPM package just like Material UI! Who would have thought?!? To install it in our project we just run the command npm i react-router react-router-dom inside our React app. This command installs two packages, as you may have noticed, react-router and react-router-dom. Go ahead and do that in your music app. It should be noted at this point that all forms of building front-end applications will need the use of a \"router\" of some shape and form. If you were building with Angular you'd need to use Angular's RouterModule and Routes . If you were building with Vue you'd need to use Vue Router . They all do the same job in their respective stacks, so while we're learning to build with React, let's use React Router .","title":"Install the Router Packages"},{"location":"module-2/reactRouter/#creating-the-router","text":"After installing the libraries/packages that make up the magic of React Router, we need to create a router, which really is just a function that, when called, returns the component it's assigned to. We start by creating a file called Router.js , usually right inside the src/ folder. Here's an example of a simple Router file: src/Router.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import React from 'react' // Here is where we are importing to the two main components we need from the React Router package. import { Switch , Route } from 'react-router' // Local imports. Import components we built ourselves import Home from './Home' import Dashboard from './components/Dashboard' const Router = () => { return ( // Then we use Switch and Route. Switch acts like a regular JS Switch Statement < Switch > { /* depending on the path in the URL, one of these Routes will be returned and their component rendered */ } < Route exact path = \"/\" component = { Home } /> < Route path = \"/dash\" component = { Dashboard } /> < /Switch> ) } The Switch component always wraps multiple Route s so it is the single parent container this component returns. As we customize the \"Router\" component, keep in mind the Switch component bares an obvious resemblance in appearance and functionality to the switch() { case: } statement we're familiar with in JavaScript . In this way, it's kind of like an if/else for React components but leaner and cleaner. In summary, Switch is telling the application, \"hey, look at all of the paths in this section to see if the current path in the browser matches any of these. If so, return the route that's connected to it.\" The Route then, is a component which specifies a combination of the correct relationship of \"path\" and \"component\". If the URL in the browser matches the path, then the Route sends the application to the correct component. In this case, / dash will load up the Dashboard component. You see the <Route> is the case: statement that says to do this when this is the case. Remember to Import the Components You Want to Use 1 2 3 4 // Then import the components you want to use import Home from './Home' < Route exact path = \"/\" component = { Home } /> This might seem obvious but it's an important piece to remember. Each of the components you want to use in your Router have to be imported so they're available/registered with the Router component. Also, notice that we used the Home component as the default route. If we're using Router we have to create a default case for the <Switch> component to return, because ALL components in React must return something !!!","title":"Creating the Router"},{"location":"module-2/reactRouter/#rendering-what-comes-out-of-the-router","text":"Great, so we've created our Router file. Now what? Let's tell the application to use it! Remember, we created the file but haven't made the other parts of the application aware of it. The very first file of our app, the index.js file is our entry point into the app. Go to it and find the component it's currently using, which is most likely <App /> . We're going to make some renovations. Look below at the default setup of our app. Basic React index.js file 1 2 3 4 5 6 7 8 9 10 11 12 import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; ReactDOM . render ( < App /> , document . getElementById ( 'root' )); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); NOTE: don't worry about the service worker part, it's an API we can learn to use later. Just focus on the steps ahead. As you probably guessed, we have to import things . . .The first (#1) is BrowserRouter . This, aptly named, package navigates the browser where we want it to. The second (#2) thing we have to import is the Router component we just finished building. React index.js file with BrowserRouter & our Router imported 1 2 3 4 5 6 7 8 9 10 11 import React from 'react' ; import ReactDOM from 'react-dom' ; // #1 import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; // #2 import Router from './Router' ; // ...more code below here... NOTE: The order in which packages and components are imported is not important to the app. The order is only important to you and your team, so find a style you like and develop it. Above you see dependencies listed first, styles, then components. Next, or (#3) we have to create a component to return this stuff for us. Let's call it Main and have it return <BrowserRouter> . Then stick our <Router /> component inside of it. This \"sticking\" inside is actually called \"wrapping\". We \"wrap\" the <BrowserRouter> around the <Router> so our entire application is encapsulated by the <BrowserRouter> . Newly created Main Component in the index.js file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // ...more code above here... import Router from './Router' ; // #3 const Main = () => ( // #4 < BrowserRouter > < Router /> < /BrowserRouter> ) ReactDOM . render ( < App /> , document . getElementById ( 'root' )); // ...more code about service worker blah blah below here... The (#5) step is to use the \"wrap\". To do this we'll pass to ReactDOM.render() the Main component we just built. Now our app's index.js file should look like this: Replaced <App /> with <Main /> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import React from 'react' ; import ReactDOM from 'react-dom' ; import { BrowserRouter } from 'react-router-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; import Router from './Router' ; const Main = () => ( < BrowserRouter > < Router /> < /BrowserRouter> ) // #5 ReactDOM . render ( < Main /> , document . getElementById ( 'root' )); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); We call this \"wrapping\" stuff Higher Order Components or HOCs because, just like the Higher Order functions ( .map , .reduce , .filter ) you learned in 211, they take functions as their arguments and sometimes return functions: render takes in main which returns BrowserRouter which returns Router with returns one of the Routes which returns its appropriate component which then returns the JSX so the render can plug it into the DOM inside an element with the id \"root\" . Get it? If not, walk through that again slowly. Draw it out.","title":"Rendering What Comes out of the Router"},{"location":"module-2/reactRouter/#notes-on-this-react-routerbrowserrouter-stuff","text":"Be sure to import { BrowserRouter } from 'react-router-dom' It is key that this { BrowserRouter } wraps our application because it is needed for the communication between our browser and our Router component. Additionally, when we take a look a the React Link component (coming up) we will learn that Link s can only be used inside of a \"router\" which BrowserRouter takes care of for us. Please note: You don't have to understand that right now, just start recognizing the pattern we are using above. Components return components that return components or, more simply, a function returns a function that returns a function. Functional programming! Remember to import Router from './Router' so it can be used in the index.js file. In step 3, we create a small component function called Main (you can call it something else if you like) and we wrap our <Router /> inside the <BrowserRouter> </BrowserRouter> tags so the BrowserRouter component returns it. You may be thinking, \"couldn't we have just done that in the Router file?\". Yes, but this pattern will allow you to eventually add components around the router that you want to see on every page. For example, a Header and Footer component, like you see below: Example of Main Component 1 2 3 4 5 6 7 const Main = () => ( < BrowserRouter > < Header /> < Router /> { /* <-- See? Your different routes can be render here while still keeping the Header and Footer the same */ } < Footer /> < /BrowserRouter> ) But do note that you may see slightly different patterns in other tutorials and that's perfectly fine. While you're learning this, let's stick with this pattern. Step 5 is simply replacing the call to App in ReactDOM.render with the new Main function we just created. Once this step is done you should be able to load up your application and switch between the Home and Dashboard components by typing the corresponding URL in the browser. But of course, typing in that URL is annoying and you're definitely not asked to do that on anyone else's web site. To fix this let's learn how to use the Link part of React Router which is a programmatic way to switch the browser URL.","title":"Notes on this React Router/BrowserRouter stuff:"},{"location":"module-2/reactRouter/#know-your-docs","text":"w3S Docs - Switch Statement React Training Docs - React Router React Router Docs - Quick Start","title":"Know Your Docs"},{"location":"module-3/class-10/","text":"Class 10: Redux, mapDispatchToProps ** Greet, Outline, and Objectify *OBJECTIVE: Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Push Yourself Further Exit Recap, Attendance, and Reminders, 5 mins Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 10"},{"location":"module-3/class-10/#class-10-redux-mapdispatchtoprops","text":"**","title":"Class 10: Redux, mapDispatchToProps"},{"location":"module-3/class-10/#greet-outline-and-objectify","text":"*OBJECTIVE: Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-10/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-10/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-10/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-10/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-10/#push-yourself-further","text":"","title":"Push Yourself Further"},{"location":"module-3/class-10/#exit-recap-attendance-and-reminders-5-mins","text":"Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-9/","text":"Class #: Title ** Greet, Outline, and Objectify *OBJECTIVE: Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student-Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Push Yourself Further Exit Recap, Attendance, and Reminders, 5 mins Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 9"},{"location":"module-3/class-9/#class-title","text":"**","title":"Class #: Title"},{"location":"module-3/class-9/#greet-outline-and-objectify","text":"*OBJECTIVE: Questions for Student-Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-9/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student-Led Discussion, 15 mins"},{"location":"module-3/class-9/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-9/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-9/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-9/#push-yourself-further","text":"","title":"Push Yourself Further"},{"location":"module-3/class-9/#exit-recap-attendance-and-reminders-5-mins","text":"Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/redux-actions/","text":"Redux Actions All you need is the plan, the road map, and the courage to press on to your destination.\u2003\u2014Earl Nightingale Review and Recap Last week we learned how to use a plain object in a state.js file, functions in a reducer.js file and the Redux tools combineReducers and <Provider /> to create a global state for our application that acts as a central data storage, or a single source of truth , for all of our app's components. Then we learned how to the data in in this global state to each component by wrapping them with another component/function with mapStateToProps . This process keeps all components in the app in sync with the same set of data so there is no confusion. But now, we wonder how me might change the global state from a local component. How does a component get access to update a global state? The solution is a function called: mapDispatchToProps . Notice the similarity to mapStateToProps ? Overview We're continuing our learning of Redux because it's a great way to make sure all of our components share the same state. Remember, Redux doesn't actually do anything visually for the user of the application. This is all for the developer right now. Redux is strictly for data management. It will eventually allow you to do cool things like update charts instantaneously when data changes. Remember in your music controller app? If your volume component changed the global state of your app you might be able to create another component at the bottom of the dashboard that represented the amount of volume the user selected in a graph. If you're controlling data with Redux you can keep that data in one place but trigger the alert to your user that \"loud volume may cause hearing loss\" while also updating the chart to represent the level they chose. Again, Redux is a data management system for us developers to do cool things across the application using one source of truth. So any direct benefit to the user comes with the fact that Redux allows us to develop more complex applications. Also, keep this in mind . . . Redux is not completely replacing local state . If you want a component to be able to toggle between two states, for example on/off, you can still use: 1 2 3 4 5 state = { on : true } // ...more code...this.setState({ on: !this.state.on }) In the above code, this component, and only this component, will have access to this.state.on . Redux is for when you want to share a central state data across multiple components. It's important that we are clear on the difference there. See It - ActionCreators & mapDispatchToProps Actions The first thing we need to build so our components can update/mutate state is create something called Redux Actions . Actions are simply JavaScript Objects. They typically have two properties (although you may see others), a type and a value . They look like this: A Redux Action 1 2 3 4 const addCar = { type : 'ADD_CAR' , value : 'Tesla Model Y' } Spelling the value of type in capital letters, like 'ADD_CAR' is a Redux convention. It lets other developers on your application know that you are using Redux. The value of value is whatever you want to update your state with. NOTE: Another common practice is to use the key name payload instead of value for the simple verbalization trickery. \"What is the value of payload ?\" is easier to say than \"What is the value of value ?\" Nevertheless, we'll use value for this lesson... Furthermore, it has become less common to use plain actions (seen above, a simple JS Object). Instead, we build Action Creators . Action creators are simply functions that return an action. That means, its just a JS Function that returns and JS Object. So instead of the syntax above, we change it to: Action Creator function 1 2 3 4 5 6 const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } As you can see, it's just a function that returns an object. But why? Well. . . take a look at the action creator above and notice that it has an argument, newCar . With action creators we can pass options to our action creating functions and have them return different things each time they're called. This is more powerful than plain action objects because it can dynamically respond to user's input. We will be using Action Creators going forward. Finally, the last thing you need to know about actions is that they correspond to a certain piece of the global state. Only you, the developer, get to decide what corresponds to what. So for example, we have an action called ADD_CAR above. It makes sense that we would use this action to update the cars property in state. Remember this example from our last pre-work: Global State - redux/state.js 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] } We want to make actions that make sense for our data model. Since cars is an array, two common operations would be add to and remove a car from the array. So cars might have the following actions: ADD_CAR - push a new car value on to the array. REMOVE_CAR - delete a particular car from the array. Likewise for the user property. It's null right now but it could probably represent an Object or maybe just a plain String. Either way, actions that make sense for this property would be: SET_USER - set which user is signed in right now. UNSET_USER - remove the user at sign-out. Again, the CAPITALIZED_UNDERSCORE naming convention is a Redux convention. You get to name these as you like, so make sure they make sense to you and other developers. Remember, code is NOT what a computer reads. Code is what humans read. Final note about action creators: they all go in a single file called redux/actions.js (inside of the \"redux\" folder) like below. redux/actions.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 export const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } export const setUser = ( newUser ) => { return { type : 'SET_USER' , value : newUser } } export const unsetUser = ( index ) => { return { type : 'UNSET_USER' , value : index } } The next step is to update our Reducer functions to accept and respond to these incoming Action Objects.","title":"Redux Actions"},{"location":"module-3/redux-actions/#redux-actions","text":"All you need is the plan, the road map, and the courage to press on to your destination.\u2003\u2014Earl Nightingale","title":"Redux Actions"},{"location":"module-3/redux-actions/#review-and-recap","text":"Last week we learned how to use a plain object in a state.js file, functions in a reducer.js file and the Redux tools combineReducers and <Provider /> to create a global state for our application that acts as a central data storage, or a single source of truth , for all of our app's components. Then we learned how to the data in in this global state to each component by wrapping them with another component/function with mapStateToProps . This process keeps all components in the app in sync with the same set of data so there is no confusion. But now, we wonder how me might change the global state from a local component. How does a component get access to update a global state? The solution is a function called: mapDispatchToProps . Notice the similarity to mapStateToProps ?","title":"Review and Recap"},{"location":"module-3/redux-actions/#overview","text":"We're continuing our learning of Redux because it's a great way to make sure all of our components share the same state. Remember, Redux doesn't actually do anything visually for the user of the application. This is all for the developer right now. Redux is strictly for data management. It will eventually allow you to do cool things like update charts instantaneously when data changes. Remember in your music controller app? If your volume component changed the global state of your app you might be able to create another component at the bottom of the dashboard that represented the amount of volume the user selected in a graph. If you're controlling data with Redux you can keep that data in one place but trigger the alert to your user that \"loud volume may cause hearing loss\" while also updating the chart to represent the level they chose. Again, Redux is a data management system for us developers to do cool things across the application using one source of truth. So any direct benefit to the user comes with the fact that Redux allows us to develop more complex applications. Also, keep this in mind . . . Redux is not completely replacing local state . If you want a component to be able to toggle between two states, for example on/off, you can still use: 1 2 3 4 5 state = { on : true } // ...more code...this.setState({ on: !this.state.on }) In the above code, this component, and only this component, will have access to this.state.on . Redux is for when you want to share a central state data across multiple components. It's important that we are clear on the difference there.","title":"Overview"},{"location":"module-3/redux-actions/#see-it-actioncreators-mapdispatchtoprops","text":"","title":"See It - ActionCreators &amp; mapDispatchToProps"},{"location":"module-3/redux-actions/#actions","text":"The first thing we need to build so our components can update/mutate state is create something called Redux Actions . Actions are simply JavaScript Objects. They typically have two properties (although you may see others), a type and a value . They look like this: A Redux Action 1 2 3 4 const addCar = { type : 'ADD_CAR' , value : 'Tesla Model Y' } Spelling the value of type in capital letters, like 'ADD_CAR' is a Redux convention. It lets other developers on your application know that you are using Redux. The value of value is whatever you want to update your state with. NOTE: Another common practice is to use the key name payload instead of value for the simple verbalization trickery. \"What is the value of payload ?\" is easier to say than \"What is the value of value ?\" Nevertheless, we'll use value for this lesson... Furthermore, it has become less common to use plain actions (seen above, a simple JS Object). Instead, we build Action Creators . Action creators are simply functions that return an action. That means, its just a JS Function that returns and JS Object. So instead of the syntax above, we change it to: Action Creator function 1 2 3 4 5 6 const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } As you can see, it's just a function that returns an object. But why? Well. . . take a look at the action creator above and notice that it has an argument, newCar . With action creators we can pass options to our action creating functions and have them return different things each time they're called. This is more powerful than plain action objects because it can dynamically respond to user's input. We will be using Action Creators going forward. Finally, the last thing you need to know about actions is that they correspond to a certain piece of the global state. Only you, the developer, get to decide what corresponds to what. So for example, we have an action called ADD_CAR above. It makes sense that we would use this action to update the cars property in state. Remember this example from our last pre-work: Global State - redux/state.js 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] } We want to make actions that make sense for our data model. Since cars is an array, two common operations would be add to and remove a car from the array. So cars might have the following actions: ADD_CAR - push a new car value on to the array. REMOVE_CAR - delete a particular car from the array. Likewise for the user property. It's null right now but it could probably represent an Object or maybe just a plain String. Either way, actions that make sense for this property would be: SET_USER - set which user is signed in right now. UNSET_USER - remove the user at sign-out. Again, the CAPITALIZED_UNDERSCORE naming convention is a Redux convention. You get to name these as you like, so make sure they make sense to you and other developers. Remember, code is NOT what a computer reads. Code is what humans read. Final note about action creators: they all go in a single file called redux/actions.js (inside of the \"redux\" folder) like below. redux/actions.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 export const addCar = ( newCar ) => { return { type : 'ADD_CAR' , value : newCar } } export const removeCar = ( index ) => { return { type : 'REMOVE_CAR' , value : index } } export const setUser = ( newUser ) => { return { type : 'SET_USER' , value : newUser } } export const unsetUser = ( index ) => { return { type : 'UNSET_USER' , value : index } } The next step is to update our Reducer functions to accept and respond to these incoming Action Objects.","title":"Actions"},{"location":"module-3/redux-connect/","text":"Containers, Connect() & mapStateToProps() A Container is simply a higher-order component that's connected to our Redux Store and returns a React Component but provides data from the Store to it first. For organizational sake, we'll create a new folder called containers/ to hold these container component. In the cars example, we've been working on, we used a component called Home to list all of our cars. Let's create a new file with the same name ( Home.js ) in our containers folder and connect it to Redux. Redux works by taking the state variables we want and mapping them to props in our component. So if we want to connect Home to the value of cars from our state.js file, the value will be mapped to a prop that we specify (likely as cars ) and then we will access it in the component by calling props.cars . Redux provides a function for doing that called mapStateToProps and we connect it to our component using the connect function. Let's see an example: containers/Home.js File 1 2 3 4 5 6 7 8 9 10 11 12 import { connect } from 'react-redux' // import the visual React component \"Home\" import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } // wrap the visual React Component \"Home\" with the Redux Container Component Home export default connect ( mapStateToProps )( Home ) We first import the connect function from Redux and our \"dumb\"/visual component . Then we build a mapStateToProps function that builds an object with a key, cars to be set to state.cars . Remember, state.cars is what exists in our state.js file. From there, we can export the Higher-Order Component( HOC ) which will make state.cars (now cars available to our \"dumb\" component, <Home /> as props.cars using the IIFE (Home) . Now we just need to reference it in a couple of places to make full use of it. In our Router.js file where we're used to importing: import Home from '../components/Home' we now import: import Home from '../containers/Home' . This change is how we can start understanding why the term \"dumb component\" was coined. See, a regular React component just returns what it's told to return via its props . But now we're introducing this HOC, which calls the regular React component and provides the props to be rendered. So, in a sort of colloquial jargon, we say a regular React component is a Dumb component and a redux component is a Smart Component/Container . Rude, right? Back in our dumb Home component where we had imported cars.json and did cars.map ... it's now props.cars.map and we no longer need the cars.json file because that data is now in state.js . Additionally, this can now be done on any other component we want and all of them would have access to cars ! You might be thinking . . . we could have just imported cars.json everywhere we wanted to use cars and you're right, but it wouldn't be dynamic . It wouldn't act like state is supposed to act. In this manner, (with Redux), eventually, when we update \"cars\" from one component, all other components that are using the data will be notified automatically. That is the real power of Redux and we will explore that in the next lesson. Review Connect() + Practice It Push Yourself Further Open the sandbox above. Notice the two components ( MyComponent , MySecondComponent ) Notice the way the data is currently passed. That is, if we want two components to have the same data we currently have to define that data on the parent component ( App ) and then pass it to the two components with props: items={items} NOTE: most of the Redux set up has been done for you in this example In index.js import the Provider and the store . (Uncomment line 5 & 6) Wrap the <div className=\"App\"> with the <Provider> and pass the store as a prop named store to the Provider Go to the containers/ folder. In each file, write a mapStateToProps function (it will be the same for both). Remember to connect it and export it Then, go back to index.js and replace the imports at the top so that they reference the containers instead of the components directly. Ex. ../containers/MyComponent . Delete the const items and the passing of props to MyComponent and MySecondComponent Is the app still working? It should work exactly the same as before. Try adding a third item in redux/state.js . Did both components receive the update? If not, reload and rework through these steps again Additional Resources YT, PentaCode - How To Add Redux To Create React App (1/3) Know Your Docs Redux Docs - Getting Started","title":"Redux Connect"},{"location":"module-3/redux-connect/#containers-connect-mapstatetoprops","text":"A Container is simply a higher-order component that's connected to our Redux Store and returns a React Component but provides data from the Store to it first. For organizational sake, we'll create a new folder called containers/ to hold these container component. In the cars example, we've been working on, we used a component called Home to list all of our cars. Let's create a new file with the same name ( Home.js ) in our containers folder and connect it to Redux. Redux works by taking the state variables we want and mapping them to props in our component. So if we want to connect Home to the value of cars from our state.js file, the value will be mapped to a prop that we specify (likely as cars ) and then we will access it in the component by calling props.cars . Redux provides a function for doing that called mapStateToProps and we connect it to our component using the connect function. Let's see an example: containers/Home.js File 1 2 3 4 5 6 7 8 9 10 11 12 import { connect } from 'react-redux' // import the visual React component \"Home\" import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } // wrap the visual React Component \"Home\" with the Redux Container Component Home export default connect ( mapStateToProps )( Home ) We first import the connect function from Redux and our \"dumb\"/visual component . Then we build a mapStateToProps function that builds an object with a key, cars to be set to state.cars . Remember, state.cars is what exists in our state.js file. From there, we can export the Higher-Order Component( HOC ) which will make state.cars (now cars available to our \"dumb\" component, <Home /> as props.cars using the IIFE (Home) . Now we just need to reference it in a couple of places to make full use of it. In our Router.js file where we're used to importing: import Home from '../components/Home' we now import: import Home from '../containers/Home' . This change is how we can start understanding why the term \"dumb component\" was coined. See, a regular React component just returns what it's told to return via its props . But now we're introducing this HOC, which calls the regular React component and provides the props to be rendered. So, in a sort of colloquial jargon, we say a regular React component is a Dumb component and a redux component is a Smart Component/Container . Rude, right? Back in our dumb Home component where we had imported cars.json and did cars.map ... it's now props.cars.map and we no longer need the cars.json file because that data is now in state.js . Additionally, this can now be done on any other component we want and all of them would have access to cars ! You might be thinking . . . we could have just imported cars.json everywhere we wanted to use cars and you're right, but it wouldn't be dynamic . It wouldn't act like state is supposed to act. In this manner, (with Redux), eventually, when we update \"cars\" from one component, all other components that are using the data will be notified automatically. That is the real power of Redux and we will explore that in the next lesson.","title":"Containers, Connect() &amp; mapStateToProps()"},{"location":"module-3/redux-connect/#review-connect-practice-it","text":"","title":"Review Connect() + Practice It"},{"location":"module-3/redux-connect/#push-yourself-further","text":"Open the sandbox above. Notice the two components ( MyComponent , MySecondComponent ) Notice the way the data is currently passed. That is, if we want two components to have the same data we currently have to define that data on the parent component ( App ) and then pass it to the two components with props: items={items} NOTE: most of the Redux set up has been done for you in this example In index.js import the Provider and the store . (Uncomment line 5 & 6) Wrap the <div className=\"App\"> with the <Provider> and pass the store as a prop named store to the Provider Go to the containers/ folder. In each file, write a mapStateToProps function (it will be the same for both). Remember to connect it and export it Then, go back to index.js and replace the imports at the top so that they reference the containers instead of the components directly. Ex. ../containers/MyComponent . Delete the const items and the passing of props to MyComponent and MySecondComponent Is the app still working? It should work exactly the same as before. Try adding a third item in redux/state.js . Did both components receive the update? If not, reload and rework through these steps again","title":"Push Yourself Further"},{"location":"module-3/redux-connect/#additional-resources","text":"YT, PentaCode - How To Add Redux To Create React App (1/3)","title":"Additional Resources"},{"location":"module-3/redux-connect/#know-your-docs","text":"Redux Docs - Getting Started","title":"Know Your Docs"},{"location":"module-3/redux-mapStateToProps/","text":"App State with Redux Try to be a rainbow in someone\u2019s cloud.\u2003\u2014Maya Angelou Review and Recap We've integrated routing into our application and even learned how we can protect some of our routes from being accessed if a user isn't logged in. What if now we need to get the logged-in user's information to be used in any component? That would be very expensive to make a network request( ajax , fetch , or axios ) for every component...every time it loaded. Let's introduce a global state management system called Redux to keep up with an App State so we can store that data. Remember, with a class-based component we have local state : this.state = { /* some key/value pairs */ } . But for a more managing an app's global state , that is, a single source of truth our entire app can access, we'll need to create it in another place. Redux happens to be the gold standard for something like this. Here goes!! Redux: the High Overview What is Redux? This is a definition from the Redux website . Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available. Let's talk about it in more layman's terms and provide some examples. We're used to seeing something like this to build a simple React component that is showing a status (on/off) based on the state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { Component } from 'react' class MyComponent extends Component { state = { on : true } render () { return ( < div > < p > The status is : $ { this . state . on ? 'On' : 'Off' } < /p> < /div> ) } } export default MyComponent What if we make a new component called MySecondComponent : 1 2 3 4 5 6 7 8 9 10 11 12 13 import React , { Component } from 'react' class MySecondComponent extends Component { render () { return ( < div > < p > This is my second component < /p> < /div> ) } } export default MySecondComponent Does MySecondComponent have access to the state ( on ) of the original MyComponent ? Of course not. Normal React state only works within the component in which it's defined. So MySecondComponent doesn't have any idea what state MyComponent is in unless we pass the state down as props , but as you've probably already seen, passing props down, to only pass more props down becomes tedious, ugly, and unmanageable. Like filling a cup to pour into another cup and then to only pour into yet another cup. But we can change that process with Redux. But first. . . why would we want to do that? Well . . . the previous example might be too specific. MySecondComponent and MyComponent might not need to know about each other or each other's state, but what about if instead of on , MyComponent had the user data for the logged-in user? Then MySecondComponent might want to know about it because it may want to access it at some point in the future. We will eventually handle this by moving the state out of MyComponent and into a global Redux state that both components will have access to. Whenever one component changes the state , i.e. user , the other one will know about it. That's the power of Redux! Before we dive into some examples, let's briefly talk about what Redux is doing and what it isn't doing . What is Redux doing? Redux is helping the DEVELOPER structure the app in a way that makes it simpler for cross-component communication. It helps us limit the passing of props to many different components that need the same information. Simply put, Redux helps define a single source of truth that can be shared with all components simultaneously without passing props. What is Redux NOT doing? Redux is not providing any new styling or logic that the end-user is aware of. The site will look exactly the same. The user will see no difference, but the developer will be able to add advanced functionality more rapidly. Redux: Visualize the Global State(App State)","title":"Redux Intro"},{"location":"module-3/redux-mapStateToProps/#app-state-with-redux","text":"Try to be a rainbow in someone\u2019s cloud.\u2003\u2014Maya Angelou","title":"App State with Redux"},{"location":"module-3/redux-mapStateToProps/#review-and-recap","text":"We've integrated routing into our application and even learned how we can protect some of our routes from being accessed if a user isn't logged in. What if now we need to get the logged-in user's information to be used in any component? That would be very expensive to make a network request( ajax , fetch , or axios ) for every component...every time it loaded. Let's introduce a global state management system called Redux to keep up with an App State so we can store that data. Remember, with a class-based component we have local state : this.state = { /* some key/value pairs */ } . But for a more managing an app's global state , that is, a single source of truth our entire app can access, we'll need to create it in another place. Redux happens to be the gold standard for something like this. Here goes!!","title":"Review and Recap"},{"location":"module-3/redux-mapStateToProps/#redux-the-high-overview","text":"","title":"Redux: the High Overview"},{"location":"module-3/redux-mapStateToProps/#what-is-redux","text":"This is a definition from the Redux website . Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available. Let's talk about it in more layman's terms and provide some examples. We're used to seeing something like this to build a simple React component that is showing a status (on/off) based on the state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import React , { Component } from 'react' class MyComponent extends Component { state = { on : true } render () { return ( < div > < p > The status is : $ { this . state . on ? 'On' : 'Off' } < /p> < /div> ) } } export default MyComponent What if we make a new component called MySecondComponent : 1 2 3 4 5 6 7 8 9 10 11 12 13 import React , { Component } from 'react' class MySecondComponent extends Component { render () { return ( < div > < p > This is my second component < /p> < /div> ) } } export default MySecondComponent Does MySecondComponent have access to the state ( on ) of the original MyComponent ? Of course not. Normal React state only works within the component in which it's defined. So MySecondComponent doesn't have any idea what state MyComponent is in unless we pass the state down as props , but as you've probably already seen, passing props down, to only pass more props down becomes tedious, ugly, and unmanageable. Like filling a cup to pour into another cup and then to only pour into yet another cup. But we can change that process with Redux. But first. . . why would we want to do that? Well . . . the previous example might be too specific. MySecondComponent and MyComponent might not need to know about each other or each other's state, but what about if instead of on , MyComponent had the user data for the logged-in user? Then MySecondComponent might want to know about it because it may want to access it at some point in the future. We will eventually handle this by moving the state out of MyComponent and into a global Redux state that both components will have access to. Whenever one component changes the state , i.e. user , the other one will know about it. That's the power of Redux! Before we dive into some examples, let's briefly talk about what Redux is doing and what it isn't doing .","title":"What is Redux?"},{"location":"module-3/redux-mapStateToProps/#what-is-redux-doing","text":"Redux is helping the DEVELOPER structure the app in a way that makes it simpler for cross-component communication. It helps us limit the passing of props to many different components that need the same information. Simply put, Redux helps define a single source of truth that can be shared with all components simultaneously without passing props.","title":"What is Redux doing?"},{"location":"module-3/redux-mapStateToProps/#what-is-redux-not-doing","text":"Redux is not providing any new styling or logic that the end-user is aware of. The site will look exactly the same. The user will see no difference, but the developer will be able to add advanced functionality more rapidly.","title":"What is Redux NOT doing?"},{"location":"module-3/redux-mapStateToProps/#redux-visualize-the-global-stateapp-state","text":"","title":"Redux: Visualize the Global State(App State)"},{"location":"module-3/redux-mdtp/","text":"Redux mapDispatchToProps Ok, it's time to hook up our actions to our components so that they work when we click a button, submit a form, etc. Right? We got this reducer with new case s and an action creator returning an actions object but now we need the components to have the ability to call or dispatch those actions! To do that, we need to introduce a new tool called mapDispatchToProps . It's very much like the mapStateToProps tool we we've already learned to use. Let's look again at our Home Container in the containers/ folder: Our Current containers/Home.js File 1 2 3 4 5 6 7 8 9 10 import { connect } from 'react-redux' import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } export default connect ( mapStateToProps )( Home ) Let's import the addCar & removeCar function from actions.js file and add the mapDispatchToProps function tool so that we can bind/provide these actions to our component: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { connect } from 'react-redux' import Home from '../components/Home' // import the two actions we want to provide to the component import { addCar , removeCar } from './actions' // we've already covered this but notice how this function returns an object with the key `cars` which is the name of the `prop` we use in the component: `props.cars` const mapStateToProps = ( state ) => { return { cars : state . cars } } // this function ALSO returns an Object with keys: `addCar` and `removeCar`...these will be accessed through `props` in the component as `props.addCar` and `props.??` Can you guess? const mapDispatchToProps = ( dispatch ) => { // return an object with keys that represent the `props` you'll want to use in the component. return { // we've passed in a parameter called `dispatch` which is just a name Redux's `connect` function is looking for. Then we use that `dispatch` function to create a value for each of the keys, see that? addCar : ( car ) => dispatch ( addCar ( car )), // we pass in the value to the anonymous function which then calls the `dispatch` function who then calls the actions creator we want it to use and gives it the value: `car` or `index`, in this case. removeCar : ( index ) => dispatch ( removeCar ( index )) } } The mapDispatchToProps ( MDTP for short) function accepts a parameter called dispatch . Remember to always include it there. Then the MDTP function returns an object with keys that match the prop names you want to use in the \"dumb\" component. The value of each of these keys will be a function that returns/calls the dispatch function. Since you've already imported the actions you need( { addCar, removeCar } from './actions' ) you can call them inside the dispatch invocation and pass to it the value it will need to carry out it's action ( car or index ). After you add the mapDispatchToProps to the connect() function, your \"dumb\" component will have access to the actions you've already built in actions.js through the prop names: props.addCar and props.removeCar (see below) . When these props are called, your reducers will be called and evaluate which action was created and return the new state back to the \"dumb\" component as props via mapStateToProps . It all comes full circle! Connect MDTP Now, all that's left to do is connect this function to the component. It actually just comes right after the mapStateToProps argument which means the whole container file looks like this: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } // pass in the two functions as arguments to the `connect` function. export default connect ( mapStateToProps , mapDispatchToProps )( Home ) Now the Home component has a prop called cars to receive the cars data from state and two props called addCar & removeCar which update the global state by adding the new car or the index to delete a car. They can be accessed anywhere in the component by referencing props.cars , props.addCar , or props.removeCar . The way it works: when we pass these functions to the connect function then immediately invoke the Home function we are creating a context around Home that gives it access to the two objects returned from each of the MSTP and MDTP functions. The Events in Order At app start up, the HomeContainer is called --> This will call the connect function which calls the MSTP & the MDTP functions who create objects with keys that point to the action functions in actions.js file --> Then the \"dumb\" component function is called and created within this context so it has access to the state data and actions via props --> From the \"dumb\" component, a form submit will call props.addCar() with a value: \"2008 Toyota Prius\" --> Then the anonymous function, sitting at the addCar property on the object returned from the MDTP function, is called with the argument: \"2008 Toyota Prius\" --> This calls the dispatch() function --> Which then calls the addCar() action and passes the argument: \"2008 Toyota Prius\" --> This fires the addCar() Action Creator function --> Which returns an Action Object that will look like: {type: ADD_CAR, value: \"2008 Toyota Prius\"} to the reducer: cars() --> The cars() reducer stop at the case: ADD_CAR and then creates a new array object using the current state plus the value : \"2008 Toyota Prius\" --> Once state is updated the connect function will be called which calls the MSTP function who provides the new state to the \"dumb\" component --> And the user sees the update on the screen. --> Repeat. --> Repeat. --> Repeat. --> MSTP & MDTP are just abbreviations for the functions mapStateToProps and mapDispatchToProps Summary We create Redux Action Creators (again, these are just plain JS functions) that return Actions (just a plain ol' JS object) with the properties: type and value . Those Action objects are passed to the Reducers (just plain switch/case statements) that do and return different things based on action.type case. The container uses Redux's tools: mapStateToProps , mapDispatchToProps , and connect to give the component access to the global state properties and action creators to change that state via props . We tie all of that together in the container file so that the \"dumb\" component only manages visual representation presentation to the user. This follows right along with the Single Responsibility Principle of SOLID programming.","title":"Redux MDTP"},{"location":"module-3/redux-mdtp/#redux-mapdispatchtoprops","text":"Ok, it's time to hook up our actions to our components so that they work when we click a button, submit a form, etc. Right? We got this reducer with new case s and an action creator returning an actions object but now we need the components to have the ability to call or dispatch those actions! To do that, we need to introduce a new tool called mapDispatchToProps . It's very much like the mapStateToProps tool we we've already learned to use. Let's look again at our Home Container in the containers/ folder: Our Current containers/Home.js File 1 2 3 4 5 6 7 8 9 10 import { connect } from 'react-redux' import Home from '../components/Home' const mapStateToProps = ( state ) => { return { cars : state . cars } } export default connect ( mapStateToProps )( Home ) Let's import the addCar & removeCar function from actions.js file and add the mapDispatchToProps function tool so that we can bind/provide these actions to our component: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { connect } from 'react-redux' import Home from '../components/Home' // import the two actions we want to provide to the component import { addCar , removeCar } from './actions' // we've already covered this but notice how this function returns an object with the key `cars` which is the name of the `prop` we use in the component: `props.cars` const mapStateToProps = ( state ) => { return { cars : state . cars } } // this function ALSO returns an Object with keys: `addCar` and `removeCar`...these will be accessed through `props` in the component as `props.addCar` and `props.??` Can you guess? const mapDispatchToProps = ( dispatch ) => { // return an object with keys that represent the `props` you'll want to use in the component. return { // we've passed in a parameter called `dispatch` which is just a name Redux's `connect` function is looking for. Then we use that `dispatch` function to create a value for each of the keys, see that? addCar : ( car ) => dispatch ( addCar ( car )), // we pass in the value to the anonymous function which then calls the `dispatch` function who then calls the actions creator we want it to use and gives it the value: `car` or `index`, in this case. removeCar : ( index ) => dispatch ( removeCar ( index )) } } The mapDispatchToProps ( MDTP for short) function accepts a parameter called dispatch . Remember to always include it there. Then the MDTP function returns an object with keys that match the prop names you want to use in the \"dumb\" component. The value of each of these keys will be a function that returns/calls the dispatch function. Since you've already imported the actions you need( { addCar, removeCar } from './actions' ) you can call them inside the dispatch invocation and pass to it the value it will need to carry out it's action ( car or index ). After you add the mapDispatchToProps to the connect() function, your \"dumb\" component will have access to the actions you've already built in actions.js through the prop names: props.addCar and props.removeCar (see below) . When these props are called, your reducers will be called and evaluate which action was created and return the new state back to the \"dumb\" component as props via mapStateToProps . It all comes full circle!","title":"Redux mapDispatchToProps"},{"location":"module-3/redux-mdtp/#connect-mdtp","text":"Now, all that's left to do is connect this function to the component. It actually just comes right after the mapStateToProps argument which means the whole container file looks like this: containers/Home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { connect } from 'react-redux' import Home from '../components/Home' import { addCar , removeCar } from './actions' const mapStateToProps = ( state ) => { return { cars : state . cars } } const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } // pass in the two functions as arguments to the `connect` function. export default connect ( mapStateToProps , mapDispatchToProps )( Home ) Now the Home component has a prop called cars to receive the cars data from state and two props called addCar & removeCar which update the global state by adding the new car or the index to delete a car. They can be accessed anywhere in the component by referencing props.cars , props.addCar , or props.removeCar . The way it works: when we pass these functions to the connect function then immediately invoke the Home function we are creating a context around Home that gives it access to the two objects returned from each of the MSTP and MDTP functions.","title":"Connect MDTP"},{"location":"module-3/redux-mdtp/#the-events-in-order","text":"At app start up, the HomeContainer is called --> This will call the connect function which calls the MSTP & the MDTP functions who create objects with keys that point to the action functions in actions.js file --> Then the \"dumb\" component function is called and created within this context so it has access to the state data and actions via props --> From the \"dumb\" component, a form submit will call props.addCar() with a value: \"2008 Toyota Prius\" --> Then the anonymous function, sitting at the addCar property on the object returned from the MDTP function, is called with the argument: \"2008 Toyota Prius\" --> This calls the dispatch() function --> Which then calls the addCar() action and passes the argument: \"2008 Toyota Prius\" --> This fires the addCar() Action Creator function --> Which returns an Action Object that will look like: {type: ADD_CAR, value: \"2008 Toyota Prius\"} to the reducer: cars() --> The cars() reducer stop at the case: ADD_CAR and then creates a new array object using the current state plus the value : \"2008 Toyota Prius\" --> Once state is updated the connect function will be called which calls the MSTP function who provides the new state to the \"dumb\" component --> And the user sees the update on the screen. --> Repeat. --> Repeat. --> Repeat. --> MSTP & MDTP are just abbreviations for the functions mapStateToProps and mapDispatchToProps","title":"The Events in Order"},{"location":"module-3/redux-mdtp/#summary","text":"We create Redux Action Creators (again, these are just plain JS functions) that return Actions (just a plain ol' JS object) with the properties: type and value . Those Action objects are passed to the Reducers (just plain switch/case statements) that do and return different things based on action.type case. The container uses Redux's tools: mapStateToProps , mapDispatchToProps , and connect to give the component access to the global state properties and action creators to change that state via props . We tie all of that together in the container file so that the \"dumb\" component only manages visual representation presentation to the user. This follows right along with the Single Responsibility Principle of SOLID programming.","title":"Summary"},{"location":"module-3/redux-reducers/","text":"Update Reducers Now that we have our actions it's time to update the functions in our reducers.js file. Actions communicate directly with the reducer responsible for a certain piece of state. That's the only way your Redux state gets updated. Each reducer is responsible for a specific piece of the state; it returns it in mapStateToProps and handles updates when called by mapDispatchToProp and given an Action to carry out. Again let's look at examples. Reducers as If/Else Statements Before looking at these reducers assume the action creators we defined above are the actions being imported into this reducer file. When we started, the reducer file looked like this: Our current redux/reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) We're only focused on the cars part of these reducers right now so we'll update that reducer first. As be rebuild this reducer, think of them as a large if/else statement, that is determining what it's supposed to do, based on the type : passed through it from the action creator. If action.type === ADD_CAR then the switch statement should stop at the ADD_CAR case and add the car to state . If it gets REMOVE_CAR it will stop there and remove the car from state. And the default case is to return the current state which is what we're already doing and passing to mapStateToProps . Let's add those first two cases into the cars reducer: Updated redux/reducers.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = [], action ) => { switch ( action . type ) { case 'ADD_CAR' : return [ ... state , action . value ] case 'REMOVE_CAR' : const newState = [ ... state ] newState . splice ( action . value , 1 ) return newState default : return state } } export default combineReducers ({ user , cars }) with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // you know this, import the `combineReducers` tool from Redux import { combineReducers } from 'redux' // same as before, no changes made; just return the state so it can be `map`ped to `props` const user = ( state = null ) => state // still a reducers, which is just a JS function but with a second parameter now: `action` const cars = ( state = [], action ) => { // create `switch` statement based on the `type` property switch ( action . type ) { case 'ADD_CAR' : // if the `type` is `ADD_CAR` then create a new array by spreading (...) `state` into it // then add the `value` that came in with the action object return [ ... state , action . value ] case 'REMOVE_CAR' : // if `type` is `REMOVE_CAR` then create a copy of the array by spreading `state` into it const newState = [ ... state ] // then `splice` our the car we want to remove but not directly on `state` instead using the copy we made newState . splice ( action . value , 1 ) // finally, return the copy so it becomes the \"new\" `state` return newState default : // if there is no `type` to be evaluated just return `state` as is so it can be used my `mapStateToProps` as normal. return state } } // make these reducers available to the rest of the app with the `combineReducers` tool export default combineReducers ({ user , cars }) Notice how we added the action argument as the second parameter to the cars reducer (which is just a Function). It represents the action that we're taking on this state and will have the two keys type and value in it. In the switch statement, every case represents a possible type of action . LOL, get it? \"type of action\"? We then program the cars reducer to perform some operation on the state that corresponds with the action.type matches. So the cars reducer is saying, if action.type === \"ADD_CAR\" add the new car ( action.value ) to the end of the state which represents the cars array in the state.js file (seen near the top of this page) and return the new state. If action.type === \"REMOVE_CAR\" resolves to true, then we want to splice the array based on the index we passed in with action.value . A very important note about handling logic in the reducers: You always return a copy of the state. Not mutating the state itself. That's why we didn't write state.push(action.value) underneath the \"ADD_CAR\" case \u2014 because push doesn't return a new object, IT MUTATES THE ARRAY! Using the spread operator [ ... ] returns a COPY of the array. You should be familiar with these JavaScript operations from your 211 course. If not, spend some time brushing up on it. We do this because of Pass By Reference issues that could/will occur if multiple things are updating the state at one time. Don't worry about that too much, just understand that we ALWAYS pass a new object back from the reducer so Redux handles the actual updating of state.js and not our reducer functions. Summary Each action type needs to have a corresponding case in the reducer otherwise the action will not be able to be carried out when dispatched . Next up, we connect our actions to the \"dumb\" component's props with mapDispatchToProps (MDTP).","title":"Redux Reducers"},{"location":"module-3/redux-reducers/#update-reducers","text":"Now that we have our actions it's time to update the functions in our reducers.js file. Actions communicate directly with the reducer responsible for a certain piece of state. That's the only way your Redux state gets updated. Each reducer is responsible for a specific piece of the state; it returns it in mapStateToProps and handles updates when called by mapDispatchToProp and given an Action to carry out. Again let's look at examples.","title":"Update Reducers"},{"location":"module-3/redux-reducers/#reducers-as-ifelse-statements","text":"Before looking at these reducers assume the action creators we defined above are the actions being imported into this reducer file. When we started, the reducer file looked like this: Our current redux/reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) We're only focused on the cars part of these reducers right now so we'll update that reducer first. As be rebuild this reducer, think of them as a large if/else statement, that is determining what it's supposed to do, based on the type : passed through it from the action creator. If action.type === ADD_CAR then the switch statement should stop at the ADD_CAR case and add the car to state . If it gets REMOVE_CAR it will stop there and remove the car from state. And the default case is to return the current state which is what we're already doing and passing to mapStateToProps . Let's add those first two cases into the cars reducer: Updated redux/reducers.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = [], action ) => { switch ( action . type ) { case 'ADD_CAR' : return [ ... state , action . value ] case 'REMOVE_CAR' : const newState = [ ... state ] newState . splice ( action . value , 1 ) return newState default : return state } } export default combineReducers ({ user , cars }) with comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // you know this, import the `combineReducers` tool from Redux import { combineReducers } from 'redux' // same as before, no changes made; just return the state so it can be `map`ped to `props` const user = ( state = null ) => state // still a reducers, which is just a JS function but with a second parameter now: `action` const cars = ( state = [], action ) => { // create `switch` statement based on the `type` property switch ( action . type ) { case 'ADD_CAR' : // if the `type` is `ADD_CAR` then create a new array by spreading (...) `state` into it // then add the `value` that came in with the action object return [ ... state , action . value ] case 'REMOVE_CAR' : // if `type` is `REMOVE_CAR` then create a copy of the array by spreading `state` into it const newState = [ ... state ] // then `splice` our the car we want to remove but not directly on `state` instead using the copy we made newState . splice ( action . value , 1 ) // finally, return the copy so it becomes the \"new\" `state` return newState default : // if there is no `type` to be evaluated just return `state` as is so it can be used my `mapStateToProps` as normal. return state } } // make these reducers available to the rest of the app with the `combineReducers` tool export default combineReducers ({ user , cars }) Notice how we added the action argument as the second parameter to the cars reducer (which is just a Function). It represents the action that we're taking on this state and will have the two keys type and value in it. In the switch statement, every case represents a possible type of action . LOL, get it? \"type of action\"? We then program the cars reducer to perform some operation on the state that corresponds with the action.type matches. So the cars reducer is saying, if action.type === \"ADD_CAR\" add the new car ( action.value ) to the end of the state which represents the cars array in the state.js file (seen near the top of this page) and return the new state. If action.type === \"REMOVE_CAR\" resolves to true, then we want to splice the array based on the index we passed in with action.value . A very important note about handling logic in the reducers: You always return a copy of the state. Not mutating the state itself. That's why we didn't write state.push(action.value) underneath the \"ADD_CAR\" case \u2014 because push doesn't return a new object, IT MUTATES THE ARRAY! Using the spread operator [ ... ] returns a COPY of the array. You should be familiar with these JavaScript operations from your 211 course. If not, spend some time brushing up on it. We do this because of Pass By Reference issues that could/will occur if multiple things are updating the state at one time. Don't worry about that too much, just understand that we ALWAYS pass a new object back from the reducer so Redux handles the actual updating of state.js and not our reducer functions.","title":"Reducers as If/Else Statements"},{"location":"module-3/redux-reducers/#summary","text":"Each action type needs to have a corresponding case in the reducer otherwise the action will not be able to be carried out when dispatched . Next up, we connect our actions to the \"dumb\" component's props with mapDispatchToProps (MDTP).","title":"Summary"},{"location":"module-3/redux-theSetup/","text":"Redux: the Set Up Ok. It's time to discuss how Redux works and how to set it up for any project. Yes, the setup is a bit tedious but the good thing is you only have to do it once per app. In the video below we breakdown the 4 major steps of setting up global state with Redux. You're asked to create a new repo but creating a new branch on your cars repo will be just fine: Redux: The First Four Steps Create new repo or open your Cars assignment from a last class and create another branch called implement-redux-global-state Install Packages - The first thing we need to do is install two more npm packages into your project. They are redux and react-redux . To do so, run the following command: npm i redux react-redux . Setting Up State, Reducers, Store, And Provider Setup the State Object - Next, we create a redux folder underneath/inside src/ and add a state.js file to it. Inside that file is where we will put the default values for everything we want our entire application to be able to access in one big JavaScript object. We will also make sure it is exported. For example, a state.js file for our cars application will look like this: state.js File 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] }; We'll keep it fairly simple for now with just two properties: user and cars . Build a Reducer - A reducer is a function that returns a representation of a specific piece of the state. Think of the reducer functions as a reducing valve . It reduces all of the state object down to smaller, very particular pieces of data so it can be easily consumed in any part of your application. Let's say you have an array of dogs and an array of cats but you only want the dog data in one component and the cat data in another but both data sets in a third component. We can do this easily by building two reducers: one for cats and one for dogs . These functions will REDUCE the state object {dogs : [ ... ], cats: [ ... ]} into two smaller bits of data: dogs: [ ... ] & cats: [ ... ] . See, the reducer functions reduces the larger state object into smaller much easier to use sets of data. To start, we need to create a reducers.js file underneath/inside the redux folder to tell Redux what state to send back to the application. This file will contain a function for each of the keys/value pairs of your state. If our state has two properties, user and cars we need two functions called user and cars that each take a default parameter named state = [] or state = null . We use a default parameter because reducers must never return undefined . For now, the functions will only return state , we'll change this tomorrow when we added actions to change state . Until then.... ...let's bring-in/import another function from Redux called, combineReducer , that, as you might expect, combines your reducers into one usable reducer object. NOTE: This by the way is creating an object-thing with keys to methods that are pointing to the value of your reducer functions. ...this is mostly unimportant to remember unless it helps you visualize what's going on here. At the bottom of the file we will export the combined reducers. NOTE: Don't worry too much about this step now. It's necessary for the setup of Redux but we'll talk about it more in the next class because it's used for mutating the global state. In this lesson, we are just learning how to read the global state. Anyway, based on our state.js file our reducers.js file will look like this: reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) Create the Store - The next part is creating the Redux store . The \"store\" is our global application state. We will eventually connect it to the top of our application and that top component, <App/> or <Main /> , and everything underneath it will have access to the \"store\". A \"store\" is created using the state.js file we just created and some additional Redux components. We will create a store.js file underneath/inside in the redux/ folder and it will look like this: store.js File 1 2 3 4 5 import { createStore } from 'redux' import reducers from './reducers' import state from './state' export default createStore ( reducers , state ) Simply put, we use the createStore method from redux to create a store with the given reducers and state . Wrap the Provider around the app - To tie in the store , state , and reducers together with our React app(function) we need to import and use the { Provider } component from 'react-redux' and provide our store in the App.js file. To do all of this, we will then \"wrap\" our application with the Provider component and pass the store as a prop called store . App.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // import BrowserRouter and Router and Navigation from '../pathnameHere' import { Provider } from 'react-redux' import store from './store' function App () { return ( < Provider store = { store } > < BrowserRouter > < Navigation /> < Router /> < /BrowserRouter> < /Provider> ); } Note the BrowserRouter , Navigation and Router from last week. Setup Complete!!! Ok . . . that sounds like a lot of set up (and it is) but we only have to do this once . Whenever we add new properties to your global state we simply need to put the new key/value in the correct places - which we will practice in the coming homework . For now, it's time to talk about our components being able to read from this global state we've so deftly created.","title":"Redux Setup"},{"location":"module-3/redux-theSetup/#redux-the-set-up","text":"Ok. It's time to discuss how Redux works and how to set it up for any project. Yes, the setup is a bit tedious but the good thing is you only have to do it once per app. In the video below we breakdown the 4 major steps of setting up global state with Redux. You're asked to create a new repo but creating a new branch on your cars repo will be just fine:","title":"Redux: the Set Up"},{"location":"module-3/redux-theSetup/#redux-the-first-four-steps","text":"Create new repo or open your Cars assignment from a last class and create another branch called implement-redux-global-state Install Packages - The first thing we need to do is install two more npm packages into your project. They are redux and react-redux . To do so, run the following command: npm i redux react-redux .","title":"Redux: The First Four Steps"},{"location":"module-3/redux-theSetup/#setting-up-state-reducers-store-and-provider","text":"Setup the State Object - Next, we create a redux folder underneath/inside src/ and add a state.js file to it. Inside that file is where we will put the default values for everything we want our entire application to be able to access in one big JavaScript object. We will also make sure it is exported. For example, a state.js file for our cars application will look like this: state.js File 1 2 3 4 export default { user : null , cars : [ '1' , '2' , '3' , '4' ] }; We'll keep it fairly simple for now with just two properties: user and cars . Build a Reducer - A reducer is a function that returns a representation of a specific piece of the state. Think of the reducer functions as a reducing valve . It reduces all of the state object down to smaller, very particular pieces of data so it can be easily consumed in any part of your application. Let's say you have an array of dogs and an array of cats but you only want the dog data in one component and the cat data in another but both data sets in a third component. We can do this easily by building two reducers: one for cats and one for dogs . These functions will REDUCE the state object {dogs : [ ... ], cats: [ ... ]} into two smaller bits of data: dogs: [ ... ] & cats: [ ... ] . See, the reducer functions reduces the larger state object into smaller much easier to use sets of data. To start, we need to create a reducers.js file underneath/inside the redux folder to tell Redux what state to send back to the application. This file will contain a function for each of the keys/value pairs of your state. If our state has two properties, user and cars we need two functions called user and cars that each take a default parameter named state = [] or state = null . We use a default parameter because reducers must never return undefined . For now, the functions will only return state , we'll change this tomorrow when we added actions to change state . Until then.... ...let's bring-in/import another function from Redux called, combineReducer , that, as you might expect, combines your reducers into one usable reducer object. NOTE: This by the way is creating an object-thing with keys to methods that are pointing to the value of your reducer functions. ...this is mostly unimportant to remember unless it helps you visualize what's going on here. At the bottom of the file we will export the combined reducers. NOTE: Don't worry too much about this step now. It's necessary for the setup of Redux but we'll talk about it more in the next class because it's used for mutating the global state. In this lesson, we are just learning how to read the global state. Anyway, based on our state.js file our reducers.js file will look like this: reducers.js File 1 2 3 4 5 6 7 import { combineReducers } from 'redux' const user = ( state = null ) => state const cars = ( state = []) => state export default combineReducers ({ user , cars }) Create the Store - The next part is creating the Redux store . The \"store\" is our global application state. We will eventually connect it to the top of our application and that top component, <App/> or <Main /> , and everything underneath it will have access to the \"store\". A \"store\" is created using the state.js file we just created and some additional Redux components. We will create a store.js file underneath/inside in the redux/ folder and it will look like this: store.js File 1 2 3 4 5 import { createStore } from 'redux' import reducers from './reducers' import state from './state' export default createStore ( reducers , state ) Simply put, we use the createStore method from redux to create a store with the given reducers and state . Wrap the Provider around the app - To tie in the store , state , and reducers together with our React app(function) we need to import and use the { Provider } component from 'react-redux' and provide our store in the App.js file. To do all of this, we will then \"wrap\" our application with the Provider component and pass the store as a prop called store . App.js File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // import BrowserRouter and Router and Navigation from '../pathnameHere' import { Provider } from 'react-redux' import store from './store' function App () { return ( < Provider store = { store } > < BrowserRouter > < Navigation /> < Router /> < /BrowserRouter> < /Provider> ); } Note the BrowserRouter , Navigation and Router from last week. Setup Complete!!! Ok . . . that sounds like a lot of set up (and it is) but we only have to do this once . Whenever we add new properties to your global state we simply need to put the new key/value in the correct places - which we will practice in the coming homework . For now, it's time to talk about our components being able to read from this global state we've so deftly created.","title":"Setting Up State, Reducers, Store, And Provider"},{"location":"module-3/redux-usingActions/","text":"Using Action Creators + Challenge Practice It Open the sandbox above. Take a look around and see the file setup that we currently have. Notice that Redux files have been completely set up for you. Your job is to add actions, update the reducer and add the mapDispatchToProps function to the connect . Just like what you've just finished learning... Create an actions.js file underneath the \"redux\" folder. Inside this file, export a function called addUser with a type property: \"ADD_USER\" and a value property that points to the parameter: user . It should look like this: 1 2 3 4 5 6 export const addUser = user => { return { type : \"ADD_USER\" , value : user } } Go to the reducers.js file. Update the reducer with a switch/case statement. It should add a user to the array if the type is \"ADD_USER\" . On the default option, simply return state . Go to the UserList CONTAINER and import your action addUser at the top of the file. Now create a mapDispatchToProps function that returns and object with a property called addUser which points to the value of the addUser action creator you just imported. Don't forget to wrap it in dispatch() . Once that is set up, go to the UserList COMPONENT and add an onClick method to the button. It should reference props.addUser and it should send along the newUser variable like this: ( ) => props.addUser(newUser) Click the button. See how the new user gets added to the list? Additionally, see how every time a new user is added, the UserCount component automatically gets updated and knows how many users exist in the UserList component? We are starting to see some of the power of Redux. Know Your Docs Redux Docs - Getting Started Additional Resources YT, thenewboston - Actions and Action Creators Article, linuk@Medium - Pass By Reference Article, severinperez@Medium - Single Responsibility Principle Wikipedia, SOLID Programming Redux Docs - bindActionCreators() Optional, bindActionCreators If you're feeling confident and comfortable with this process, you may use the bindActionCreators method from redux to simplify your code a little bit. But this is very optional!! containers/Home.js using bindActionCreators 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return bindActionCreators ({ addCar , removeCar }, dispatch ) } export default connect ( mapStateToProps , mapDispatchToProps )( Home ) containers/Home.js as before 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } export default connect ( mapStateToProps , mapDispatchToProps )( Home )","title":"Redux Using Actions"},{"location":"module-3/redux-usingActions/#using-action-creators-challenge","text":"","title":"Using Action Creators + Challenge"},{"location":"module-3/redux-usingActions/#practice-it","text":"Open the sandbox above. Take a look around and see the file setup that we currently have. Notice that Redux files have been completely set up for you. Your job is to add actions, update the reducer and add the mapDispatchToProps function to the connect . Just like what you've just finished learning... Create an actions.js file underneath the \"redux\" folder. Inside this file, export a function called addUser with a type property: \"ADD_USER\" and a value property that points to the parameter: user . It should look like this: 1 2 3 4 5 6 export const addUser = user => { return { type : \"ADD_USER\" , value : user } } Go to the reducers.js file. Update the reducer with a switch/case statement. It should add a user to the array if the type is \"ADD_USER\" . On the default option, simply return state . Go to the UserList CONTAINER and import your action addUser at the top of the file. Now create a mapDispatchToProps function that returns and object with a property called addUser which points to the value of the addUser action creator you just imported. Don't forget to wrap it in dispatch() . Once that is set up, go to the UserList COMPONENT and add an onClick method to the button. It should reference props.addUser and it should send along the newUser variable like this: ( ) => props.addUser(newUser) Click the button. See how the new user gets added to the list? Additionally, see how every time a new user is added, the UserCount component automatically gets updated and knows how many users exist in the UserList component? We are starting to see some of the power of Redux.","title":"Practice It"},{"location":"module-3/redux-usingActions/#know-your-docs","text":"Redux Docs - Getting Started","title":"Know Your Docs"},{"location":"module-3/redux-usingActions/#additional-resources","text":"YT, thenewboston - Actions and Action Creators Article, linuk@Medium - Pass By Reference Article, severinperez@Medium - Single Responsibility Principle Wikipedia, SOLID Programming Redux Docs - bindActionCreators()","title":"Additional Resources"},{"location":"module-3/redux-usingActions/#optional-bindactioncreators","text":"If you're feeling confident and comfortable with this process, you may use the bindActionCreators method from redux to simplify your code a little bit. But this is very optional!! containers/Home.js using bindActionCreators 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return bindActionCreators ({ addCar , removeCar }, dispatch ) } export default connect ( mapStateToProps , mapDispatchToProps )( Home ) containers/Home.js as before 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { connect } from 'react-redux' import Home from '../components/Home' // import bindActionCreators tool to be able to use it import { bindActionCreators } from 'redux' import { addCar , removeCar } from './actions' //...code removed for simplicity... //...MSTP function here... const mapDispatchToProps = ( dispatch ) => { return { addCar : ( car ) => dispatch ( addCar ( car )), removeCar : ( index ) => dispatch ( removeCar ( index )) } } export default connect ( mapStateToProps , mapDispatchToProps )( Home )","title":"Optional, bindActionCreators"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#see-it","text":"","title":"See It"},{"location":"preCourse/setupInstructions/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"preCourse/setupInstructions/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"preCourse/submittingHomework/","text":"Submitting Coding Homework Create Your Development Folder For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in. Create a Repo for Each Assignment Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future. Move Your Project Files For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo. Push to GitHub You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again. Turn in Your Assignment Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Submitting Homework"},{"location":"preCourse/submittingHomework/#submitting-coding-homework","text":"","title":"Submitting Coding Homework"},{"location":"preCourse/submittingHomework/#create-your-development-folder","text":"For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in.","title":"Create Your Development Folder"},{"location":"preCourse/submittingHomework/#create-a-repo-for-each-assignment","text":"Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future.","title":"Create a Repo for Each Assignment"},{"location":"preCourse/submittingHomework/#move-your-project-files","text":"For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo.","title":"Move Your Project Files"},{"location":"preCourse/submittingHomework/#push-to-github","text":"You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again.","title":"Push to GitHub"},{"location":"preCourse/submittingHomework/#turn-in-your-assignment","text":"Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Turn in Your Assignment"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Succeed in this Course"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"}]}