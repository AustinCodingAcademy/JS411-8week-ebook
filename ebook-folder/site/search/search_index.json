{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS411-Front-End Apps with React Objective Statement By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class. To Graduate the Full-Stack Program A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website. To Present at Graduation To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code ) How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js411-front-end-apps-with-react","text":"","title":"Welcome to JS411-Front-End Apps with React"},{"location":"#objective-statement","text":"By the end of the 411 course, students will have built a front-end app with React that uses the database and server built in JS311 to demonstrate their understanding of this technology for their graduation presentation. Coupling their back-end server with their front-end app to complete their full-stack web app Capstone Project. While this course will incorporate the skills learned in 211 and 311, the main focus is for students to learn a particular library, React, for building dynamic front-end web apps. Students will use the last two weeks of this course to complete their Capstone Project app with the guidance of their instructor.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class.","title":"To Pass This Class (and all others)"},{"location":"#to-graduate-the-full-stack-program","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"To Graduate the Full-Stack Program"},{"location":"#to-present-at-graduation","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"To Present at Graduation"},{"location":"#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 - Prompt 101 [ ] Class 4 - Prompt 102 [ ] Class 6 - Prompt 103 [ ] Class 8 - Prompt 104 [ ] Class 10 - Prompt 105 [ ] Class 12 - Prompt 106 [ ] Class 14 - Prompt 107 [ ] Class 16 - Prompt 108 [ ]","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2-prompt-101","text":"[ ]","title":"Class 2 - Prompt 101"},{"location":"additionalResources/blogPrompts/#class-4-prompt-102","text":"[ ]","title":"Class 4 - Prompt 102"},{"location":"additionalResources/blogPrompts/#class-6-prompt-103","text":"[ ]","title":"Class 6 - Prompt 103"},{"location":"additionalResources/blogPrompts/#class-8-prompt-104","text":"[ ]","title":"Class 8 - Prompt 104"},{"location":"additionalResources/blogPrompts/#class-10-prompt-105","text":"[ ]","title":"Class 10 - Prompt 105"},{"location":"additionalResources/blogPrompts/#class-12-prompt-106","text":"[ ]","title":"Class 12 - Prompt 106"},{"location":"additionalResources/blogPrompts/#class-14-prompt-107","text":"[ ]","title":"Class 14 - Prompt 107"},{"location":"additionalResources/blogPrompts/#class-16-prompt-108","text":"[ ]","title":"Class 16 - Prompt 108"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt 1: Title - description Class 2 Prompt 1: Title - description Class 3 Prompt 1: Title - description Class 4 Prompt 1: Title - description Class 5 Prompt 1: Title - description Class 6 Prompt 1: Title - description Class 7 Prompt 1: Title - description Class 8 Prompt 1: Title - description Class 9 Prompt 1: Title - description Class 10 Prompt 1: Title - description Class 11 Prompt 1: Title - description Class 12 Prompt 1: Title - description Class 13 Prompt 1: Title - description Class 14 Prompt 1: Title - description Class 15 Prompt 1: Title - description Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: Title - description","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: Title - description","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: Title - description","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: Title - description","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Title - description","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Title - description","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Title - description","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Title - description","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Title - description","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Title - description","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: Title - description","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Title - description","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Title - description","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Title - description","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - description","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo Daily Student Presentations","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations_1","text":"","title":"Daily Student Presentations"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Intro to React What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#intro-to-react","text":"What is React? What problems does React solve? How many jobs have you found that use React? What are props? What does export and import do and mean? What does this line do: import React from 'react'; ? How does it use scope ? What is state? What's that mean? How it is applied in a general way? Why do we need to manage state? What's component state? What's app state? Why is state so important and useful for creating a dynamic front-end app? Why does it make it easier for us developers to create interactive apps? What's npx ? How do we use it and what's it used for? What is: Composable Structure Virtual DOM Class-based component Functional component Props Component state Destructuring Constructor Implicit return","title":"Intro to React"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two - Questions for Discussion","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"","title":"Class Two - Questions for Discussion"},{"location":"module-1/CRA-overview/","text":"CRA (create-react-app) and Todo Walk-through Overview For the rest of this class we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion. Starting with React video See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element. Create-React-App See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote. Convert Functional Component to Class-based Component -[ ] Learn what component state means -[ ] How to convert a Functional Component to a Class-Based Component -[ ] import Component -[ ] exchange function keyword for class keyword -[ ] build constructor and call super -[ ] build state object -[ ] and build a render method. JSX & Add Button + State Change -[ ] Use JSX to render pure JavaScript within your HTML. -[ ] Build a button. -[ ] Build a method to be called when the button is clicked. -[ ] Update state in the method. -[ ] And render the state change on the screen. Add Input Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\". .map() Todos use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element Know Your Docs React Docs - create-react-app NPM Docs - npx","title":"CRA Overview"},{"location":"module-1/CRA-overview/#cra-create-react-app-and-todo-walk-through","text":"","title":"CRA (create-react-app) and Todo Walk-through"},{"location":"module-1/CRA-overview/#overview","text":"For the rest of this class we'll be using the create-react-app tool to well...create react apps. This lesson will be comprised of a series of videos building upon each other to walk you through using CRA and to build your first project. It's important to follow along in your text editor, understand what's going on in each and make sure you see each of them through completion.","title":"Overview"},{"location":"module-1/CRA-overview/#starting-with-react-video","text":"See what npx is. How to create a React app. Where the entry-point of all React apps is. How to navigate the first 3 files of a React app. And the first rule of building with React: Component can only return one parent element.","title":"Starting with React video"},{"location":"module-1/CRA-overview/#create-react-app","text":"See what is installed in the npx create-react-app command. How to run a React App. Make your first change. Follow the flow from the app's entry-point( index.html ) to what you see on the screen. Learn how to initialize a folder as a git repository and push it from local to remote.","title":"Create-React-App"},{"location":"module-1/CRA-overview/#convert-functional-component-to-class-based-component","text":"-[ ] Learn what component state means -[ ] How to convert a Functional Component to a Class-Based Component -[ ] import Component -[ ] exchange function keyword for class keyword -[ ] build constructor and call super -[ ] build state object -[ ] and build a render method.","title":"Convert Functional Component to Class-based Component"},{"location":"module-1/CRA-overview/#jsx-add-button-state-change","text":"-[ ] Use JSX to render pure JavaScript within your HTML. -[ ] Build a button. -[ ] Build a method to be called when the button is clicked. -[ ] Update state in the method. -[ ] And render the state change on the screen.","title":"JSX &amp; Add Button + State Change"},{"location":"module-1/CRA-overview/#add-input","text":"Create a visual cue for the human-user to input data into. Create a new property on the state so you can store the data from the human user. Create a method that moves the data from the input field to the state & is called with the onChange event listener. Repeat the \"Three Jobs of a Developer\" again for the form submit: Add submit button and call another method when clicked Create a place for the data to be stored in the state. Create a method to move the data from the \"input value\" property to \"listOfTodos\" property and clear the \"inputValue\".","title":"Add Input"},{"location":"module-1/CRA-overview/#map-todos","text":"use .map() function to display all items in the this.state.listOfTodos array use the index to create a \"unique\" key= each child element","title":".map() Todos"},{"location":"module-1/CRA-overview/#know-your-docs","text":"React Docs - create-react-app NPM Docs - npx","title":"Know Your Docs"},{"location":"module-1/bonusLesson/","text":"Bonus Lesson: React from HTML to JSX + Why Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus - HTML + JSX"},{"location":"module-1/bonusLesson/#bonus-lesson-react-from-html-to-jsx-why","text":"Now that you've seen some code that uses React, follow along with this video and build your first React app! There is no better way to learn than by doing. So, chop chop. Special Note: React has been updated since this video and now uses NPX: npx create-react-app my-first-react-app . Refer to the documentation for accurate and up-to-date info. In this video you will learn to: download GitBash or use Terminal or Command Prompt download Chocolatey or Homebrew download Node.js install create-react-app (MAKE SURE YOU USE NPX!) npx create-react-app my-first-react-app create your first react app build components create state pass props and handle events! Follow along to get a good handle on React before we dive deeper into it.","title":"Bonus Lesson: React from HTML to JSX + Why"},{"location":"module-1/class-1/","text":"Class 1: Todo App cp workspace/resources/classOutlineTemplate.md docs/module- quote Greet, Outline, and Objectify Today we're going to: *OBJECTIVE - Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time ... Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins [ ] Push Yourself Further [ ] Exit Recap, Attendance, and Reminders, 5 mins Create *** Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 1 TITLE"},{"location":"module-1/class-1/#class-1-todo-app","text":"cp workspace/resources/classOutlineTemplate.md docs/module- quote","title":"Class 1: Todo App"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Today we're going to: *OBJECTIVE - Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time ... Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-1/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-1/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-1/#creation-time-60-90-mins","text":"[ ]","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-1/#push-yourself-further","text":"[ ]","title":"Push Yourself Further"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Create *** Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/introToReact/","text":"Intro to React as a Front-End Library Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw Recap At this point in your journey with ACA you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses. Overview Let's start with what React is. It's a library. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead. Read It - What's React? React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want! How Does React Work? There are a couple of pieces we'll cover first then you can start putting it all together for yourself. Functional Components Functional Component are just that, components that can be called as normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent Without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent Class-Based Components pt.1 Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool! BIG NOTES you MUST remember: Each component can & must only return ONE parent element. Which means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class based component. Know Your Docs NPM Docs - npx React Docs - Home Page","title":"Intro to React"},{"location":"module-1/introToReact/#intro-to-react-as-a-front-end-library","text":"Don\u2019t wait for opportunity. Create it.\u2003\u2014George Bernard Shaw","title":"Intro to React as a Front-End Library"},{"location":"module-1/introToReact/#recap","text":"At this point in your journey with ACA you should have learned the basic building blocks of web development (HTML/CSS) as well as how to use JavaScript (specifically Node.js) to create your own web server and APIs. Now it's time to learn how to build the front-end of your applications in a professional, dynamic way! It should be noted that you can build front-ends with multiple libraries or frameworks including Angular 8+ , Ember , and Vue , but in this course we're going to learn to build with React . Learning this library will give you experience with a well-known and popular library, prime you for hiring in the start-up and corporate tech scene, as well as teach you skills to pick up and learn other libraries and frameworks as your career progresses.","title":"Recap"},{"location":"module-1/introToReact/#overview","text":"Let's start with what React is. It's a library. More specifically it's a front-end library just like Vue.js or Angular.js or Backbone.js and so on. It's a library that we can use to speed up the development of our app as well as address performance issues and maintain a composable structure and most importantly, MAKE DEVELOPMENT MORE FUN! We'll break each of these down ahead.","title":"Overview"},{"location":"module-1/introToReact/#read-it-whats-react","text":"React was created by Facebook as a solution to a few problems: When something in the DOM changes the entire page must re-render. Go to any site that doesn't use React and you will see that this can take a while, especially if you are viewing the site with a mobile device. Turns out, most people view Facebook with mobile phones. As the internet connectivity in the United States is limited to 3G, 4G and LTE data transmission, Facebook wanted faster page rendering to ensure people continued using their platform. Remember the 2016 presidential election? Facebook was able to get more people tuned into their platform than common media outlets because they had faster page renderings. How does it solve the faster rendering? It maintains a virtual DOM. That is to say it keeps a JavaScript object that represents the DOM, then compares what has been changed in the virtual DOM to the actual DOM and only changes pieces of the actual DOM that changed instead of the entire thing! Notice how Facebook has MANY, MANY elements displaying news feeds, images, videos, friends and ads. This becomes hard to maintain for each user. Think about it! Each user's page looks entirely different from the next. How do they do it? With React! They can create reusable components that take in data and can be rendered or not rendered on the page depending on the type of data they take in. This allows for data to be in control of what's rendered and when rather than the browser rendering and simply displaying the data. This is where it gets really cool! In Web 101 you learned how to structure a web page with HTML and style it with CSS. You learned how to manipulate data in JS211 and learned common programming patterns. With React you will be able to use those HTML elements inside the JavaScript you write while injecting CSS to style it . . . ALL IN THE SAME FILE, while also programming what is rendered and when. This, you see, is called JSX . Now we get to composable structure . Composable structure in our code allows us to build multiple pieces of our app in separate files and then call them, like functions, in the main part of our app if/when we need them! If you haven't picked up already, functions are just recipes that are built and laid out ready to be used. They are not used until they are called. In React, we can lay out functions that return HTML, CSS and JS to be used if/when we need them. Lastly, React is really fun to build with! No longer are you stuck using all the DOM methods like .getElementById() and .innerHTML() . React itself uses these under-the-hood, you use one of them and from then on you don't have to think about the DOM methods. Simply write JavaScript and render what you want, when you want and how you want!","title":"Read It - What's React?"},{"location":"module-1/introToReact/#how-does-react-work","text":"There are a couple of pieces we'll cover first then you can start putting it all together for yourself.","title":"How Does React Work?"},{"location":"module-1/introToReact/#functional-components","text":"Functional Component are just that, components that can be called as normal JavaScript functions. Let's say you had a page like YouTube and all the videos that showed up in your search results for \"hamsters on piano\" included videos you have already seen. If you wanted to display to the user their previously watched videos with a banner that says, \"you watched this on dd/mm/yyyy\" you could do that with a functional component. You would build the functional component to show the video and title that shows up in the search results. Then the component could query your history and if it matches any of your history it could use an if/else statement to display the banner if you had watched it or not if you haven't watched it. Let's look at a simpler example for right now. In the component below we're going to build a button in a functional component that will display either \"Was button clicked? true\" or \"Was button clicked? false\" based on whether the button was clicked or not. We'll call this component in a parent component that will hold the state of the button, isClicked: false . We'll then pass the state of the button back to the child component, MyFirstComponent.js via props. Check it out. MyFirstComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // because React is a library we have to call the functionality of it we want to use. // To do this we will always have to write the following line at the top of our .js file to save the functionality to a variable import React from 'react' ; // simply write a function in ES6+ then pass in the keyword props to access this special object const myFirstComponent = ( props ) => { // every component in React MUST return something... return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } // Then, because we want to compose our web pages with composable elements, we have to export the code in the file. Always write this line at the end of your .js files: export default myFirstComponent Without Comments 1 2 3 4 5 6 7 8 9 10 11 12 // MyFirstComponent.js import React from 'react' ; const myFirstComponent = ( props ) => { return ( < button > Was button clicked ? { props . wasClicked } < /button> ) } export default myFirstComponent","title":"Functional Components"},{"location":"module-1/introToReact/#class-based-components-pt1","text":"Now let's see what a class-based component looks like. Because we need to hold the state of our button and create a method to take the input of the onClick of the button, we'll need to make our parent component of this button a class-based component. This is important. Most components you build will be functional, but as you learn that it needs to hold state or have methods, you'll then change them over to be these class-based components. Check it out . . . MyFirstClassComponent.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // Again import React to use it but this time we have to destructure it and get to the \"Component\" key import React , { Component } from 'react' // We can also import code we've already built into these class-based components import myFirstComponent from './MyFirstComponent' // Notice here we use that \"extends\" word on the \"Component\" we imported? class MyFirstClassComponent extends Component { // All Classes must have a \"constructor\", in React we always pass \"props\" constructor ( props ) { // Remember that if we \"extend\" a \"class\" of a \"class\" we have to call the \"super()\" method. Just pass it \"props\" as well. super ( props ); // Class-based Components allow us to have \"state\"! And this is why/when we use class-based components. this . state = { text : '' , todos : [], isClicked : false }; // Class-based components also allow us to have methods attached to them onChange = e => { this . setState ({ text : e . target . value }) } // Class-based components must have the \"render()\" method in them for React to call them as an IIFE (immediately invoked function expression) render () { // and the \"render()\" method must have a return return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> { /* We can make comment in JSX like this, with curlies outside our comment tokens*/ } { /* We can invoke myFirstComponent here to use it in this component and pass it information via \"props\"*/ } < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent without Comments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // MyFirstClassComponent.js import React , { Component } from 'react' ; import myFirstComponent from './MyFirstComponent' class MyFirstClassComponent extends Component { constructor ( props ) { super ( props ); this . state = { text : '' , todos : [], isClicked : false }; onChange = e => { this . setState ({ text : e . target . value }) } render () { return ( < div > < h1 > Input Text Below < /h1> < input value = { this . state . text } onChange = { this . onChange } /> < myFirstComponent wasClicked = { this . state . isClicked } /> < /div> ) } } export default MyFirstClassComponent You can see that our button element, myFirstComponent , is called in our parent component's render() method and we pass it the prop: wasClicked which is pointing at the parent component's state object, isClicked . Then if you scroll back up and look at the myFirstComponent code you'll see we can display the state by placing the props.wasClicked inside curly braces {} : {props.wasClicked} . Take some time to make sure you have some general grasp of the way these are threaded together. Pretty simple right? Cool!","title":"Class-Based Components pt.1"},{"location":"module-1/introToReact/#big-notes-you-must-remember","text":"Each component can & must only return ONE parent element. Which means if you want an <h1/> , <p/> and a <button/> element to be returned from a component it must be wrapped in a parent element like a <div/> or <article/> . This is a hard and fast rule you must follow when developing with React. Class-based components must start with a capital letter!!!! You know this from JS211 about classes. It still applies here. Don't forget it or you'll be chasing the same bug every day. Title your file names the same as your components. This is the standard way of doing it. You don't have to include .js in your import statements as long as it is a .js file. If it's anything else, .ts , .css , .html , or anything else, you still have to put the file type. But JavaScript files don't have to be declared, React makes js assumptions for you. Though we'll be starting with Class-Based components as a way to get us into the mindset of developing with React it's important to know that Functional Components using Hooks to manage component state has become the norm and preferred technique circa 2019-2020+. Most apps have one and only one class based component.","title":"BIG NOTES you MUST remember:"},{"location":"module-1/introToReact/#know-your-docs","text":"NPM Docs - npx React Docs - Home Page","title":"Know Your Docs"},{"location":"module-1/reactDeveloperTools-pt1/","text":"React DevTools Overview As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on! Practice It Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools Additional Resources YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#react-devtools","text":"","title":"React DevTools"},{"location":"module-1/reactDeveloperTools-pt1/#overview","text":"As with any programming, we need to have development tools that help us debug, problem solve, and improve our applications. Luckily for us, Facebook saw fit to build such a tool for developers using React. For the rest of your homework, you are to download , read, watch , practice, and learn as much as you can about this tool. Luckily for you, you already have a React app to test on!","title":"Overview"},{"location":"module-1/reactDeveloperTools-pt1/#practice-it","text":"Chrome, being the amazing browser it is, has a developer tool built for React . Make sure you download it now. Make sure you read the React Blog on using the dev tool. Practice using the React Dev Tools","title":"Practice It"},{"location":"module-1/reactDeveloperTools-pt1/#additional-resources","text":"YT, Kent C. Dobbs - Use React DevTools YT, Thapa Technical - Debugging & Error Handling in React Blog, React Docs - React DevTools YT, Net Ninja - React Tutorial 3.5: React DevTools Article, LogRocket - 5 Things You Didn't Know about React DevTools","title":"Additional Resources"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#see-it","text":"","title":"See It"},{"location":"preCourse/setupInstructions/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"preCourse/setupInstructions/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Succeed in this Course"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"}]}